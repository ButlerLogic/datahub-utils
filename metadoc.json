"{
  "comment": "default administrative connection database",
  "name": {
    "physical": "postgres"
  },
  "schemas": {
    "datahub": {
      "id": "",
      "name": {
        "physical": "datahub"
      },
      "comment": "",
      "relationships": {
        "compliance_type_datafield_rel": {
          "name": {
            "physical": "compliance_type_datafield_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "compliance_type",
                "item": "seqid",
                "fqdn": "datahub.compliance_type.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_compliance_type",
                "item": "compliance_type_seqid",
                "fqdn": "datahub.datafield_compliance_type.compliance_type_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "custom_attribute_data_rel": {
          "name": {
            "physical": "custom_attribute_data_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "custom_attribute",
                "item": "seqid",
                "fqdn": "datahub.custom_attribute.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "custom_attribute_value",
                "item": "custom_attribute_seqid",
                "fqdn": "datahub.custom_attribute_value.custom_attribute_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_alias_rel": {
          "name": {
            "physical": "datafield_alias_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "alias",
                "item": "datafield_seqid",
                "fqdn": "datahub.alias.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_compliance_type_rel": {
          "name": {
            "physical": "datafield_compliance_type_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_compliance_type",
                "item": "datafield_seqid",
                "fqdn": "datahub.datafield_compliance_type.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_custom_attribute_value_rel": {
          "name": {
            "physical": "datafield_custom_attribute_value_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "custom_attribute_value",
                "item": "datafield_seqid",
                "fqdn": "datahub.custom_attribute_value.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_datafield_rel_child_rel": {
          "name": {
            "physical": "datafield_datafield_rel_child_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_rel",
                "item": "child_datafield_seqid",
                "fqdn": "datahub.datafield_rel.child_datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_datafield_rel_parent_rel": {
          "name": {
            "physical": "datafield_datafield_rel_parent_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_rel",
                "item": "parent_datafield_seqid",
                "fqdn": "datahub.datafield_rel.parent_datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_datafield_source_rel": {
          "name": {
            "physical": "datafield_datafield_source_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_source",
                "item": "datafield_seqid",
                "fqdn": "datahub.datafield_source.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_datatable_key_rel": {
          "name": {
            "physical": "datafield_datatable_key_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datatable_key",
                "item": "datafield_seqid",
                "fqdn": "datahub.datatable_key.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_source_datafield_source_rel": {
          "name": {
            "physical": "datafield_source_datafield_source_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_source",
                "item": "source_datafield_seqid",
                "fqdn": "datahub.datafield_source.source_datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_tag_assc_rel": {
          "name": {
            "physical": "datafield_tag_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "tag_assc",
                "item": "datafield_seqid",
                "fqdn": "datahub.tag_assc.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_ticket_data_item_rel": {
          "name": {
            "physical": "datafield_ticket_data_item_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_data_item",
                "item": "datafield_seqid",
                "fqdn": "datahub.ticket_data_item.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datafield_ticket_pin_rel": {
          "name": {
            "physical": "datafield_ticket_pin_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datafield",
                "item": "seqid",
                "fqdn": "datahub.datafield.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_pin",
                "item": "datafield_seqid",
                "fqdn": "datahub.ticket_pin.datafield_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datasource_type_datastore_rel": {
          "name": {
            "physical": "datasource_type_datastore_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datasource_type",
                "item": "seqid",
                "fqdn": "datahub.datasource_type.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datastore",
                "item": "datastore_type_seqid",
                "fqdn": "datahub.datastore.datastore_type_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_alias_rel": {
          "name": {
            "physical": "datastore_alias_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "alias",
                "item": "datastore_seqid",
                "fqdn": "datahub.alias.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_custom_attribute_value_rel": {
          "name": {
            "physical": "datastore_custom_attribute_value_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "custom_attribute_value",
                "item": "datastore_seqid",
                "fqdn": "datahub.custom_attribute_value.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_datastore_person_rel": {
          "name": {
            "physical": "datastore_datastore_person_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datastore_person",
                "item": "datastore_seqid",
                "fqdn": "datahub.datastore_person.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_query_rel": {
          "name": {
            "physical": "datastore_query_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "query",
                "item": "datastore_seqid",
                "fqdn": "datahub.query.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_table_rel": {
          "name": {
            "physical": "datastore_table_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datatable",
                "item": "datastore_seqid",
                "fqdn": "datahub.datatable.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_tag_assc_rel": {
          "name": {
            "physical": "datastore_tag_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "tag_assc",
                "item": "datastore_seqid",
                "fqdn": "datahub.tag_assc.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_ticket_data_item_rel": {
          "name": {
            "physical": "datastore_ticket_data_item_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_data_item",
                "item": "datastore_seqid",
                "fqdn": "datahub.ticket_data_item.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datastore_ticket_pin_rel": {
          "name": {
            "physical": "datastore_ticket_pin_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datastore",
                "item": "seqid",
                "fqdn": "datahub.datastore.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_pin",
                "item": "datastore_seqid",
                "fqdn": "datahub.ticket_pin.datastore_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_alias_rel": {
          "name": {
            "physical": "datatable_alias_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "alias",
                "item": "datatable_seqid",
                "fqdn": "datahub.alias.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_custom_attribute_value_rel": {
          "name": {
            "physical": "datatable_custom_attribute_value_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "custom_attribute_value",
                "item": "datatable_seqid",
                "fqdn": "datahub.custom_attribute_value.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_datafield_rel": {
          "name": {
            "physical": "datatable_datafield_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield",
                "item": "datatable_seqid",
                "fqdn": "datahub.datafield.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_datatable_key_rel": {
          "name": {
            "physical": "datatable_datatable_key_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datatable_key",
                "item": "datatable_seqid",
                "fqdn": "datahub.datatable_key.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_datatable_rel_child_set_rel": {
          "name": {
            "physical": "datatable_datatable_rel_child_set_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datatable_rel",
                "item": "child_seqid",
                "fqdn": "datahub.datatable_rel.child_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_datatable_rel_parent_set_rel": {
          "name": {
            "physical": "datatable_datatable_rel_parent_set_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datatable_rel",
                "item": "parent_seqid",
                "fqdn": "datahub.datatable_rel.parent_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_rel_datafield_rel_rel": {
          "name": {
            "physical": "datatable_rel_datafield_rel_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable_rel",
                "item": "seqid",
                "fqdn": "datahub.datatable_rel.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datafield_rel",
                "item": "rel_seqid",
                "fqdn": "datahub.datafield_rel.rel_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_tag_assc_rel": {
          "name": {
            "physical": "datatable_tag_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "tag_assc",
                "item": "datatable_seqid",
                "fqdn": "datahub.tag_assc.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_ticket_data_item_rel": {
          "name": {
            "physical": "datatable_ticket_data_item_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_data_item",
                "item": "datatable_seqid",
                "fqdn": "datahub.ticket_data_item.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "datatable_ticket_pin_rel": {
          "name": {
            "physical": "datatable_ticket_pin_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "datatable",
                "item": "seqid",
                "fqdn": "datahub.datatable.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_pin",
                "item": "datatable_seqid",
                "fqdn": "datahub.ticket_pin.datatable_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "login_group_member_rel": {
          "name": {
            "physical": "login_group_member_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "login",
                "item": "seqid",
                "fqdn": "datahub.login.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "group_member",
                "item": "login_seqid",
                "fqdn": "datahub.group_member.login_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "login_person_rel": {
          "name": {
            "physical": "login_person_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "login",
                "item": "seqid",
                "fqdn": "datahub.login.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "person",
                "item": "login_seqid",
                "fqdn": "datahub.person.login_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "set null",
            "on_match": "none"
          }
        },
        "login_right_assign_rel": {
          "name": {
            "physical": "login_right_assign_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "login",
                "item": "seqid",
                "fqdn": "datahub.login.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "right_assign",
                "item": "login_seqid",
                "fqdn": "datahub.right_assign.login_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "login_user_role_assignment_rel": {
          "name": {
            "physical": "login_user_role_assignment_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "login",
                "item": "seqid",
                "fqdn": "datahub.login.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_role_assignment",
                "item": "login_seqid",
                "fqdn": "datahub.user_role_assignment.login_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "loginuserprofilerelationship": {
          "name": {
            "physical": "LoginUserProfileRelationship"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "login",
                "item": "seqid",
                "fqdn": "datahub.login.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_profile",
                "item": "login_seqid",
                "fqdn": "datahub.user_profile.login_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_alias_rel": {
          "name": {
            "physical": "person_alias_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "alias",
                "item": "creator_seqid",
                "fqdn": "datahub.alias.creator_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "set null",
            "on_match": "none"
          }
        },
        "person_datastore_person_rel": {
          "name": {
            "physical": "person_datastore_person_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "datastore_person",
                "item": "person_seqid",
                "fqdn": "datahub.datastore_person.person_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_supervisor_rel": {
          "name": {
            "physical": "person_supervisor_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "person",
                "item": "supervisor_seqid",
                "fqdn": "datahub.person.supervisor_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "no action",
            "on_delete": "no action",
            "on_match": "none"
          }
        },
        "person_system_rel": {
          "name": {
            "physical": "person_system_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "system",
                "item": "person_seqid",
                "fqdn": "datahub.system.person_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_ticket_activity_rel": {
          "name": {
            "physical": "person_ticket_Activity_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "creator_seqid",
                "fqdn": "datahub.ticket.creator_seqid"
              },
              "position": 1,
              "cardinality": ""
            },
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_activity",
                "item": "creator_seqid",
                "fqdn": "datahub.ticket_activity.creator_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_ticket_assigned_by_rel": {
          "name": {
            "physical": "person_ticket_assigned_by_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "assigned_by_seqid",
                "fqdn": "datahub.ticket.assigned_by_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "no action",
            "on_match": "none"
          }
        },
        "person_ticket_assignee_rel": {
          "name": {
            "physical": "person_ticket_assignee_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "assignee_seqid",
                "fqdn": "datahub.ticket.assignee_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_ticket_attachment_rel": {
          "name": {
            "physical": "person_ticket_attachment_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_attachment",
                "item": "creator_seqid",
                "fqdn": "datahub.ticket_attachment.creator_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_ticket_subscriber_rel": {
          "name": {
            "physical": "person_ticket_subscriber_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_subscriber",
                "item": "person_seqid",
                "fqdn": "datahub.ticket_subscriber.person_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "person_ticket_type_agent_rel": {
          "name": {
            "physical": "person_ticket_type_agent_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "person",
                "item": "seqid",
                "fqdn": "datahub.person.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_type_agent",
                "item": "person_seqid",
                "fqdn": "datahub.ticket_type_agent.person_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "profile_alias_rel": {
          "name": {
            "physical": "profile_alias_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "profile",
                "item": "seqid",
                "fqdn": "datahub.profile.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "alias",
                "item": "profile_seqid",
                "fqdn": "datahub.alias.profile_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "profile_ldap_map_rel": {
          "name": {
            "physical": "profile_ldap_map_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "profile",
                "item": "seqid",
                "fqdn": "datahub.profile.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ldap_map",
                "item": "profile_seqid",
                "fqdn": "datahub.ldap_map.profile_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "profile_user_profile_rel": {
          "name": {
            "physical": "profile_user_profile_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "profile",
                "item": "seqid",
                "fqdn": "datahub.profile.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_profile",
                "item": "profile_seqid",
                "fqdn": "datahub.user_profile.profile_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "query_tag_assc_rel": {
          "name": {
            "physical": "query_tag_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "query",
                "item": "seqid",
                "fqdn": "datahub.query.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "tag_assc",
                "item": "query_seqid",
                "fqdn": "datahub.tag_assc.query_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "query_ticket_data_item_rel": {
          "name": {
            "physical": "query_ticket_data_item_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "query",
                "item": "seqid",
                "fqdn": "datahub.query.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_data_item",
                "item": "query_seqid",
                "fqdn": "datahub.ticket_data_item.query_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "query_ticket_pin_rel": {
          "name": {
            "physical": "query_ticket_pin_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "query",
                "item": "seqid",
                "fqdn": "datahub.query.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_pin",
                "item": "query_seqid",
                "fqdn": "datahub.ticket_pin.query_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "status_cd_status_rel": {
          "name": {
            "physical": "status_cd_status_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "status_cd",
                "item": "cd",
                "fqdn": "datahub.status_cd.cd"
              },
              "child": {
                "schema": "datahub",
                "set": "status",
                "item": "cd",
                "fqdn": "datahub.status.cd"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "system_event_list_active_webhook_rel": {
          "name": {
            "physical": "system_event_list_active_webhook_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "system_event_list",
                "item": "event_id",
                "fqdn": "datahub.system_event_list.event_id"
              },
              "child": {
                "schema": "datahub",
                "set": "active_webhook",
                "item": "event_id",
                "fqdn": "datahub.active_webhook.event_id"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "system_resource_right_right_assign_rel": {
          "name": {
            "physical": "system_resource_right_right_assign_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "system_resource_right",
                "item": "seqid",
                "fqdn": "datahub.system_resource_right.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "right_assign",
                "item": "right_seqid",
                "fqdn": "datahub.right_assign.right_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "system_resource_system_resource_right_rel": {
          "name": {
            "physical": "system_resource_system_resource_right_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "system_resource",
                "item": "seqid",
                "fqdn": "datahub.system_resource.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "system_resource_right",
                "item": "system_resource_seqid",
                "fqdn": "datahub.system_resource_right.system_resource_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "system_status_rel": {
          "name": {
            "physical": "system_Status_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "system",
                "item": "seqid",
                "fqdn": "datahub.system.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "status",
                "item": "system_seqid",
                "fqdn": "datahub.status.system_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "tag_tag_assc_rel": {
          "name": {
            "physical": "tag_tag_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "tag",
                "item": "seqid",
                "fqdn": "datahub.tag.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "tag_assc",
                "item": "tag_seqid",
                "fqdn": "datahub.tag_assc.tag_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_activity_ticket_attachment_rel": {
          "name": {
            "physical": "ticket_activity_ticket_attachment_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_activity",
                "item": "seqid",
                "fqdn": "datahub.ticket_activity.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_attachment",
                "item": "ticket_activity_seqid",
                "fqdn": "datahub.ticket_attachment.ticket_activity_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_activity_ticket_pin_rel": {
          "name": {
            "physical": "ticket_activity_ticket_pin_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_activity",
                "item": "seqid",
                "fqdn": "datahub.ticket_activity.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_pin",
                "item": "ticket_activity_seqid",
                "fqdn": "datahub.ticket_pin.ticket_activity_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_activity_ticket_resolution_rel": {
          "name": {
            "physical": "ticket_activity_ticket_resolution_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_activity",
                "item": "seqid",
                "fqdn": "datahub.ticket_activity.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "resolution_ticket_activity_seqid",
                "fqdn": "datahub.ticket.resolution_ticket_activity_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_label_ticket_label_assc_rel": {
          "name": {
            "physical": "ticket_label_ticket_label_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_label",
                "item": "seqid",
                "fqdn": "datahub.ticket_label.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_label_assc",
                "item": "ticket_label_seqid",
                "fqdn": "datahub.ticket_label_assc.ticket_label_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_priority_ticket_rel": {
          "name": {
            "physical": "ticket_priority_ticket_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_priority",
                "item": "seqid",
                "fqdn": "datahub.ticket_priority.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "priority_seqid",
                "fqdn": "datahub.ticket.priority_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "set default",
            "on_match": "none"
          }
        },
        "ticket_sla_ticket_rel": {
          "name": {
            "physical": "ticket_sla_ticket_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_sla",
                "item": "seqid",
                "fqdn": "datahub.ticket_sla.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "ticket_sla_seqid",
                "fqdn": "datahub.ticket.ticket_sla_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_sla_ticket_type_rel": {
          "name": {
            "physical": "ticket_sla_ticket_type_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_sla",
                "item": "seqid",
                "fqdn": "datahub.ticket_sla.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_type",
                "item": "sla_seqid",
                "fqdn": "datahub.ticket_type.sla_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "set default",
            "on_match": "none"
          }
        },
        "ticket_status_ticket_rel": {
          "name": {
            "physical": "ticket_status_ticket_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_status",
                "item": "seqid",
                "fqdn": "datahub.ticket_status.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "ticket_status_seqid",
                "fqdn": "datahub.ticket.ticket_status_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_ticket_activity_rel": {
          "name": {
            "physical": "ticket_ticket_activity_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket",
                "item": "seqid",
                "fqdn": "datahub.ticket.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_activity",
                "item": "ticket_seqid",
                "fqdn": "datahub.ticket_activity.ticket_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_ticket_data_item_rel": {
          "name": {
            "physical": "ticket_ticket_data_item_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket",
                "item": "seqid",
                "fqdn": "datahub.ticket.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_data_item",
                "item": "ticket_seqid",
                "fqdn": "datahub.ticket_data_item.ticket_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_ticket_label_assc_rel": {
          "name": {
            "physical": "ticket_ticket_label_assc_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket",
                "item": "seqid",
                "fqdn": "datahub.ticket.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_label_assc",
                "item": "ticket_seqid",
                "fqdn": "datahub.ticket_label_assc.ticket_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_ticket_subscriber_rel": {
          "name": {
            "physical": "ticket_ticket_subscriber_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket",
                "item": "seqid",
                "fqdn": "datahub.ticket.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_subscriber",
                "item": "ticket_seqid",
                "fqdn": "datahub.ticket_subscriber.ticket_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_type_ticket_agent_rel": {
          "name": {
            "physical": "ticket_type_ticket_agent_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_type",
                "item": "seqid",
                "fqdn": "datahub.ticket_type.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket_type_agent",
                "item": "ticket_type_seqid",
                "fqdn": "datahub.ticket_type_agent.ticket_type_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "ticket_type_ticket_rel": {
          "name": {
            "physical": "ticket_type_ticket_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "ticket_type",
                "item": "seqid",
                "fqdn": "datahub.ticket_type.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ticket",
                "item": "ticket_type_seqid",
                "fqdn": "datahub.ticket.ticket_type_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_group_group_member_subgroup_rel": {
          "name": {
            "physical": "user_group_group_member_subgroup_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_group",
                "item": "seqid",
                "fqdn": "datahub.user_group.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "group_member",
                "item": "user_subgroup_seqid",
                "fqdn": "datahub.group_member.user_subgroup_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_group_ldap_map_rel": {
          "name": {
            "physical": "user_group_ldap_map_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_group",
                "item": "seqid",
                "fqdn": "datahub.user_group.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ldap_map",
                "item": "group_seqid",
                "fqdn": "datahub.ldap_map.group_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_group_right_assign_rel": {
          "name": {
            "physical": "user_group_right_assign_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_group",
                "item": "seqid",
                "fqdn": "datahub.user_group.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "right_assign",
                "item": "group_seqid",
                "fqdn": "datahub.right_assign.group_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_group_user_group_member_rel": {
          "name": {
            "physical": "user_group_user_group_member_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_group",
                "item": "seqid",
                "fqdn": "datahub.user_group.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "group_member",
                "item": "user_group_seqid",
                "fqdn": "datahub.group_member.user_group_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_group_user_profile_rel": {
          "name": {
            "physical": "user_group_user_profile_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_group",
                "item": "seqid",
                "fqdn": "datahub.user_group.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_profile",
                "item": "user_group_seqid",
                "fqdn": "datahub.user_profile.user_group_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_group_user_role_assignment_rel": {
          "name": {
            "physical": "user_group_user_role_assignment_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_group",
                "item": "seqid",
                "fqdn": "datahub.user_group.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_role_assignment",
                "item": "user_group_seqid",
                "fqdn": "datahub.user_role_assignment.user_group_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_role_ldap_map_rel": {
          "name": {
            "physical": "user_role_ldap_map_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_role",
                "item": "seqid",
                "fqdn": "datahub.user_role.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "ldap_map",
                "item": "role_seqid",
                "fqdn": "datahub.ldap_map.role_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_role_right_assign_rel": {
          "name": {
            "physical": "user_role_right_assign_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_role",
                "item": "seqid",
                "fqdn": "datahub.user_role.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "right_assign",
                "item": "user_role_seqid",
                "fqdn": "datahub.right_assign.user_role_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_role_user_profile_rel": {
          "name": {
            "physical": "user_role_user_profile_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_role",
                "item": "seqid",
                "fqdn": "datahub.user_role.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_profile",
                "item": "user_role_seqid",
                "fqdn": "datahub.user_profile.user_role_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "user_role_user_role_person_rel": {
          "name": {
            "physical": "user_role_user_role_person_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "user_role",
                "item": "seqid",
                "fqdn": "datahub.user_role.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "user_role_assignment",
                "item": "user_role_seqid",
                "fqdn": "datahub.user_role_assignment.user_role_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        },
        "webhook_system_event_rel": {
          "name": {
            "physical": "webhook_system_event_rel"
          },
          "type": "foreign key",
          "comment": "",
          "items": [
            {
              "parent": {
                "schema": "datahub",
                "set": "webhook",
                "item": "seqid",
                "fqdn": "datahub.webhook.seqid"
              },
              "child": {
                "schema": "datahub",
                "set": "active_webhook",
                "item": "webhook_seqid",
                "fqdn": "datahub.active_webhook.webhook_seqid"
              },
              "position": 1,
              "cardinality": ""
            }
          ],
          "referential_integrity": {
            "on_update": "cascade",
            "on_delete": "cascade",
            "on_match": "none"
          }
        }
      },
      "sets": {
        "active_webhook": {
          "name": {
            "logical": "active_webhook",
            "physical": "active_webhook"
          },
          "comment": "Represents a webhook response to a specific system event.",
          "type": "TABLE",
          "items": {
            "event_id": {
              "name": {
                "physical": "event_id"
              },
              "comment": "Associated system event code",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.active_webhook.event_id"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.active_webhook.record_create_dt"
            },
            "webhook_seqid": {
              "name": {
                "physical": "webhook_seqid"
              },
              "comment": "Associated webhook ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.active_webhook.webhook_seqid"
            }
          },
          "relationships": [
            "child=system_event_list_active_webhook_rel",
            "child=webhook_system_event_rel"
          ],
          "fqdn": "datahub.active_webhook"
        },
        "alias": {
          "name": {
            "logical": "alias",
            "physical": "alias"
          },
          "comment": "Represents an alternative name used to represent a data artifact.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.archive_dt"
            },
            "creator_seqid": {
              "name": {
                "physical": "creator_seqid"
              },
              "comment": "Associated creator ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.creator_seqid"
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Represented data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.datafield_seqid"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Represented data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.datastore_seqid"
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Represented data table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.datatable_seqid"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Alias description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.dsc"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "User or service to last modify the record",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.last_modified_by"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Alias name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.nm"
            },
            "profile_seqid": {
              "name": {
                "physical": "profile_seqid"
              },
              "comment": "Associated profile",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.alias.profile_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.alias.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.alias.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique Alias ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.alias.seqid"
            }
          },
          "relationships": [
            "child=datastore_alias_rel",
            "child=datatable_alias_rel",
            "child=datafield_alias_rel",
            "child=profile_alias_rel",
            "child=person_alias_rel"
          ],
          "fqdn": "datahub.alias"
        },
        "another_test_mat_view": {
          "name": {
            "logical": "another_test_mat_view",
            "physical": "another_test_mat_view"
          },
          "comment": "Represents a data store, such as a relational database, NoSQL database, fileset, or other type.",
          "type": "VIEW",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.archive_dt"
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "Logical (common) name of the data store",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.another_test_mat_view.cn"
            },
            "conn": {
              "name": {
                "physical": "conn"
              },
              "comment": "Optional connection string for accessing the datastore",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.conn"
            },
            "datastore_type_seqid": {
              "name": {
                "physical": "datastore_type_seqid"
              },
              "comment": "Associated datasource type ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'UNKNOWN'::text",
              "nullable": false,
              "fqdn": "datahub.another_test_mat_view.datastore_type_seqid"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Common description of the data store",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.dsc"
            },
            "est_record_ct": {
              "name": {
                "physical": "est_record_ct"
              },
              "comment": "Estimated number of records in the data source (when applicable)",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.est_record_ct"
            },
            "est_sz": {
              "name": {
                "physical": "est_sz"
              },
              "comment": "Estimated size (MB)",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.est_sz"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.fuzzy_search"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service that last modified the source",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.last_modified_by"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last known data update date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Metadata about the data store.",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.meta"
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "A custom data store message, written in markdown, to diplsay in the datahub.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.msg"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Actual name of the database, file, or other type of data source",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.another_test_mat_view.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.another_test_mat_view.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.another_test_mat_view.seqid"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "An alternative \"human friendly\" key used to identify the data source.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.stub"
            },
            "update_sched": {
              "name": {
                "physical": "update_sched"
              },
              "comment": "ISO 8601 interval pattern or custom schedule explanation",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.update_sched"
            },
            "version": {
              "name": {
                "physical": "version"
              },
              "comment": "The datastore version (ex: 14.0.0)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.another_test_mat_view.version"
            }
          },
          "relationships": [],
          "view_source": " SELECT d.seqid,\n    d.stub,\n    d.nm,\n    d.cn,\n    d.dsc,\n    d.datastore_type_seqid,\n    d.version,\n    d.meta,\n    d.est_sz,\n    d.est_record_ct,\n    d.conn,\n    d.update_sched,\n    d.last_update_dt,\n    d.last_modified_by,\n    d.msg,\n    d.record_create_dt,\n    d.archive_dt,\n    d.search,\n    d.fuzzy_search\n   FROM datahub.datastore d\n  WHERE (d.archive_dt IS NOT NULL);",
          "fqdn": "datahub.another_test_mat_view"
        },
        "api_key": {
          "name": {
            "logical": "api_key",
            "physical": "api_key"
          },
          "comment": "Represents an API key for accessing the datahub directly through the API.",
          "type": "TABLE",
          "items": {
            "acl": {
              "name": {
                "physical": "acl"
              },
              "comment": "Roles assigned to the API key",
              "type": "_text",
              "udt_type": "_text",
              "identity": false,
              "default": "'{}'::text[]",
              "nullable": true,
              "fqdn": "datahub.api_key.acl"
            },
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.api_key.archive_dt"
            },
            "auth_key": {
              "name": {
                "physical": "auth_key"
              },
              "comment": "The JWT verification public key (JWK)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.api_key.auth_key"
            },
            "decryption_key": {
              "name": {
                "physical": "decryption_key"
              },
              "comment": "A private key (PEM) used to decrypt messages from senders",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.api_key.decryption_key"
            },
            "decryption_key_type": {
              "name": {
                "physical": "decryption_key_type"
              },
              "comment": "Associated decryption key type (ex: RSA, ECDSA)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.api_key.decryption_key_type"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "API key description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.api_key.dsc"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "true",
              "nullable": true,
              "fqdn": "datahub.api_key.enabled"
            },
            "expire_dt": {
              "name": {
                "physical": "expire_dt"
              },
              "comment": "The API key expiration date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.api_key.expire_dt"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Human-friendly key name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.api_key.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.api_key.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique API ID (key)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.api_key.seqid"
            },
            "verification_key": {
              "name": {
                "physical": "verification_key"
              },
              "comment": "The public key (PEM) used to verify the identity of the sender",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.api_key.verification_key"
            },
            "verification_key_type": {
              "name": {
                "physical": "verification_key_type"
              },
              "comment": "Associated verification key type (ex: RSA, ECDSA)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.api_key.verification_key_type"
            }
          },
          "relationships": [],
          "fqdn": "datahub.api_key"
        },
        "catalog_changelog": {
          "name": {
            "logical": "catalog_changelog",
            "physical": "catalog_changelog"
          },
          "comment": "A history of the data structure/model/schema for data stores, tables, and fields.",
          "type": "TABLE",
          "items": {
            "blame": {
              "name": {
                "physical": "blame"
              },
              "comment": "The user or service that created the change",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.catalog_changelog.blame",
              "example": "developer",
              "metadata": {
                "most_common_value": "developer",
                "null_percentage": 0
              }
            },
            "change": {
              "name": {
                "physical": "change"
              },
              "comment": "Change data",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.catalog_changelog.change",
              "example": "{\"op\": \"DELETE\", \"delta\": {\"cn\": null, \"nm\": \"catalog_type\", \"dsc\": null, \"msg\": null, \"meta\": null, \"seqid\": \"7HOWCIF081ngYT_L2N5Jv\", \"length\": null, \"search\": \"'catalog':1A 'text':3C 'type':2A\", \"status\": null, \"example\": null, \"datatype\": \"text\", \"is_array\": false, \"nullable\": true, \"archive_dt\": null, \"ordinality\": null, \"default_val\": null, \"fuzzy_search\": \"catalog_type\", \"position_end\": null, \"last_update_dt\": null, \"position_start\": null, \"datatable_seqid\": \"ySzWVdrCv-TurJcWPAb3-\", \"last_modified_by\": \"developer\", \"record_create_dt\": \"2023-05-26T21:17:17.580704+00:00\"}}",
              "metadata": {
                "most_common_value": "{\"op\": \"DELETE\", \"delta\": {\"cn\": null, \"nm\": \"catalog_type\", \"dsc\": null, \"msg\": null, \"meta\": null, \"seqid\": \"7HOWCIF081ngYT_L2N5Jv\", \"length\": null, \"search\": \"'catalog':1A 'text':3C 'type':2A\", \"status\": null, \"example\": null, \"datatype\": \"text\", \"is_array\": false, \"nullable\": true, \"archive_dt\": null, \"ordinality\": null, \"default_val\": null, \"fuzzy_search\": \"catalog_type\", \"position_end\": null, \"last_update_dt\": null, \"position_start\": null, \"datatable_seqid\": \"ySzWVdrCv-TurJcWPAb3-\", \"last_modified_by\": \"developer\", \"record_create_dt\": \"2023-05-26T21:17:17.580704+00:00\"}}",
                "null_percentage": 0
              },
              "key": {
                "name": "catalog_changelog_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the catalog_changelog item."
              }
            },
            "change::delta": {
              "name": {
                "physical": "change::delta"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.catalog_changelog.delta",
              "metadata": {
                "source": "change"
              }
            },
            "change::op": {
              "name": {
                "physical": "change::op"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.catalog_changelog.op",
              "metadata": {
                "source": "change"
              }
            },
            "db_user": {
              "name": {
                "physical": "db_user"
              },
              "comment": "Database user responsible for change",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "(SESSION_USER)::text",
              "nullable": false,
              "fqdn": "datahub.catalog_changelog.db_user",
              "example": "postgres",
              "metadata": {
                "most_common_value": "postgres",
                "null_percentage": 0
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.catalog_changelog.record_create_dt",
              "example": "2023-06-01 23:33:06.427208+00",
              "metadata": {
                "most_common_value": "2023-06-01 23:33:06.427208+00",
                "null_percentage": 0
              }
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.catalog_changelog.seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "source": {
              "name": {
                "physical": "source"
              },
              "comment": "Source entity name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.catalog_changelog.source",
              "example": "datahub.datafield",
              "metadata": {
                "most_common_value": "datahub.datafield",
                "null_percentage": 0
              }
            },
            "source_seqid": {
              "name": {
                "physical": "source_seqid"
              },
              "comment": "Original record ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.catalog_changelog.source_seqid",
              "example": "NNO6zVgggg-RvnsvBwX4v",
              "metadata": {
                "most_common_value": "NNO6zVgggg-RvnsvBwX4v",
                "null_percentage": 0
              }
            }
          },
          "relationships": [],
          "fqdn": "datahub.catalog_changelog"
        },
        "catalog_search_index": {
          "name": {
            "logical": "catalog_search_index",
            "physical": "catalog_search_index"
          },
          "comment": "A physical table used to search the data catalog.",
          "type": "TABLE",
          "items": {
            "element_seqid": {
              "name": {
                "physical": "element_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.catalog_search_index.element_seqid"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.catalog_search_index.fuzzy_search"
            },
            "last_index_dt": {
              "name": {
                "physical": "last_index_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.catalog_search_index.last_index_dt"
            },
            "profile_seqid": {
              "name": {
                "physical": "profile_seqid"
              },
              "comment": "Profile to associate with the index",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.catalog_search_index.profile_seqid"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.catalog_search_index.search"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "1 = Source, 2 = Set, 3 = Item, 4 = Query",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.catalog_search_index.type"
            }
          },
          "relationships": [],
          "fqdn": "datahub.catalog_search_index"
        },
        "compliance_type": {
          "name": {
            "logical": "compliance_type",
            "physical": "compliance_type"
          },
          "comment": "Represents a type of regulation data must comply with",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.compliance_type.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.compliance_type.dsc"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.compliance_type.fuzzy_search"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Name/type of compliance (PII, HIPAA, etc)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.compliance_type.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.compliance_type.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.compliance_type.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique compliance ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.compliance_type.seqid"
            }
          },
          "relationships": [
            "parent=compliance_type_datafield_rel"
          ],
          "fqdn": "datahub.compliance_type"
        },
        "custom_attribute": {
          "name": {
            "logical": "custom_attribute",
            "physical": "custom_attribute"
          },
          "comment": "Represents a custom metadata attribute to associate with a dictionary item.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute.archive_dt"
            },
            "default_value": {
              "name": {
                "physical": "default_value"
              },
              "comment": "Text (serialized) representation of the default value",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute.default_value"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Name/type of the attribute",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.custom_attribute.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.custom_attribute.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique custom attribute ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.custom_attribute.seqid"
            }
          },
          "relationships": [
            "parent=custom_attribute_data_rel"
          ],
          "fqdn": "datahub.custom_attribute"
        },
        "custom_attribute_value": {
          "name": {
            "logical": "custom_attribute_value",
            "physical": "custom_attribute_value"
          },
          "comment": "Value of a custom attribute associated with a data table.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute_value.archive_dt"
            },
            "custom_attribute_seqid": {
              "name": {
                "physical": "custom_attribute_seqid"
              },
              "comment": "Associated custom attribute ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.custom_attribute_value.custom_attribute_seqid"
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Associated data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute_value.datafield_seqid"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Associated data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute_value.datastore_seqid"
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Associated data table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute_value.datatable_seqid"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service which last modified the value.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute_value.last_modified_by"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.custom_attribute_value.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "ID representing custom attribute value relationship.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.custom_attribute_value.seqid"
            },
            "value": {
              "name": {
                "physical": "value"
              },
              "comment": "Text (serialized) representation of the attribute value.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.custom_attribute_value.value"
            }
          },
          "relationships": [
            "child=custom_attribute_data_rel",
            "child=datastore_custom_attribute_value_rel",
            "child=datatable_custom_attribute_value_rel",
            "child=datafield_custom_attribute_value_rel"
          ],
          "fqdn": "datahub.custom_attribute_value"
        },
        "datafield": {
          "name": {
            "logical": "datafield",
            "physical": "datafield"
          },
          "comment": "Represents a field/column within a database table or set.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.archive_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 98.27855825424194
              }
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "Common logical name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.cn",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 95.93114256858826
              }
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Parent table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datafield.datatable_seqid",
              "example": "FPJQ0HqTxjJZxBZkCPQoJ",
              "metadata": {
                "most_common_value": "FPJQ0HqTxjJZxBZkCPQoJ",
                "null_percentage": 0
              }
            },
            "datatype": {
              "name": {
                "physical": "datatype"
              },
              "comment": "Physical data type of the field or column",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.datatype",
              "example": "text",
              "metadata": {
                "most_common_value": "text",
                "null_percentage": 0
              }
            },
            "default_val": {
              "name": {
                "physical": "default_val"
              },
              "comment": "Default value (as a string)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.default_val",
              "example": "NULL",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 76.36932730674744
              }
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Comment or description as defined in the data store",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.dsc",
              "example": "Record creation date",
              "metadata": {
                "most_common_value": "Record creation date",
                "null_percentage": 40.68857729434967
              }
            },
            "example": {
              "name": {
                "physical": "example"
              },
              "comment": "Example data",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.example",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 99.53051805496216
              }
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.fuzzy_search",
              "example": "record_create_dt Record creation date",
              "metadata": {
                "most_common_value": "record_create_dt Record creation date",
                "null_percentage": 0
              }
            },
            "is_array": {
              "name": {
                "physical": "is_array"
              },
              "comment": "Indicates the field is an array",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.datafield.is_array",
              "example": "f",
              "metadata": {
                "most_common_value": "f",
                "null_percentage": 0
              }
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service that last modified the item",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.last_modified_by",
              "example": "developer",
              "metadata": {
                "most_common_value": "developer",
                "null_percentage": 0
              }
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last date when the record was updated",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.last_update_dt",
              "example": "2023-09-16 21:36:42.477039+00",
              "metadata": {
                "most_common_value": "2023-09-16 21:36:42.477039+00",
                "null_percentage": 74.64788556098938
              }
            },
            "length": {
              "name": {
                "physical": "length"
              },
              "comment": "Optional length for text-based data types",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.length",
              "example": "250",
              "metadata": {
                "most_common_value": "250",
                "null_percentage": 99.2175281047821
              }
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata about the field",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.meta",
              "example": "{\"source\": \"change\"}",
              "metadata": {
                "most_common_value": "{\"source\": \"change\"}",
                "null_percentage": 96.71361446380615
              },
              "key": {
                "name": "datafield_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the datafield item."
              }
            },
            "meta::source": {
              "name": {
                "physical": "meta::source"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.datafield.source",
              "metadata": {
                "source": "meta"
              }
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "A custom data field message, written in markdown, to display in the datahub.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.msg",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Physical field name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datafield.nm",
              "example": "record_create_dt",
              "metadata": {
                "most_common_value": "record_create_dt",
                "null_percentage": 0
              }
            },
            "nullable": {
              "name": {
                "physical": "nullable"
              },
              "comment": "Indicates the field can be null",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "true",
              "nullable": false,
              "fqdn": "datahub.datafield.nullable",
              "example": "t",
              "metadata": {
                "most_common_value": "t",
                "null_percentage": 0
              }
            },
            "ordinality": {
              "name": {
                "physical": "ordinality"
              },
              "comment": "A defined sort order to diplay fields",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.ordinality",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "position_end": {
              "name": {
                "physical": "position_end"
              },
              "comment": "End position for numeric data types",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.position_end",
              "example": "10",
              "metadata": {
                "most_common_value": "10",
                "null_percentage": 99.06103014945984
              }
            },
            "position_start": {
              "name": {
                "physical": "position_start"
              },
              "comment": "Start position for numeric data types",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.position_start",
              "example": "18",
              "metadata": {
                "most_common_value": "18",
                "null_percentage": 99.06103014945984
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datafield.record_create_dt",
              "example": "2023-05-26 21:17:17.580704+00",
              "metadata": {
                "most_common_value": "2023-05-26 21:17:17.580704+00",
                "null_percentage": 0
              }
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.search",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datafield.seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "status": {
              "name": {
                "physical": "status"
              },
              "comment": "Indicates the status of the field, such as \"valid\", \"deprecated\", \"future\", etc.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield.status",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            }
          },
          "relationships": [
            "parent=datafield_alias_rel",
            "parent=datafield_custom_attribute_value_rel",
            "child=datatable_datafield_rel",
            "parent=datafield_compliance_type_rel",
            "parent=datafield_datafield_rel_parent_rel",
            "parent=datafield_datafield_rel_child_rel",
            "parent=datafield_datafield_source_rel",
            "parent=datafield_source_datafield_source_rel",
            "parent=datafield_datatable_key_rel",
            "parent=datafield_tag_assc_rel",
            "parent=datafield_ticket_data_item_rel",
            "parent=datafield_ticket_pin_rel"
          ],
          "fqdn": "datahub.datafield"
        },
        "datafield_compliance_type": {
          "name": {
            "logical": "datafield_compliance_type",
            "physical": "datafield_compliance_type"
          },
          "comment": "Compliance types/patterns associated with a data field.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield_compliance_type.archive_dt"
            },
            "compliance_type_seqid": {
              "name": {
                "physical": "compliance_type_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datafield_compliance_type.compliance_type_seqid"
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datafield_compliance_type.datafield_seqid"
            },
            "is_compliant": {
              "name": {
                "physical": "is_compliant"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "true",
              "nullable": false,
              "fqdn": "datahub.datafield_compliance_type.is_compliant"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service which last associated/confirmed the compliance policy",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield_compliance_type.last_modified_by"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record create date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datafield_compliance_type.record_create_dt"
            }
          },
          "relationships": [
            "child=compliance_type_datafield_rel",
            "child=datafield_compliance_type_rel"
          ],
          "fqdn": "datahub.datafield_compliance_type"
        },
        "datafield_rel": {
          "name": {
            "logical": "datafield_rel",
            "physical": "datafield_rel"
          },
          "comment": "Represents a physical relationship between two data items.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield_rel.archive_dt"
            },
            "child_datafield_seqid": {
              "name": {
                "physical": "child_datafield_seqid"
              },
              "comment": "Data field source ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datafield_rel.child_datafield_seqid"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "User or service to last modify the record",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield_rel.last_modified_by"
            },
            "parent_datafield_seqid": {
              "name": {
                "physical": "parent_datafield_seqid"
              },
              "comment": "Data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datafield_rel.parent_datafield_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datafield_rel.record_create_dt"
            },
            "rel_seqid": {
              "name": {
                "physical": "rel_seqid"
              },
              "comment": "Associated relationship ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.datafield_rel.rel_seqid"
            }
          },
          "relationships": [
            "child=datafield_datafield_rel_parent_rel",
            "child=datafield_datafield_rel_child_rel",
            "child=datatable_rel_datafield_rel_rel"
          ],
          "fqdn": "datahub.datafield_rel"
        },
        "datafield_source": {
          "name": {
            "logical": "datafield_source",
            "physical": "datafield_source"
          },
          "comment": "Associate a data field with its source (lineage)",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield_source.archive_dt"
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datafield_source.datafield_seqid"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "User or service to last modified the record",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datafield_source.last_modified_by"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datafield_source.record_create_dt"
            },
            "source_datafield_seqid": {
              "name": {
                "physical": "source_datafield_seqid"
              },
              "comment": "Data field source ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datafield_source.source_datafield_seqid"
            }
          },
          "relationships": [
            "child=datafield_datafield_source_rel",
            "child=datafield_source_datafield_source_rel"
          ],
          "fqdn": "datahub.datafield_source"
        },
        "datahub": {
          "name": {
            "physical": "datahub"
          },
          "comment": "",
          "type": "",
          "items": {},
          "relationships": [],
          "fqdn": "datahub.datahub"
        },
        "datasource_type": {
          "name": {
            "logical": "datasource_type",
            "physical": "datasource_type"
          },
          "comment": "Represents a datasource type.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datasource_type.archive_dt"
            },
            "ctg": {
              "name": {
                "physical": "ctg"
              },
              "comment": "Type of data, such as database, file, archive, etc.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datasource_type.ctg"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Datasource type description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datasource_type.dsc"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datasource_type.meta"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Datasource type name/label",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datasource_type.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datasource_type.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique datasource type ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datasource_type.seqid"
            }
          },
          "relationships": [
            "parent=datasource_type_datastore_rel"
          ],
          "fqdn": "datahub.datasource_type"
        },
        "datastore": {
          "name": {
            "logical": "datastore",
            "physical": "datastore"
          },
          "comment": "Represents a data store, such as a relational database, NoSQL database, fileset, or other type.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.archive_dt"
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "Logical (common) name of the data store",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datastore.cn"
            },
            "conn": {
              "name": {
                "physical": "conn"
              },
              "comment": "Optional connection string for accessing the datastore",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.conn"
            },
            "datastore_type_seqid": {
              "name": {
                "physical": "datastore_type_seqid"
              },
              "comment": "Associated datasource type ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'UNKNOWN'::text",
              "nullable": false,
              "fqdn": "datahub.datastore.datastore_type_seqid"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Common description of the data store",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.dsc"
            },
            "est_record_ct": {
              "name": {
                "physical": "est_record_ct"
              },
              "comment": "Estimated number of records in the data source (when applicable)",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.est_record_ct"
            },
            "est_sz": {
              "name": {
                "physical": "est_sz"
              },
              "comment": "Estimated size (MB)",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.est_sz"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.fuzzy_search"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service that last modified the source",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.last_modified_by"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last known data update date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": true,
              "fqdn": "datahub.datastore.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Metadata about the data store.",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.meta",
              "key": {
                "name": "datastore_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the datastore item."
              }
            },
            "meta::host": {
              "name": {
                "physical": "meta::host"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.datastore.host",
              "metadata": {
                "source": "meta"
              }
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "A custom data store message, written in markdown, to diplsay in the datahub.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.msg"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Actual name of the database, file, or other type of data source",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datastore.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datastore.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datastore.seqid"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "An alternative \"human friendly\" key used to identify the data source.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.stub"
            },
            "update_sched": {
              "name": {
                "physical": "update_sched"
              },
              "comment": "ISO 8601 interval pattern or custom schedule explanation",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.update_sched"
            },
            "version": {
              "name": {
                "physical": "version"
              },
              "comment": "The datastore version (ex: 14.0.0)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore.version"
            }
          },
          "relationships": [
            "parent=datastore_alias_rel",
            "parent=datastore_custom_attribute_value_rel",
            "child=datasource_type_datastore_rel",
            "parent=datastore_datastore_person_rel",
            "parent=datastore_table_rel",
            "parent=datastore_query_rel",
            "parent=datastore_tag_assc_rel",
            "parent=datastore_ticket_data_item_rel",
            "parent=datastore_ticket_pin_rel"
          ],
          "fqdn": "datahub.datastore"
        },
        "datastore_person": {
          "name": {
            "logical": "datastore_person",
            "physical": "datastore_person"
          },
          "comment": "Represents an owner, steward, or other administrative person associated with the database.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datastore_person.archive_dt"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Associated data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datastore_person.datastore_seqid"
            },
            "person_seqid": {
              "name": {
                "physical": "person_seqid"
              },
              "comment": "Associated person ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datastore_person.person_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datastore_person.record_create_dt"
            },
            "role": {
              "name": {
                "physical": "role"
              },
              "comment": "Role of user",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'Steward'::text",
              "nullable": false,
              "fqdn": "datahub.datastore_person.role"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datastore_person.seqid"
            }
          },
          "relationships": [
            "child=datastore_datastore_person_rel",
            "child=person_datastore_person_rel"
          ],
          "fqdn": "datahub.datastore_person"
        },
        "datatable": {
          "name": {
            "logical": "datatable",
            "physical": "datatable"
          },
          "comment": "An EnableDB account. Users must belong to an account.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.archive_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 91.97530746459961
              }
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "Logical name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.cn",
              "example": "Active Webhook",
              "metadata": {
                "most_common_value": "Active Webhook",
                "null_percentage": 62.962961196899414
              }
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Parent data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datatable.datastore_seqid",
              "example": "EHrsMJSV9hNwjsmebtjMP",
              "metadata": {
                "most_common_value": "EHrsMJSV9hNwjsmebtjMP",
                "null_percentage": 0
              }
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Phyiscal table description/comments",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.dsc",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 79.62962985038757
              }
            },
            "est_record_ct": {
              "name": {
                "physical": "est_record_ct"
              },
              "comment": "Estimated number of records contained in the table",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.est_record_ct",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "est_sz": {
              "name": {
                "physical": "est_sz"
              },
              "comment": "Estimated size (MB) of the table",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.est_sz",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.fuzzy_search",
              "example": "Active Webhook",
              "metadata": {
                "most_common_value": "Active Webhook",
                "null_percentage": 0
              }
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service that last modified the set",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.last_modified_by",
              "example": "developer",
              "metadata": {
                "most_common_value": "developer",
                "null_percentage": 0
              }
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last known data update date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": true,
              "fqdn": "datahub.datatable.last_update_dt",
              "example": "2023-04-18 04:33:36.972179+00",
              "metadata": {
                "most_common_value": "2023-04-18 04:33:36.972179+00",
                "null_percentage": 0
              }
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.meta",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 80.86419701576233
              },
              "key": {
                "name": "datatable_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the datatable item."
              }
            },
            "meta::view_source": {
              "name": {
                "physical": "meta::view_source"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.datatable.view_source",
              "metadata": {
                "source": "meta"
              }
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "A custom data table message, written in markdown, to diplsay in the datahub.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.msg",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Physical table name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datatable.nm",
              "example": "active_webhook",
              "metadata": {
                "most_common_value": "active_webhook",
                "null_percentage": 0
              }
            },
            "ordinality": {
              "name": {
                "physical": "ordinality"
              },
              "comment": "The sort order",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.ordinality",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datatable.record_create_dt",
              "example": "2023-04-18 04:33:36.972179+00",
              "metadata": {
                "most_common_value": "2023-04-18 04:33:36.972179+00",
                "null_percentage": 0
              }
            },
            "schema_nm": {
              "name": {
                "physical": "schema_nm"
              },
              "comment": "Physical schema name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.schema_nm",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.search",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique data table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datatable.seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "update_sched": {
              "name": {
                "physical": "update_sched"
              },
              "comment": "ISO 8601 interval pattern or custom schedule explanation",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable.update_sched",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            }
          },
          "relationships": [
            "parent=datatable_alias_rel",
            "parent=datatable_custom_attribute_value_rel",
            "parent=datatable_datafield_rel",
            "child=datastore_table_rel",
            "parent=datatable_datatable_key_rel",
            "parent=datatable_datatable_rel_parent_set_rel",
            "parent=datatable_datatable_rel_child_set_rel",
            "parent=datatable_tag_assc_rel",
            "parent=datatable_ticket_data_item_rel",
            "parent=datatable_ticket_pin_rel"
          ],
          "fqdn": "datahub.datatable"
        },
        "datatable_key": {
          "name": {
            "logical": "datatable_key",
            "physical": "datatable_key"
          },
          "comment": "Represents a data table key.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_key.archive_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Associated data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datatable_key.datafield_seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Associated data table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datatable_key.datatable_seqid",
              "example": "FPJQ0HqTxjJZxBZkCPQoJ",
              "metadata": {
                "most_common_value": "FPJQ0HqTxjJZxBZkCPQoJ",
                "null_percentage": 0
              }
            },
            "key_nm": {
              "name": {
                "physical": "key_nm"
              },
              "comment": "Associated key name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.datatable_key.key_nm",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "User or service to last modify the record",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_key.last_modified_by",
              "example": "developer",
              "metadata": {
                "most_common_value": "developer",
                "null_percentage": 0
              }
            },
            "pk": {
              "name": {
                "physical": "pk"
              },
              "comment": "Indicates the key is part of the primary key",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.datatable_key.pk",
              "example": "f",
              "metadata": {
                "most_common_value": "f",
                "null_percentage": 0
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datatable_key.record_create_dt",
              "example": "2023-05-26 21:17:21.678311+00",
              "metadata": {
                "most_common_value": "2023-05-26 21:17:21.678311+00",
                "null_percentage": 0
              }
            }
          },
          "relationships": [
            "child=datatable_datatable_key_rel",
            "child=datafield_datatable_key_rel"
          ],
          "fqdn": "datahub.datatable_key"
        },
        "datatable_rel": {
          "name": {
            "logical": "datatable_rel",
            "physical": "datatable_rel"
          },
          "comment": "Represents a relationship between two data sets.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.archive_dt"
            },
            "cardinality": {
              "name": {
                "physical": "cardinality"
              },
              "comment": "Determines the cardinality. Any value less than zero is considered infinite (N). This is always a 4 element array, such as [0,1,1,-1], which represent 0..1 (zero or one) to 1..N (one or many)",
              "type": "_int4",
              "udt_type": "_int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.cardinality"
            },
            "child_seqid": {
              "name": {
                "physical": "child_seqid"
              },
              "comment": "Associated child set ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datatable_rel.child_seqid"
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "Common name of a relationship",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.cn"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Description (comment) of a relationship",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.dsc"
            },
            "identifying": {
              "name": {
                "physical": "identifying"
              },
              "comment": "Indicates the relationship is identifying, non-identifying, or unknown (null)",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.identifying"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "User or service which last modified the record",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.last_modified_by"
            },
            "match_type": {
              "name": {
                "physical": "match_type"
              },
              "comment": "Relationship match type",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'simple'::text",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.match_type"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata to associate with a relationship",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.meta"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Physical name of a relationship",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.nm"
            },
            "parent_delete": {
              "name": {
                "physical": "parent_delete"
              },
              "comment": "Referential integrity response of parent delete operation",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'no action'::text",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.parent_delete"
            },
            "parent_seqid": {
              "name": {
                "physical": "parent_seqid"
              },
              "comment": "Associated parent set ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.datatable_rel.parent_seqid"
            },
            "parent_update": {
              "name": {
                "physical": "parent_update"
              },
              "comment": "Referential integrity response of parent update operation",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'no action'::text",
              "nullable": true,
              "fqdn": "datahub.datatable_rel.parent_update"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.datatable_rel.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique relationship ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.datatable_rel.seqid"
            }
          },
          "relationships": [
            "parent=datatable_rel_datafield_rel_rel",
            "child=datatable_datatable_rel_parent_set_rel",
            "child=datatable_datatable_rel_child_set_rel"
          ],
          "fqdn": "datahub.datatable_rel"
        },
        "group_member": {
          "name": {
            "logical": "group_member",
            "physical": "group_member"
          },
          "comment": "Represents a person's group membership/association",
          "type": "TABLE",
          "items": {
            "login_seqid": {
              "name": {
                "physical": "login_seqid"
              },
              "comment": "Associated login ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.group_member.login_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.group_member.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique membership ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.group_member.seqid"
            },
            "user_group_seqid": {
              "name": {
                "physical": "user_group_seqid"
              },
              "comment": "Associated user group ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.group_member.user_group_seqid"
            },
            "user_subgroup_seqid": {
              "name": {
                "physical": "user_subgroup_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.group_member.user_subgroup_seqid"
            }
          },
          "relationships": [
            "child=user_group_user_group_member_rel",
            "child=login_group_member_rel",
            "child=user_group_group_member_subgroup_rel"
          ],
          "fqdn": "datahub.group_member"
        },
        "ldap_map": {
          "name": {
            "logical": "ldap_map",
            "physical": "ldap_map"
          },
          "comment": "Map an LDAP attribute to a Datahub security object.",
          "type": "TABLE",
          "items": {
            "dn": {
              "name": {
                "physical": "dn"
              },
              "comment": "LDAP distinguished name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ldap_map.dn"
            },
            "group_seqid": {
              "name": {
                "physical": "group_seqid"
              },
              "comment": "Associated user group ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ldap_map.group_seqid"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ldap_map.meta"
            },
            "profile_seqid": {
              "name": {
                "physical": "profile_seqid"
              },
              "comment": "Associated profile ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ldap_map.profile_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ldap_map.record_create_dt"
            },
            "role_seqid": {
              "name": {
                "physical": "role_seqid"
              },
              "comment": "Associated user role ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ldap_map.role_seqid"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.ldap_map.seqid"
            }
          },
          "relationships": [
            "child=user_role_ldap_map_rel",
            "child=user_group_ldap_map_rel",
            "child=profile_ldap_map_rel"
          ],
          "fqdn": "datahub.ldap_map"
        },
        "login": {
          "name": {
            "logical": "login",
            "physical": "login"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Description of the login/purpose",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.dsc"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "Indicates the user is enabled",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "true",
              "nullable": false,
              "fqdn": "datahub.login.enabled"
            },
            "expire_dt": {
              "name": {
                "physical": "expire_dt"
              },
              "comment": "Optional expiration date. After this date, the user is automatically disabled.",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.expire_dt"
            },
            "last_login_dt": {
              "name": {
                "physical": "last_login_dt"
              },
              "comment": "Last known time when the login was used.",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.last_login_dt"
            },
            "ldap_id": {
              "name": {
                "physical": "ldap_id"
              },
              "comment": "Optional LDAP ID (sAMAccountName, uid, Distinguished Name, etc) to associate with login",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.ldap_id"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadaa",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.meta"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Indicates the login is protected/reserved.",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.login.protected"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.login.record_create_dt"
            },
            "secret": {
              "name": {
                "physical": "secret"
              },
              "comment": "Encrypted secret/password",
              "type": "bytea",
              "udt_type": "bytea",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.login.secret"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique user ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.login.seqid"
            },
            "totp_secret": {
              "name": {
                "physical": "totp_secret"
              },
              "comment": "Secret used to generate time-based one-time passwords.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.login.totp_secret"
            },
            "username": {
              "name": {
                "physical": "username"
              },
              "comment": "Username",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.login.username"
            }
          },
          "relationships": [
            "parent=login_group_member_rel",
            "parent=login_person_rel",
            "parent=login_right_assign_rel",
            "parent=loginuserprofilerelationship",
            "parent=login_user_role_assignment_rel"
          ],
          "fqdn": "datahub.login"
        },
        "newtable": {
          "name": {
            "logical": "newtable",
            "physical": "newtable"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "column1": {
              "name": {
                "physical": "column1"
              },
              "comment": "",
              "type": "varchar",
              "udt_type": "varchar",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.newtable.column1"
            }
          },
          "relationships": [],
          "fqdn": "datahub.newtable"
        },
        "person": {
          "name": {
            "logical": "person",
            "physical": "person"
          },
          "comment": "Represents a person",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.archive_dt"
            },
            "avatar_url": {
              "name": {
                "physical": "avatar_url"
              },
              "comment": "URL of the user avatar.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.avatar_url"
            },
            "dn": {
              "name": {
                "physical": "dn"
              },
              "comment": "Display name, handle, or nickname",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.dn"
            },
            "eml": {
              "name": {
                "physical": "eml"
              },
              "comment": "Email address",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.eml"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "Indicates the person is enabled (active)",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.enabled"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.fuzzy_search"
            },
            "gn": {
              "name": {
                "physical": "gn"
              },
              "comment": "First name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.gn"
            },
            "login_seqid": {
              "name": {
                "physical": "login_seqid"
              },
              "comment": "Associated Login ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.login_seqid"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "User metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.meta"
            },
            "phone": {
              "name": {
                "physical": "phone"
              },
              "comment": "Phone Number",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.phone"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.person.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique person ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.person.seqid"
            },
            "sn": {
              "name": {
                "physical": "sn"
              },
              "comment": "Last name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.sn"
            },
            "supervisor_seqid": {
              "name": {
                "physical": "supervisor_seqid"
              },
              "comment": "Supervisor ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.supervisor_seqid"
            },
            "title": {
              "name": {
                "physical": "title"
              },
              "comment": "Job title/role",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.person.title"
            }
          },
          "relationships": [
            "parent=person_alias_rel",
            "parent=person_datastore_person_rel",
            "parent=person_supervisor_rel",
            "child=person_supervisor_rel",
            "child=login_person_rel",
            "parent=person_system_rel",
            "parent=person_ticket_activity_rel",
            "parent=person_ticket_assignee_rel",
            "parent=person_ticket_assigned_by_rel",
            "parent=person_ticket_activity_rel",
            "parent=person_ticket_attachment_rel",
            "parent=person_ticket_subscriber_rel",
            "parent=person_ticket_type_agent_rel"
          ],
          "fqdn": "datahub.person"
        },
        "profile": {
          "name": {
            "logical": "profile",
            "physical": "profile"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.profile.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Profile description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.profile.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Profile name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.profile.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.profile.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique profile ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.profile.seqid"
            }
          },
          "relationships": [
            "parent=profile_alias_rel",
            "parent=profile_ldap_map_rel",
            "parent=profile_user_profile_rel"
          ],
          "fqdn": "datahub.profile"
        },
        "query": {
          "name": {
            "logical": "query",
            "physical": "query"
          },
          "comment": "Associated datastore",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.query.archive_dt"
            },
            "code": {
              "name": {
                "physical": "code"
              },
              "comment": "Query code (SQL or other language)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.query.code"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Associated datastore",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.query.datastore_seqid"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Query description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.query.dsc"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.query.fuzzy_search"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "The user or service that last modified the query",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.query.last_modified_by"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last query modification date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.query.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.query.meta"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Query name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.query.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.query.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.query.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique query ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.query.seqid"
            }
          },
          "relationships": [
            "child=datastore_query_rel",
            "parent=query_tag_assc_rel",
            "parent=query_ticket_data_item_rel",
            "parent=query_ticket_pin_rel"
          ],
          "fqdn": "datahub.query"
        },
        "remaining_working_days": {
          "name": {
            "logical": "remaining_working_days",
            "physical": "remaining_working_days"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "count": {
              "name": {
                "physical": "count"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.remaining_working_days.count"
            }
          },
          "relationships": [],
          "fqdn": "datahub.remaining_working_days"
        },
        "right_assign": {
          "name": {
            "logical": "right_assign",
            "physical": "right_assign"
          },
          "comment": "Assign rights to a user, group, or role.",
          "type": "TABLE",
          "items": {
            "force": {
              "name": {
                "physical": "force"
              },
              "comment": "Force allow/deny (a/d) the right",
              "type": "bpchar",
              "udt_type": "bpchar",
              "identity": false,
              "default": "'_'::bpchar",
              "nullable": false,
              "fqdn": "datahub.right_assign.force"
            },
            "group_seqid": {
              "name": {
                "physical": "group_seqid"
              },
              "comment": "Associated user group ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.right_assign.group_seqid"
            },
            "login_seqid": {
              "name": {
                "physical": "login_seqid"
              },
              "comment": "Associated login ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.right_assign.login_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.right_assign.record_create_dt"
            },
            "right_seqid": {
              "name": {
                "physical": "right_seqid"
              },
              "comment": "Associated right ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.right_assign.right_seqid"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.right_assign.seqid"
            },
            "user_role_seqid": {
              "name": {
                "physical": "user_role_seqid"
              },
              "comment": "Associated role ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.right_assign.user_role_seqid"
            }
          },
          "relationships": [
            "child=system_resource_right_right_assign_rel",
            "child=user_group_right_assign_rel",
            "child=user_role_right_assign_rel",
            "child=login_right_assign_rel"
          ],
          "fqdn": "datahub.right_assign"
        },
        "status": {
          "name": {
            "logical": "status",
            "physical": "status"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.status.archive_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "cd": {
              "name": {
                "physical": "cd"
              },
              "comment": "Code identifying the status of the system.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'U'::text",
              "nullable": false,
              "fqdn": "datahub.status.cd",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "label": {
              "name": {
                "physical": "label"
              },
              "comment": "A label/title for the status",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.status.label",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "The status message",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.status.msg",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.status.record_create_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique status ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.status.seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "system_seqid": {
              "name": {
                "physical": "system_seqid"
              },
              "comment": "Associated system ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.status.system_seqid",
              "example": "rbyxuKCBndydfH_b7ci52",
              "metadata": {
                "most_common_value": "rbyxuKCBndydfH_b7ci52",
                "null_percentage": 0
              }
            }
          },
          "relationships": [
            "child=system_status_rel",
            "child=status_cd_status_rel"
          ],
          "fqdn": "datahub.status"
        },
        "status_cd": {
          "name": {
            "logical": "status_cd",
            "physical": "status_cd"
          },
          "comment": "Represents a status code",
          "type": "TABLE",
          "items": {
            "cd": {
              "name": {
                "physical": "cd"
              },
              "comment": "Unique status code",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.status_cd.cd"
            },
            "color": {
              "name": {
                "physical": "color"
              },
              "comment": "A color code (hex) or named color",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'default'::text",
              "nullable": false,
              "fqdn": "datahub.status_cd.color"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Status code description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.status_cd.dsc"
            },
            "label": {
              "name": {
                "physical": "label"
              },
              "comment": "Status code label",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.status_cd.label"
            },
            "problem": {
              "name": {
                "physical": "problem"
              },
              "comment": "Indicates a problem exists",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.status_cd.problem"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Protected from deletion",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "true",
              "nullable": false,
              "fqdn": "datahub.status_cd.protected"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.status_cd.record_create_dt"
            },
            "warning": {
              "name": {
                "physical": "warning"
              },
              "comment": "Indicates the status is a warning",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.status_cd.warning"
            }
          },
          "relationships": [
            "parent=status_cd_status_rel"
          ],
          "fqdn": "datahub.status_cd"
        },
        "system": {
          "name": {
            "logical": "system",
            "physical": "system"
          },
          "comment": "Represents an external system tracked by the Datahub.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.archive_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 15.999999642372131
              }
            },
            "cmd": {
              "name": {
                "physical": "cmd"
              },
              "comment": "A command to execute in accordance to the cron schedule.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.cmd",
              "example": "echo test",
              "metadata": {
                "most_common_value": "echo test",
                "null_percentage": 0
              }
            },
            "cron_sched": {
              "name": {
                "physical": "cron_sched"
              },
              "comment": "An optional cron schedule to trigger a system command",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.cron_sched",
              "example": "20 13 * * *",
              "metadata": {
                "most_common_value": "20 13 * * *",
                "null_percentage": 0
              }
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "System description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.dsc",
              "metadata": {
                "most_common_value": "",
                "null_percentage": 0
              }
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "Indicates the system is explicitly disabled",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "true",
              "nullable": true,
              "fqdn": "datahub.system.enabled",
              "example": "t",
              "metadata": {
                "most_common_value": "t",
                "null_percentage": 0
              }
            },
            "expire_dt": {
              "name": {
                "physical": "expire_dt"
              },
              "comment": "Date when system is automatically disabled",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.expire_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "Fuzzy search of row aggregate descriptive text",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.fuzzy_search",
              "example": "2 2 echo 2",
              "metadata": {
                "most_common_value": "2 2 echo 2",
                "null_percentage": 0
              }
            },
            "manual": {
              "name": {
                "physical": "manual"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": true,
              "fqdn": "datahub.system.manual",
              "example": "f",
              "metadata": {
                "most_common_value": "f",
                "null_percentage": 0
              }
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "System name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.nm",
              "example": "2",
              "metadata": {
                "most_common_value": "2",
                "null_percentage": 0
              }
            },
            "person_seqid": {
              "name": {
                "physical": "person_seqid"
              },
              "comment": "Associated contact/owner",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.system.person_seqid",
              "example": "9Ckw004o5BdT2qKS3Bg_E",
              "metadata": {
                "most_common_value": "9Ckw004o5BdT2qKS3Bg_E",
                "null_percentage": 0
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.system.record_create_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system.search",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique system ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.system.seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            }
          },
          "relationships": [
            "parent=system_status_rel",
            "child=person_system_rel"
          ],
          "fqdn": "datahub.system"
        },
        "system_event_list": {
          "name": {
            "logical": "system_event_list",
            "physical": "system_event_list"
          },
          "comment": "Represents the system events which can trigger webhooks.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_event_list.archive_dt",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            },
            "ctg": {
              "name": {
                "physical": "ctg"
              },
              "comment": "Associated system event category",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'Other'::text",
              "nullable": false,
              "fqdn": "datahub.system_event_list.ctg",
              "example": "Support",
              "metadata": {
                "most_common_value": "Support",
                "null_percentage": 0
              }
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "System event description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_event_list.dsc",
              "example": "Triggered when a ticket type agent is deleted.",
              "metadata": {
                "most_common_value": "Triggered when a ticket type agent is deleted.",
                "null_percentage": 0
              }
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "Indicates the system event is enabled",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_event_list.enabled",
              "example": "t",
              "metadata": {
                "most_common_value": "t",
                "null_percentage": 0
              }
            },
            "event_id": {
              "name": {
                "physical": "event_id"
              },
              "comment": "Unique system event ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_event_list.event_id",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Pretty system event name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_event_list.nm",
              "example": "Delete Webhook",
              "metadata": {
                "most_common_value": "Delete Webhook",
                "null_percentage": 0
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.system_event_list.record_create_dt",
              "example": "2023-04-18 04:18:50.029162+00",
              "metadata": {
                "most_common_value": "2023-04-18 04:18:50.029162+00",
                "null_percentage": 0
              }
            }
          },
          "relationships": [
            "parent=system_event_list_active_webhook_rel"
          ],
          "fqdn": "datahub.system_event_list"
        },
        "system_event_log": {
          "name": {
            "logical": "system_event_log",
            "physical": "system_event_log"
          },
          "comment": "Represents a system event",
          "type": "TABLE",
          "items": {
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Event name/stub",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_event_log.nm",
              "example": "DATA_CATALOG_DATAITEM_DELETE",
              "metadata": {
                "most_common_value": "DATA_CATALOG_DATAITEM_DELETE",
                "null_percentage": 0
              }
            },
            "payload": {
              "name": {
                "physical": "payload"
              },
              "comment": "Optional payload sent to integrated systems (webhooks)",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_event_log.payload",
              "example": "{\"id\": \"rbyxuKCBndydfH_b7ci52\", \"href\": \"http://localhost:8000/system/rbyxuKCBndydfH_b7ci52\", \"name\": \"Modified PostgreSQL Metadata Extractor\", \"admin\": {\"id\": \"9Ckw004o5BdT2qKS3Bg_E\", \"email\": null, \"phone\": null, \"title\": null, \"display\": \"admin\", \"enabled\": null, \"lastname\": null, \"login_id\": \"ADMIN\", \"metadata\": null, \"username\": \"admin\", \"firstname\": null, \"image_href\": null}, \"manual\": false, \"status\": {\"code\": \"P\", \"href\": \"http://localhost:8000/system/status/code/P\", \"color\": \"#e67e22\", \"label\": \"Problem\", \"problem\": true, \"warning\": \"Review the process log for details.\", \"color_rgb\": [230, 126, 34], \"protected\": \"true\", \"create_date\": \"2023-04-18T04:18:49.255Z\", \"description\": \"Problem detected.\"}, \"command\": \"echo test\", \"enabled\": true, \"schedule\": \"0 0 * * *\", \"create_date\": \"2023-05-04T21:54:24.941Z\", \"description\": \"Extracts metadata from the database \u0026 synchronizes it with the Datahub.\", \"WEBHOOK_EVENT\": \"STATUS_UPDATE\"}",
              "metadata": {
                "most_common_value": "{\"id\": \"rbyxuKCBndydfH_b7ci52\", \"href\": \"http://localhost:8000/system/rbyxuKCBndydfH_b7ci52\", \"name\": \"Modified PostgreSQL Metadata Extractor\", \"admin\": {\"id\": \"9Ckw004o5BdT2qKS3Bg_E\", \"email\": null, \"phone\": null, \"title\": null, \"display\": \"admin\", \"enabled\": null, \"lastname\": null, \"login_id\": \"ADMIN\", \"metadata\": null, \"username\": \"admin\", \"firstname\": null, \"image_href\": null}, \"manual\": false, \"status\": {\"code\": \"P\", \"href\": \"http://localhost:8000/system/status/code/P\", \"color\": \"#e67e22\", \"label\": \"Problem\", \"problem\": true, \"warning\": \"Review the process log for details.\", \"color_rgb\": [230, 126, 34], \"protected\": \"true\", \"create_date\": \"2023-04-18T04:18:49.255Z\", \"description\": \"Problem detected.\"}, \"command\": \"echo test\", \"enabled\": true, \"schedule\": \"0 0 * * *\", \"create_date\": \"2023-05-04T21:54:24.941Z\", \"description\": \"Extracts metadata from the database \u0026 synchronizes it with the Datahub.\", \"WEBHOOK_EVENT\": \"STATUS_UPDATE\"}",
                "null_percentage": 0
              },
              "key": {
                "name": "system_event_log_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the system_event_log item."
              }
            },
            "payload::attributes": {
              "name": {
                "physical": "payload::attributes"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.attributes",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::cn": {
              "name": {
                "physical": "payload::cn"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.cn",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::create_date": {
              "name": {
                "physical": "payload::create_date"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.create_date",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::datasource_id": {
              "name": {
                "physical": "payload::datasource_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.datasource_id",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::datastore_seqid": {
              "name": {
                "physical": "payload::datastore_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.datastore_seqid",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::description": {
              "name": {
                "physical": "payload::description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.description",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::dsc": {
              "name": {
                "physical": "payload::dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.dsc",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::est_record_ct": {
              "name": {
                "physical": "payload::est_record_ct"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.est_record_ct",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::est_sz": {
              "name": {
                "physical": "payload::est_sz"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.est_sz",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::estimated_record_count": {
              "name": {
                "physical": "payload::estimated_record_count"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.estimated_record_count",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::estimated_size": {
              "name": {
                "physical": "payload::estimated_size"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.estimated_size",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::href": {
              "name": {
                "physical": "payload::href"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.href",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::id": {
              "name": {
                "physical": "payload::id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.id",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::items": {
              "name": {
                "physical": "payload::items"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.items",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::last_modified_by": {
              "name": {
                "physical": "payload::last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.last_modified_by",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::last_update_date": {
              "name": {
                "physical": "payload::last_update_date"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.last_update_date",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::message": {
              "name": {
                "physical": "payload::message"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.message",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::meta": {
              "name": {
                "physical": "payload::meta"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.meta",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::metadata": {
              "name": {
                "physical": "payload::metadata"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.metadata",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::msg": {
              "name": {
                "physical": "payload::msg"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.msg",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::name.logical": {
              "name": {
                "physical": "payload::name.logical"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.name.logical",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::name.physical": {
              "name": {
                "physical": "payload::name.physical"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.name.physical",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::nm": {
              "name": {
                "physical": "payload::nm"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.nm",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::ordinality": {
              "name": {
                "physical": "payload::ordinality"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.ordinality",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::schema": {
              "name": {
                "physical": "payload::schema"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.schema",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::schema_nm": {
              "name": {
                "physical": "payload::schema_nm"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.schema_nm",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::tags": {
              "name": {
                "physical": "payload::tags"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.tags",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::title": {
              "name": {
                "physical": "payload::title"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.title",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::update_sched": {
              "name": {
                "physical": "payload::update_sched"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.update_sched",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::update_schedule": {
              "name": {
                "physical": "payload::update_schedule"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.update_schedule",
              "metadata": {
                "source": "payload"
              }
            },
            "payload::webhook_event": {
              "name": {
                "physical": "payload::WEBHOOK_EVENT"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_event_log.WEBHOOK_EVENT",
              "metadata": {
                "source": "payload"
              }
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.system_event_log.record_create_dt",
              "example": "2023-09-18 04:24:05.814522+00",
              "metadata": {
                "most_common_value": "2023-09-18 04:24:05.814522+00",
                "null_percentage": 0
              }
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique event ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.system_event_log.seqid",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 0
              }
            },
            "webhook": {
              "name": {
                "physical": "webhook"
              },
              "comment": "An array of webhook configurations used to notify remote systems of change events",
              "type": "_jsonb",
              "udt_type": "_jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_event_log.webhook",
              "metadata": {
                "most_common_value": "NULL",
                "null_percentage": 100
              }
            }
          },
          "relationships": [],
          "fqdn": "datahub.system_event_log"
        },
        "system_resource": {
          "name": {
            "logical": "system_resource",
            "physical": "system_resource"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "System Resource Description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_resource.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "System Resource Name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_resource.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.system_resource.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.system_resource.seqid"
            }
          },
          "relationships": [
            "parent=system_resource_system_resource_right_rel"
          ],
          "fqdn": "datahub.system_resource"
        },
        "system_resource_right": {
          "name": {
            "logical": "system_resource_right",
            "physical": "system_resource_right"
          },
          "comment": "Represents the permission options/rights associated with a system resource.",
          "type": "TABLE",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Description of the right/permission",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_resource_right.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Descriptive name/stub of the right/permission",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_resource_right.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.system_resource_right.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.system_resource_right.seqid"
            },
            "system_resource_seqid": {
              "name": {
                "physical": "system_resource_seqid"
              },
              "comment": "Associated system resource ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_resource_right.system_resource_seqid"
            }
          },
          "relationships": [
            "parent=system_resource_right_right_assign_rel",
            "child=system_resource_system_resource_right_rel"
          ],
          "fqdn": "datahub.system_resource_right"
        },
        "system_setting": {
          "name": {
            "logical": "system_setting",
            "physical": "system_setting"
          },
          "comment": "Represents system settings.",
          "type": "TABLE",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Description of the setting",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_setting.dsc"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Setting complex value",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_setting.meta",
              "key": {
                "name": "system_setting_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the system_setting item."
              }
            },
            "meta::settings": {
              "name": {
                "physical": "meta::settings"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.system_setting.settings",
              "metadata": {
                "source": "meta"
              }
            },
            "namespace": {
              "name": {
                "physical": "namespace"
              },
              "comment": "A namespace (category) to group settings by",
              "type": "_text",
              "udt_type": "_text",
              "identity": false,
              "default": "'{Global}'::text[]",
              "nullable": false,
              "fqdn": "datahub.system_setting.namespace"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Setting display name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_setting.nm"
            },
            "permission": {
              "name": {
                "physical": "permission"
              },
              "comment": "Setting permissions. R = Read, W = Write, D = Delete",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'RWD'::text",
              "nullable": false,
              "fqdn": "datahub.system_setting.permission"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "Setting stub",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.system_setting.stub"
            },
            "value": {
              "name": {
                "physical": "value"
              },
              "comment": "Setting simple value",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.system_setting.value"
            }
          },
          "relationships": [],
          "fqdn": "datahub.system_setting"
        },
        "tag": {
          "name": {
            "logical": "tag",
            "physical": "tag"
          },
          "comment": "Represents a tag",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag.archive_dt"
            },
            "color": {
              "name": {
                "physical": "color"
              },
              "comment": "Color code (usually hex code)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag.color"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Tag description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Tag name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.tag.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.tag.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique tag ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.tag.seqid"
            }
          },
          "relationships": [
            "parent=tag_tag_assc_rel"
          ],
          "fqdn": "datahub.tag"
        },
        "tag_assc": {
          "name": {
            "logical": "tag_assc",
            "physical": "tag_assc"
          },
          "comment": "Associate a tag with an item",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag_assc.archive_dt"
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Associated data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag_assc.datafield_seqid"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Associated data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag_assc.datastore_seqid"
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Associated data table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag_assc.datatable_seqid"
            },
            "query_seqid": {
              "name": {
                "physical": "query_seqid"
              },
              "comment": "Associated query ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.tag_assc.query_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.tag_assc.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique association ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.tag_assc.seqid"
            },
            "tag_seqid": {
              "name": {
                "physical": "tag_seqid"
              },
              "comment": "Unique tag ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.tag_assc.tag_seqid"
            }
          },
          "relationships": [
            "child=tag_tag_assc_rel",
            "child=datastore_tag_assc_rel",
            "child=datatable_tag_assc_rel",
            "child=datafield_tag_assc_rel",
            "child=query_tag_assc_rel"
          ],
          "fqdn": "datahub.tag_assc"
        },
        "ticket": {
          "name": {
            "logical": "ticket",
            "physical": "ticket"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.archive_dt"
            },
            "assigned_by_seqid": {
              "name": {
                "physical": "assigned_by_seqid"
              },
              "comment": "Associated assignor ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ticket.assigned_by_seqid"
            },
            "assignee_seqid": {
              "name": {
                "physical": "assignee_seqid"
              },
              "comment": "Associated assignee ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.assignee_seqid"
            },
            "creator_seqid": {
              "name": {
                "physical": "creator_seqid"
              },
              "comment": "Associated author ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket.creator_seqid"
            },
            "draft": {
              "name": {
                "physical": "draft"
              },
              "comment": "Inidcates the ticket is a draft that has not been submitted yet.",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.ticket.draft"
            },
            "due_dt": {
              "name": {
                "physical": "due_dt"
              },
              "comment": "Optional ticket resolution due date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.due_dt"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.last_modified_by"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last update date/time.",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.meta"
            },
            "priority_seqid": {
              "name": {
                "physical": "priority_seqid"
              },
              "comment": "Associated priority",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'UNPRIORITIZED'::text",
              "nullable": false,
              "fqdn": "datahub.ticket.priority_seqid"
            },
            "public": {
              "name": {
                "physical": "public"
              },
              "comment": "Indicates the ticket is viewable by any datahub user",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.ticket.public"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket.record_create_dt"
            },
            "resolution_dt": {
              "name": {
                "physical": "resolution_dt"
              },
              "comment": "Ticket resolution date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.resolution_dt"
            },
            "resolution_ticket_activity_seqid": {
              "name": {
                "physical": "resolution_ticket_activity_seqid"
              },
              "comment": "Associated ticket activity containing resolution (ID)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ticket.resolution_ticket_activity_seqid"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket.seqid"
            },
            "summary": {
              "name": {
                "physical": "summary"
              },
              "comment": "Ticket name/label/title",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket.summary"
            },
            "ticket_sla_seqid": {
              "name": {
                "physical": "ticket_sla_seqid"
              },
              "comment": "Associated ticket service level agreement ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'NONE'::text",
              "nullable": false,
              "fqdn": "datahub.ticket.ticket_sla_seqid"
            },
            "ticket_status_seqid": {
              "name": {
                "physical": "ticket_status_seqid"
              },
              "comment": "Associated ticket status ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'UNASSIGNED'::text",
              "nullable": false,
              "fqdn": "datahub.ticket.ticket_status_seqid"
            },
            "ticket_type_seqid": {
              "name": {
                "physical": "ticket_type_seqid"
              },
              "comment": "Associated ticket type",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'UNKNOWN'::text",
              "nullable": false,
              "fqdn": "datahub.ticket.ticket_type_seqid"
            },
            "time_actual_min": {
              "name": {
                "physical": "time_actual_min"
              },
              "comment": "Actual resolution effort in minutes",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.time_actual_min"
            },
            "time_estimate_min": {
              "name": {
                "physical": "time_estimate_min"
              },
              "comment": "Estimated resolution effort in minutes",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket.time_estimate_min"
            }
          },
          "relationships": [
            "child=person_ticket_activity_rel",
            "child=person_ticket_assignee_rel",
            "child=person_ticket_assigned_by_rel",
            "child=ticket_activity_ticket_resolution_rel",
            "child=ticket_status_ticket_rel",
            "child=ticket_sla_ticket_rel",
            "child=ticket_type_ticket_rel",
            "child=ticket_priority_ticket_rel",
            "parent=ticket_ticket_activity_rel",
            "parent=ticket_ticket_data_item_rel",
            "parent=ticket_ticket_label_assc_rel",
            "parent=ticket_ticket_subscriber_rel"
          ],
          "fqdn": "datahub.ticket"
        },
        "ticket_activity": {
          "name": {
            "logical": "ticket_activity",
            "physical": "ticket_activity"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_activity.archive_dt"
            },
            "common_id": {
              "name": {
                "physical": "common_id"
              },
              "comment": "A display ID that is unique when combined with the ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.common_id"
            },
            "creator_seqid": {
              "name": {
                "physical": "creator_seqid"
              },
              "comment": "Associated creator/author ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.creator_seqid"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last modification date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_activity.meta"
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "Activity message/comment",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.msg"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.record_create_dt"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "Full text search vectors of the row aggregate",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_activity.search"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ticket activity ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.seqid"
            },
            "ticket_seqid": {
              "name": {
                "physical": "ticket_seqid"
              },
              "comment": "Associated ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_activity.ticket_seqid"
            }
          },
          "relationships": [
            "parent=ticket_activity_ticket_resolution_rel",
            "child=ticket_ticket_activity_rel",
            "child=person_ticket_activity_rel",
            "parent=ticket_activity_ticket_attachment_rel",
            "parent=ticket_activity_ticket_pin_rel"
          ],
          "fqdn": "datahub.ticket_activity"
        },
        "ticket_attachment": {
          "name": {
            "logical": "ticket_attachment",
            "physical": "ticket_attachment"
          },
          "comment": "Represents an attachment associated with a ticket.",
          "type": "TABLE",
          "items": {
            "creator_seqid": {
              "name": {
                "physical": "creator_seqid"
              },
              "comment": "Associated person who uploaded attachment",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_attachment.creator_seqid"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Attachment description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_attachment.dsc"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "Last modification date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_attachment.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Attachment metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_attachment.meta"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Pretty file name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_attachment.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_attachment.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique attachment ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_attachment.seqid"
            },
            "ticket_activity_seqid": {
              "name": {
                "physical": "ticket_activity_seqid"
              },
              "comment": "Associated ticket activity (message/comment)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_attachment.ticket_activity_seqid"
            },
            "uri": {
              "name": {
                "physical": "uri"
              },
              "comment": "Location of the attachment. This can be a file path or a URL.",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_attachment.uri"
            }
          },
          "relationships": [
            "child=ticket_activity_ticket_attachment_rel",
            "child=person_ticket_attachment_rel"
          ],
          "fqdn": "datahub.ticket_attachment"
        },
        "ticket_data_item": {
          "name": {
            "logical": "ticket_data_item",
            "physical": "ticket_data_item"
          },
          "comment": "Represents a relationship between a ticket and a datastore, dataset, or data attribute",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_data_item.archive_dt"
            },
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Associated datafield ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_data_item.datafield_seqid"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Associated datastore ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_data_item.datastore_seqid"
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Associated datatable ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_data_item.datatable_seqid"
            },
            "query_seqid": {
              "name": {
                "physical": "query_seqid"
              },
              "comment": "Associted query ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_data_item.query_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_data_item.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_data_item.seqid"
            },
            "ticket_seqid": {
              "name": {
                "physical": "ticket_seqid"
              },
              "comment": "Unique ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_data_item.ticket_seqid"
            }
          },
          "relationships": [
            "child=ticket_ticket_data_item_rel",
            "child=datastore_ticket_data_item_rel",
            "child=datatable_ticket_data_item_rel",
            "child=datafield_ticket_data_item_rel",
            "child=query_ticket_data_item_rel"
          ],
          "fqdn": "datahub.ticket_data_item"
        },
        "ticket_label": {
          "name": {
            "logical": "ticket_label",
            "physical": "ticket_label"
          },
          "comment": "Represents a ticket label",
          "type": "TABLE",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Label description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_label.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Unique label name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_label.nm"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_label.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ticket label ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.ticket_label.seqid"
            }
          },
          "relationships": [
            "parent=ticket_label_ticket_label_assc_rel"
          ],
          "fqdn": "datahub.ticket_label"
        },
        "ticket_label_assc": {
          "name": {
            "logical": "ticket_label_assc",
            "physical": "ticket_label_assc"
          },
          "comment": "Associate labels with tickets",
          "type": "TABLE",
          "items": {
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record create date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_label_assc.record_create_dt"
            },
            "ticket_label_seqid": {
              "name": {
                "physical": "ticket_label_seqid"
              },
              "comment": "Associated ticket label ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_label_assc.ticket_label_seqid"
            },
            "ticket_seqid": {
              "name": {
                "physical": "ticket_seqid"
              },
              "comment": "Associated ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_label_assc.ticket_seqid"
            }
          },
          "relationships": [
            "child=ticket_label_ticket_label_assc_rel",
            "child=ticket_ticket_label_assc_rel"
          ],
          "fqdn": "datahub.ticket_label_assc"
        },
        "ticket_pin": {
          "name": {
            "logical": "ticket_pin",
            "physical": "ticket_pin"
          },
          "comment": "Represents the association of a ticket message with a data element. \"Pinning\" a message to a data element makes it available in the UI.",
          "type": "TABLE",
          "items": {
            "datafield_seqid": {
              "name": {
                "physical": "datafield_seqid"
              },
              "comment": "Associated data field ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ticket_pin.datafield_seqid"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "Associated data store ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ticket_pin.datastore_seqid"
            },
            "datatable_seqid": {
              "name": {
                "physical": "datatable_seqid"
              },
              "comment": "Associated data table ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ticket_pin.datatable_seqid"
            },
            "query_seqid": {
              "name": {
                "physical": "query_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": true,
              "fqdn": "datahub.ticket_pin.query_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_pin.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique pin ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.ticket_pin.seqid"
            },
            "ticket_activity_seqid": {
              "name": {
                "physical": "ticket_activity_seqid"
              },
              "comment": "Associated ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_pin.ticket_activity_seqid"
            }
          },
          "relationships": [
            "child=ticket_activity_ticket_pin_rel",
            "child=datastore_ticket_pin_rel",
            "child=datatable_ticket_pin_rel",
            "child=datafield_ticket_pin_rel",
            "child=query_ticket_pin_rel"
          ],
          "fqdn": "datahub.ticket_pin"
        },
        "ticket_priority": {
          "name": {
            "logical": "ticket_priority",
            "physical": "ticket_priority"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_priority.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Priority description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_priority.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Priority name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_priority.nm"
            },
            "ordinal": {
              "name": {
                "physical": "ordinal"
              },
              "comment": "Optional display order",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "0",
              "nullable": false,
              "fqdn": "datahub.ticket_priority.ordinal"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_priority.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid(30)",
              "nullable": false,
              "fqdn": "datahub.ticket_priority.seqid"
            }
          },
          "relationships": [
            "parent=ticket_priority_ticket_rel"
          ],
          "fqdn": "datahub.ticket_priority"
        },
        "ticket_sla": {
          "name": {
            "logical": "ticket_sla",
            "physical": "ticket_sla"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_sla.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Ticket description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_sla.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Ticket name/label/title",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_sla.nm"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Prevent changes",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.ticket_sla.protected"
            },
            "rank": {
              "name": {
                "physical": "rank"
              },
              "comment": "The numeric rank relative to other priorities (lower is higher priority)",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_sla.rank"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_sla.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ticket priority ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_sla.seqid"
            },
            "sla": {
              "name": {
                "physical": "sla"
              },
              "comment": "Service Level Agreement - number of days to resolution",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_sla.sla"
            }
          },
          "relationships": [
            "parent=ticket_sla_ticket_rel",
            "parent=ticket_sla_ticket_type_rel"
          ],
          "fqdn": "datahub.ticket_sla"
        },
        "ticket_status": {
          "name": {
            "logical": "ticket_status",
            "physical": "ticket_status"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_status.archive_dt"
            },
            "closed": {
              "name": {
                "physical": "closed"
              },
              "comment": "The type indicates the issue is closed",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.ticket_status.closed"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Ticket description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_status.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Ticket name/label/title",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_status.nm"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Prevent changes",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.ticket_status.protected"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_status.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ticket status ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_status.seqid"
            }
          },
          "relationships": [
            "parent=ticket_status_ticket_rel"
          ],
          "fqdn": "datahub.ticket_status"
        },
        "ticket_subscriber": {
          "name": {
            "logical": "ticket_subscriber",
            "physical": "ticket_subscriber"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "person_seqid": {
              "name": {
                "physical": "person_seqid"
              },
              "comment": "Associated subscriber (person) ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_subscriber.person_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_subscriber.record_create_dt"
            },
            "ticket_seqid": {
              "name": {
                "physical": "ticket_seqid"
              },
              "comment": "Associated ticket ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_subscriber.ticket_seqid"
            }
          },
          "relationships": [
            "child=ticket_ticket_subscriber_rel",
            "child=person_ticket_subscriber_rel"
          ],
          "fqdn": "datahub.ticket_subscriber"
        },
        "ticket_type": {
          "name": {
            "logical": "ticket_type",
            "physical": "ticket_type"
          },
          "comment": "",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_type.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Ticket type description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_type.dsc"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Ticket type name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_type.nm"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Prevent changes",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.ticket_type.protected"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_type.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ticket type ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.ticket_type.seqid"
            },
            "sla_seqid": {
              "name": {
                "physical": "sla_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'NONE'::text",
              "nullable": true,
              "fqdn": "datahub.ticket_type.sla_seqid"
            },
            "tpl": {
              "name": {
                "physical": "tpl"
              },
              "comment": "A ticket template (markdown format)",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_type.tpl"
            }
          },
          "relationships": [
            "parent=ticket_type_ticket_rel",
            "child=ticket_sla_ticket_type_rel",
            "parent=ticket_type_ticket_agent_rel"
          ],
          "fqdn": "datahub.ticket_type"
        },
        "ticket_type_agent": {
          "name": {
            "logical": "ticket_type_agent",
            "physical": "ticket_type_agent"
          },
          "comment": "Represents a person (agent) who manages specific ticket types",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_type_agent.archive_dt"
            },
            "filter": {
              "name": {
                "physical": "filter"
              },
              "comment": "One or more filtering rules used to determine which tickets an agent should be alerted of (or auto-assigned to)",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.ticket_type_agent.filter"
            },
            "person_seqid": {
              "name": {
                "physical": "person_seqid"
              },
              "comment": "Associated person (agent) ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_type_agent.person_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.ticket_type_agent.record_create_dt"
            },
            "ticket_type_seqid": {
              "name": {
                "physical": "ticket_type_seqid"
              },
              "comment": "Associated ticket type ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.ticket_type_agent.ticket_type_seqid"
            }
          },
          "relationships": [
            "child=ticket_type_ticket_agent_rel",
            "child=person_ticket_type_agent_rel"
          ],
          "fqdn": "datahub.ticket_type_agent"
        },
        "user_group": {
          "name": {
            "logical": "user_group",
            "physical": "user_group"
          },
          "comment": "Represents a group of users and/or subgroups.",
          "type": "TABLE",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Pretty group description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.user_group.dsc"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_group.meta"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Pretty group name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.user_group.nm"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Indicates the group cannot be removed (reserved).",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.user_group.protected"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.user_group.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique user group ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.user_group.seqid"
            }
          },
          "relationships": [
            "parent=user_group_user_group_member_rel",
            "parent=user_group_group_member_subgroup_rel",
            "parent=user_group_ldap_map_rel",
            "parent=user_group_right_assign_rel",
            "parent=user_group_user_profile_rel",
            "parent=user_group_user_role_assignment_rel"
          ],
          "fqdn": "datahub.user_group"
        },
        "user_profile": {
          "name": {
            "logical": "user_profile",
            "physical": "user_profile"
          },
          "comment": "Associate a profile with a role.",
          "type": "TABLE",
          "items": {
            "login_seqid": {
              "name": {
                "physical": "login_seqid"
              },
              "comment": "Associated login ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_profile.login_seqid"
            },
            "profile_seqid": {
              "name": {
                "physical": "profile_seqid"
              },
              "comment": "Associated profile ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.user_profile.profile_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.user_profile.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.user_profile.seqid"
            },
            "user_group_seqid": {
              "name": {
                "physical": "user_group_seqid"
              },
              "comment": "Associated user group ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_profile.user_group_seqid"
            },
            "user_role_seqid": {
              "name": {
                "physical": "user_role_seqid"
              },
              "comment": "Associated user role ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_profile.user_role_seqid"
            }
          },
          "relationships": [
            "child=profile_user_profile_rel",
            "child=user_role_user_profile_rel",
            "child=user_group_user_profile_rel",
            "child=loginuserprofilerelationship"
          ],
          "fqdn": "datahub.user_profile"
        },
        "user_role": {
          "name": {
            "logical": "user_role",
            "physical": "user_role"
          },
          "comment": "Represents a role and its association to system resources",
          "type": "TABLE",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Pretty role description",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.user_role.dsc"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_role.meta"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "Pretty role name",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.user_role.nm"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "Indicates the user role cannot be deleted (reserved).",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "false",
              "nullable": false,
              "fqdn": "datahub.user_role.protected"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.user_role.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique user role ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.user_role.seqid"
            }
          },
          "relationships": [
            "parent=user_role_ldap_map_rel",
            "parent=user_role_right_assign_rel",
            "parent=user_role_user_profile_rel",
            "parent=user_role_user_role_person_rel"
          ],
          "fqdn": "datahub.user_role"
        },
        "user_role_assignment": {
          "name": {
            "logical": "user_role_assignment",
            "physical": "user_role_assignment"
          },
          "comment": "Represents a user role assignment",
          "type": "TABLE",
          "items": {
            "login_seqid": {
              "name": {
                "physical": "login_seqid"
              },
              "comment": "Associated login ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_role_assignment.login_seqid"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.user_role_assignment.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique assignment ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.user_role_assignment.seqid"
            },
            "user_group_seqid": {
              "name": {
                "physical": "user_group_seqid"
              },
              "comment": "Associated user group ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_role_assignment.user_group_seqid"
            },
            "user_role_seqid": {
              "name": {
                "physical": "user_role_seqid"
              },
              "comment": "Associated user role ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.user_role_assignment.user_role_seqid"
            }
          },
          "relationships": [
            "child=user_role_user_role_person_rel",
            "child=login_user_role_assignment_rel",
            "child=user_group_user_role_assignment_rel"
          ],
          "fqdn": "datahub.user_role_assignment"
        },
        "vw_archive": {
          "name": {
            "logical": "vw_archive",
            "physical": "vw_archive"
          },
          "comment": "Represents the ID's of all of the archived values which are older than the system-configured retention date.",
          "type": "VIEW",
          "items": {
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_archive.seqid"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_archive.type"
            }
          },
          "relationships": [],
          "view_source": "WITH cte(aged) AS (\n         SELECT ((((ss.meta -\u003e 'settings'::text) -\u003e 0) -\u003e 'value'::text))::integer AS int4\n           FROM datahub.system_setting ss\n          WHERE (ss.stub = 'system.catalog.cleanup'::text)\n        )\n SELECT 'datastore'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.datastore d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'datatable'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.datatable d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'datafield'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.datafield d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'query'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.query d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'custom_attribute_value'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.custom_attribute_value d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'tag_assc'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.tag_assc d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'tag'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.tag d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'alias'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.alias d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'compliance_type'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.compliance_type d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'profile'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.profile d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'webhook'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.webhook d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'system_event_list'::text AS type,\n    x.seqid\n   FROM ( SELECT d.event_id AS seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.system_event_list d\n          GROUP BY d.event_id\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'system'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.system d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'status'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.status d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'person'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.person d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'login'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.login d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'ticket'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.ticket d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'ticket_activity'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.ticket_activity d\n          GROUP BY d.seqid\n         HAVING ((d.archive_dt IS NOT NULL) OR (NOT (d.ticket_seqid IN ( SELECT t.seqid\n                   FROM datahub.ticket t))))) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'ticket_status'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.ticket_status d\n          GROUP BY d.seqid\n         HAVING ((d.archive_dt IS NOT NULL) AND (d.protected = false))) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'ticket_sla'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.ticket_sla d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'ticket_type'::text AS type,\n    x.seqid\n   FROM ( SELECT d.seqid,\n            EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(d.archive_dt))) AS aged\n           FROM datahub.ticket_type d\n          GROUP BY d.seqid\n         HAVING (d.archive_dt IS NOT NULL)) x\n  WHERE (x.aged \u003e (( SELECT cte.aged\n           FROM cte))::numeric)\nUNION\n SELECT 'ticket_pin'::text AS type,\n    d.seqid\n   FROM datahub.ticket_pin d\n  WHERE (NOT (d.ticket_activity_seqid IN ( SELECT t.seqid\n           FROM datahub.ticket_activity t)));",
          "fqdn": "datahub.vw_archive"
        },
        "vw_catalog_semantics": {
          "name": {
            "logical": "vw_catalog_semantics",
            "physical": "vw_catalog_semantics"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "items": {
              "name": {
                "physical": "items"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.items"
            },
            "set_aliases": {
              "name": {
                "physical": "set_aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.set_aliases"
            },
            "set_description": {
              "name": {
                "physical": "set_description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.set_description"
            },
            "set_id": {
              "name": {
                "physical": "set_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.set_id"
            },
            "set_name": {
              "name": {
                "physical": "set_name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.set_name"
            },
            "set_ordinal": {
              "name": {
                "physical": "set_ordinal"
              },
              "comment": "",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.set_ordinal"
            },
            "set_physical_name": {
              "name": {
                "physical": "set_physical_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.set_physical_name"
            },
            "source_aliases": {
              "name": {
                "physical": "source_aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.source_aliases"
            },
            "source_description": {
              "name": {
                "physical": "source_description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.source_description"
            },
            "source_id": {
              "name": {
                "physical": "source_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.source_id"
            },
            "source_name": {
              "name": {
                "physical": "source_name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.source_name"
            },
            "source_physical_name": {
              "name": {
                "physical": "source_physical_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_catalog_semantics.source_physical_name"
            }
          },
          "relationships": [],
          "view_source": "SELECT e.source_id,\n    vdds.name AS source_name,\n    e.source_nm AS source_physical_name,\n    vdds.description AS source_description,\n    vdds.aliases AS source_aliases,\n    e.set_id,\n    e.set_ordinal,\n    e.set_nm AS set_physical_name,\n    vds.name AS set_name,\n    vds.description AS set_description,\n    vds.aliases AS set_aliases,\n    ( SELECT jsonb_agg(jsonb_build_object('id', i.seqid, 'name', vdi.name, 'description', vdi.description, 'aliases', vdi.aliases, 'ordinal', i.ordinality)) AS jsonb_agg\n           FROM (datahub.datafield i\n             LEFT JOIN datahub.vw_data_item_ref vdi ON ((vdi.id = i.seqid)))\n          WHERE ((i.archive_dt IS NULL) AND (i.datatable_seqid = e.set_id))) AS items\n   FROM ((( SELECT ds.nm AS source_nm,\n            s.nm AS set_nm,\n            ds.seqid AS source_id,\n            s.seqid AS set_id,\n            s.ordinality AS set_ordinal\n           FROM (datahub.datastore ds\n             LEFT JOIN datahub.datatable s ON ((s.datastore_seqid = ds.seqid)))\n          WHERE ((ds.archive_dt IS NULL) AND (s.archive_dt IS NULL))\n          GROUP BY ds.nm, s.nm, ds.seqid, s.seqid, s.ordinality\n          ORDER BY ds.nm, s.nm) e\n     LEFT JOIN datahub.vw_data_source_ref vdds ON ((vdds.id = e.source_id)))\n     LEFT JOIN datahub.vw_data_set_ref vds ON ((vds.id = e.set_id)));",
          "fqdn": "datahub.vw_catalog_semantics"
        },
        "vw_custom_attributes": {
          "name": {
            "logical": "vw_custom_attributes",
            "physical": "vw_custom_attributes"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "dataitem_id": {
              "name": {
                "physical": "dataitem_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.dataitem_id"
            },
            "dataset_id": {
              "name": {
                "physical": "dataset_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.dataset_id"
            },
            "datasource_id": {
              "name": {
                "physical": "datasource_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.datasource_id"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.id"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.last_modified_by"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.name"
            },
            "value": {
              "name": {
                "physical": "value"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_custom_attributes.value"
            }
          },
          "relationships": [],
          "view_source": "SELECT ca.nm AS name,\n    COALESCE(cav.value, ca.default_value) AS value,\n    COALESCE(ca.dsc, ''::text) AS description,\n    ca.seqid AS id,\n    cav.datastore_seqid AS datasource_id,\n    cav.datatable_seqid AS dataset_id,\n    cav.datafield_seqid AS dataitem_id,\n    cav.last_modified_by\n   FROM (datahub.custom_attribute_value cav\n     LEFT JOIN datahub.custom_attribute ca ON ((ca.seqid = cav.custom_attribute_seqid)))\n  WHERE ((ca.archive_dt IS NULL) AND (cav.archive_dt IS NULL));",
          "fqdn": "datahub.vw_custom_attributes"
        },
        "vw_data_item": {
          "name": {
            "logical": "vw_data_item",
            "physical": "vw_data_item"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.aliases"
            },
            "attributes": {
              "name": {
                "physical": "attributes"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.attributes"
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.cn"
            },
            "dataset_id": {
              "name": {
                "physical": "dataset_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.dataset_id"
            },
            "datasource_id": {
              "name": {
                "physical": "datasource_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.datasource_id"
            },
            "default": {
              "name": {
                "physical": "default"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.default"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.dsc"
            },
            "example": {
              "name": {
                "physical": "example"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.example"
            },
            "is_array": {
              "name": {
                "physical": "is_array"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.is_array"
            },
            "key": {
              "name": {
                "physical": "key"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.key"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.last_modified_by"
            },
            "length": {
              "name": {
                "physical": "length"
              },
              "comment": "",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.length"
            },
            "lineage": {
              "name": {
                "physical": "lineage"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.lineage"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.meta"
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.msg"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.nm"
            },
            "nullable": {
              "name": {
                "physical": "nullable"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.nullable"
            },
            "ordinal": {
              "name": {
                "physical": "ordinal"
              },
              "comment": "",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.ordinal"
            },
            "policies": {
              "name": {
                "physical": "policies"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.policies"
            },
            "position_end": {
              "name": {
                "physical": "position_end"
              },
              "comment": "",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.position_end"
            },
            "position_start": {
              "name": {
                "physical": "position_start"
              },
              "comment": "",
              "type": "int2",
              "udt_type": "int2",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.position_start"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.record_create_dt"
            },
            "related": {
              "name": {
                "physical": "related"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.related"
            },
            "related_tickets": {
              "name": {
                "physical": "related_tickets"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.related_tickets"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.seqid"
            },
            "set": {
              "name": {
                "physical": "set"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.set"
            },
            "source": {
              "name": {
                "physical": "source"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.source"
            },
            "status": {
              "name": {
                "physical": "status"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.status"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.stub"
            },
            "tags": {
              "name": {
                "physical": "tags"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.tags"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.type"
            },
            "udt_type": {
              "name": {
                "physical": "udt_type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item.udt_type"
            }
          },
          "relationships": [],
          "view_source": "SELECT i.seqid,\n    t.datastore_seqid AS datasource_id,\n    i.datatable_seqid AS dataset_id,\n    ( SELECT row_to_json(sr.*) AS row_to_json\n           FROM datahub.vw_data_set_ref sr\n          WHERE (sr.id = i.datatable_seqid)) AS set,\n    ( SELECT row_to_json(dsr.*) AS row_to_json\n           FROM datahub.vw_data_source_ref dsr\n          WHERE (dsr.id = t.datastore_seqid)) AS source,\n    i.nm,\n    COALESCE(i.cn, i.nm) AS cn,\n    COALESCE(i.dsc, ''::text) AS dsc,\n        CASE\n            WHEN ((i.meta IS NOT NULL) OR (ref.metadata IS NOT NULL)) THEN (COALESCE(i.meta, '{}'::jsonb) || COALESCE(ref.metadata, '{}'::jsonb))\n            ELSE NULL::jsonb\n        END AS meta,\n    ref.type,\n    i.datatype AS udt_type,\n    i.position_start,\n    i.position_end,\n    i.length,\n    i.nullable,\n    i.default_val AS \"default\",\n    i.is_array,\n    ref.key,\n    ref.policies,\n    i.example,\n    i.status,\n    i.msg,\n    i.record_create_dt,\n    ref.aliases,\n    ref.tags,\n    ref.attributes,\n    ref.lineage,\n    jsonb_build_object('children', ( SELECT jsonb_agg(jsonb_build_object('id', cref.id, 'name', cref.name, 'stub', cref.stub, 'aliases', cref.aliases, 'relationship_id', crel.rel_seqid)) AS jsonb_agg\n           FROM (datahub.datafield_rel crel\n             LEFT JOIN datahub.vw_data_item_ref cref ON ((crel.child_datafield_seqid = cref.id)))\n          WHERE (crel.parent_datafield_seqid = i.seqid)), 'parents', ( SELECT jsonb_agg(jsonb_build_object('id', pref.id, 'name', pref.name, 'stub', pref.stub, 'aliases', pref.aliases, 'relationship_id', prel.rel_seqid)) AS jsonb_agg\n           FROM (datahub.datafield_rel prel\n             LEFT JOIN datahub.vw_data_item_ref pref ON ((prel.parent_datafield_seqid = pref.id)))\n          WHERE (prel.child_datafield_seqid = i.seqid))) AS related,\n    i.last_modified_by,\n    i.ordinality AS ordinal,\n    COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', x.seqid, 'summary', x.summary, 'public', x.public, 'create_date', x.record_create_dt, 'status', x.status, 'sla', x.sla, 'type', x.type, 'metadata', x.metadata, 'creator', x.creator, 'comments', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', ta1.seqid, 'common_id', (( SELECT string_to_array(ta1.common_id, '-'::text) AS string_to_array))[2], 'message', ta1.msg, 'metadata', ta1.meta, 'create_date', ta1.record_create_dt, 'creator', p2.data)) AS jsonb_agg\n                   FROM ((datahub.ticket_pin p\n                     LEFT JOIN datahub.ticket_activity ta1 ON ((p.ticket_activity_seqid = ta1.seqid)))\n                     LEFT JOIN datahub.vw_person p2 ON ((p2.id = ta1.creator_seqid)))\n                  WHERE ((ta1.ticket_seqid = x.seqid) AND (ta1.archive_dt IS NULL))), '[]'::jsonb))) AS jsonb_agg\n           FROM ( SELECT DISTINCT tk.seqid,\n                    tk.creator_seqid,\n                    tk.assignee_seqid,\n                    tk.assigned_by_seqid,\n                    tk.resolution_ticket_activity_seqid,\n                    tk.ticket_status_seqid,\n                    tk.ticket_sla_seqid,\n                    tk.ticket_type_seqid,\n                    tk.priority_seqid,\n                    tk.draft,\n                    tk.summary,\n                    tk.last_update_dt,\n                    tk.due_dt,\n                    tk.resolution_dt,\n                    tk.time_estimate_min,\n                    tk.time_actual_min,\n                    tk.public,\n                    tk.meta,\n                    tk.record_create_dt,\n                    tk.archive_dt,\n                    tk.search,\n                    jsonb_build_object('id', tstat.seqid, 'name', tstat.nm, 'description', COALESCE(tstat.dsc, ''::text), 'closed', tstat.closed) AS status,\n                    jsonb_build_object('id', sla.seqid, 'name', sla.nm, 'sla', sla.sla) AS sla,\n                    jsonb_build_object('id', ttype.seqid, 'name', ttype.nm, 'description', COALESCE(ttype.dsc, ''::text)) AS type,\n                    tk.meta AS metadata,\n                    tperson.data AS creator\n                   FROM ((((((datahub.ticket_pin tp\n                     LEFT JOIN datahub.ticket_activity ta ON ((ta.seqid = tp.ticket_activity_seqid)))\n                     LEFT JOIN datahub.ticket tk ON ((tk.seqid = ta.ticket_seqid)))\n                     LEFT JOIN datahub.ticket_status tstat ON ((tstat.seqid = tk.ticket_status_seqid)))\n                     LEFT JOIN datahub.ticket_sla sla ON ((sla.seqid = tk.ticket_sla_seqid)))\n                     LEFT JOIN datahub.ticket_type ttype ON ((ttype.seqid = tk.ticket_type_seqid)))\n                     LEFT JOIN datahub.vw_person tperson ON ((tperson.id = tk.creator_seqid)))\n                  WHERE (tp.datafield_seqid = i.seqid)) x), '[]'::jsonb) AS related_tickets,\n    ref.stub\n   FROM ((datahub.datafield i\n     LEFT JOIN datahub.datatable t ON ((i.datatable_seqid = t.seqid)))\n     LEFT JOIN datahub.vw_data_item_ref ref ON ((ref.id = i.seqid)))\n  WHERE ((i.archive_dt IS NULL) AND (t.archive_dt IS NULL));",
          "fqdn": "datahub.vw_data_item"
        },
        "vw_data_item_ref": {
          "name": {
            "logical": "vw_data_item_ref",
            "physical": "vw_data_item_ref"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.aliases"
            },
            "attributes": {
              "name": {
                "physical": "attributes"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.attributes"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.id"
            },
            "key": {
              "name": {
                "physical": "key"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.key"
            },
            "lineage": {
              "name": {
                "physical": "lineage"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.lineage"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.metadata"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.name"
            },
            "policies": {
              "name": {
                "physical": "policies"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.policies"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.stub"
            },
            "tags": {
              "name": {
                "physical": "tags"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.tags"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_item_ref.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT i.seqid AS id,\n    ((ref.stub || '.'::text) || COALESCE(i.nm, i.seqid)) AS stub,\n    jsonb_build_object('physical', i.nm, 'logical', COALESCE(i.cn, i.nm)) AS name,\n    COALESCE(i.dsc, ''::text) AS description,\n        CASE\n            WHEN (((lower(i.datatype) ~~ '%json%'::text) OR (lower(i.datatype) = 'undefined'::text)) AND (i.nm ~~ '%::%'::text)) THEN (jsonb_build_object('json_metadata', jsonb_build_object('parent', ( SELECT jsonb_build_object('id', d1.seqid, 'name', jsonb_build_object('physical', d1.nm, 'logical', COALESCE(d1.cn, d1.nm)), 'description', COALESCE(d1.dsc, ''::text)) AS jsonb_build_object\n               FROM datahub.datafield d1\n              WHERE ((d1.nm = split_part(i.nm, '::'::text, 1)) AND (d1.datatable_seqid = i.datatable_seqid) AND (i.seqid \u003c\u003e d1.seqid) AND (d1.archive_dt IS NULL))))) || COALESCE(i.meta, '{}'::jsonb))\n            WHEN (((lower(i.datatype) ~~ '%json%'::text) OR (lower(i.datatype) = 'undefined'::text)) AND (COALESCE(( SELECT d2.nm\n               FROM datahub.datafield d2\n              WHERE ((d2.nm ~~ (i.nm || '::%'::text)) AND (i.datatable_seqid = d2.datatable_seqid))\n             LIMIT 1)) IS NOT NULL)) THEN (jsonb_build_object('json_metadata', jsonb_build_object('attributes', ( SELECT jsonb_agg(jsonb_build_object('id', d3.seqid, 'name', jsonb_build_object('physical', d3.nm, 'logical', COALESCE(d3.cn, d3.nm)), 'description', COALESCE(d3.dsc, ''::text), 'datatype', d3.datatype)) AS jsonb_agg\n               FROM datahub.datafield d3\n              WHERE ((d3.nm ~~ (i.nm || '::%'::text)) AND (i.datatable_seqid = d3.datatable_seqid) AND (d3.archive_dt IS NULL))))) || COALESCE(i.meta, '{}'::jsonb))\n            WHEN (i.nm ~~ '%::%'::text) THEN (jsonb_build_object('json_metadata', jsonb_build_object('parent', ( SELECT jsonb_build_object('id', d1.seqid, 'name', jsonb_build_object('physical', d1.nm, 'logical', COALESCE(d1.cn, d1.nm)), 'description', COALESCE(d1.dsc, ''::text)) AS jsonb_build_object\n               FROM datahub.datafield d1\n              WHERE ((d1.nm = split_part(i.nm, '::'::text, 1)) AND (d1.datatable_seqid = i.datatable_seqid) AND (i.seqid \u003c\u003e d1.seqid) AND (d1.archive_dt IS NULL))))) || COALESCE(i.meta, '{}'::jsonb))\n            ELSE i.meta\n        END AS metadata,\n    COALESCE(\n        CASE\n            WHEN (i.position_start IS NOT NULL) THEN (((((i.datatype || '('::text) || (i.position_start)::text) || ','::text) || (COALESCE((i.position_end)::integer, 0))::text) || ')'::text)\n            WHEN ((i.position_start IS NULL) AND (i.position_end IS NOT NULL)) THEN (((((i.datatype || '('::text) || (COALESCE((i.position_start)::integer, 0))::text) || ','::text) || (i.position_end)::text) || ')'::text)\n            WHEN ((i.length IS NOT NULL) AND (i.position_start IS NULL) AND (i.position_end IS NULL)) THEN (((i.datatype || '('::text) || (i.length)::text) || ')'::text)\n            ELSE i.datatype\n        END, 'UNKNOWN'::text) AS type,\n    ( SELECT jsonb_agg(jsonb_build_object('profile', jsonb_build_object('name', p.nm, 'id', p.seqid), 'alias', jsonb_build_object('name', a.nm, 'description', COALESCE(a.dsc, ''::text), 'id', a.seqid))) AS jsonb_agg\n           FROM (datahub.profile p\n             LEFT JOIN datahub.alias a ON ((p.seqid = a.profile_seqid)))\n          WHERE ((a.datafield_seqid = i.seqid) AND (p.archive_dt IS NULL) AND (a.archive_dt IS NULL))) AS aliases,\n    COALESCE(( SELECT jsonb_agg(tag.data) AS jsonb_agg\n           FROM (datahub.vw_tag_ref tag\n             LEFT JOIN datahub.tag_assc ta ON ((ta.tag_seqid = tag.id)))\n          WHERE ((ta.datafield_seqid = i.seqid) AND (ta.archive_dt IS NULL))), '[]'::jsonb) AS tags,\n    ( SELECT jsonb_agg(jsonb_build_object('name', ca.nm, 'value', jsonb_build_object('create_date', cav.record_create_dt, 'value', COALESCE(cav.value, ca.default_value), 'id', cav.seqid))) AS jsonb_agg\n           FROM (datahub.custom_attribute ca\n             LEFT JOIN datahub.custom_attribute_value cav ON ((ca.seqid = cav.custom_attribute_seqid)))\n          WHERE ((cav.datafield_seqid = i.seqid) AND (ca.archive_dt IS NULL) AND (cav.archive_dt IS NULL))) AS attributes,\n    ( SELECT jsonb_agg(jsonb_build_object('id', ct.seqid, 'name', ct.nm, 'description', COALESCE(ct.dsc, ''::text), 'compliant', c.is_compliant)) AS jsonb_agg\n           FROM (datahub.datafield_compliance_type c\n             LEFT JOIN datahub.compliance_type ct ON ((ct.seqid = c.compliance_type_seqid)))\n          WHERE ((c.datafield_seqid = i.seqid) AND (ct.archive_dt IS NULL))) AS policies,\n    COALESCE(( SELECT jsonb_build_object('is_key', true, 'primary', k.pk, 'name', k.key_nm) AS jsonb_build_object\n           FROM datahub.datatable_key k\n          WHERE ((k.datafield_seqid = i.seqid) AND (k.datatable_seqid = i.datatable_seqid) AND (k.archive_dt IS NULL))), ( SELECT jsonb_build_object('is_key', false, 'primary', false, 'name', NULL::unknown) AS jsonb_build_object)) AS key,\n    jsonb_build_object('sources', ( SELECT jsonb_agg(jsonb_build_object('id', ((l1.metadata -\u003e 'source'::text) -\u003e\u003e 'id'::text), 'stub', ((l1.metadata -\u003e 'source'::text) -\u003e 'stub'::text), 'name', ((l1.metadata -\u003e 'source'::text) -\u003e 'name'::text), 'description', ((l1.metadata -\u003e 'source'::text) -\u003e\u003e 'description'::text), 'aliases', ((l1.metadata -\u003e 'source'::text) -\u003e 'aliases'::text), 'source', ((l1.metadata -\u003e 'source'::text) -\u003e 'datasource'::text), 'set', ((l1.metadata -\u003e 'source'::text) -\u003e 'dataset'::text))) AS jsonb_agg\n           FROM datahub.vw_lineage l1\n          WHERE (l1.target_item_id = i.seqid)), 'targets', ( SELECT jsonb_agg(jsonb_build_object('id', ((l2.metadata -\u003e 'target'::text) -\u003e\u003e 'id'::text), 'stub', ((l2.metadata -\u003e 'target'::text) -\u003e 'stub'::text), 'name', ((l2.metadata -\u003e 'target'::text) -\u003e 'name'::text), 'description', ((l2.metadata -\u003e 'target'::text) -\u003e\u003e 'description'::text), 'aliases', ((l2.metadata -\u003e 'target'::text) -\u003e 'aliases'::text), 'source', ((l2.metadata -\u003e 'target'::text) -\u003e 'datasource'::text), 'set', ((l2.metadata -\u003e 'target'::text) -\u003e 'dataset'::text))) AS jsonb_agg\n           FROM datahub.vw_lineage l2\n          WHERE (l2.source_item_id = i.seqid))) AS lineage\n   FROM (datahub.datafield i\n     LEFT JOIN datahub.vw_data_set_ref ref ON ((ref.id = i.datatable_seqid)))\n  WHERE (i.archive_dt IS NULL);",
          "fqdn": "datahub.vw_data_item_ref"
        },
        "vw_data_set": {
          "name": {
            "logical": "vw_data_set",
            "physical": "vw_data_set"
          },
          "comment": "An expanded view of a data set and associated data elements.",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.aliases"
            },
            "attributes": {
              "name": {
                "physical": "attributes"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.attributes"
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.cn"
            },
            "datastore_seqid": {
              "name": {
                "physical": "datastore_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.datastore_seqid"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.dsc"
            },
            "est_record_ct": {
              "name": {
                "physical": "est_record_ct"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.est_record_ct"
            },
            "est_sz": {
              "name": {
                "physical": "est_sz"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.est_sz"
            },
            "items": {
              "name": {
                "physical": "items"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.items"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.last_modified_by"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.meta"
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.msg"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.nm"
            },
            "ordinal": {
              "name": {
                "physical": "ordinal"
              },
              "comment": "",
              "type": "int4",
              "udt_type": "int4",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.ordinal"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.record_create_dt"
            },
            "related": {
              "name": {
                "physical": "related"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.related"
            },
            "related_tickets": {
              "name": {
                "physical": "related_tickets"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.related_tickets"
            },
            "schema_nm": {
              "name": {
                "physical": "schema_nm"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.schema_nm"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.seqid"
            },
            "source": {
              "name": {
                "physical": "source"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.source"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.stub"
            },
            "tags": {
              "name": {
                "physical": "tags"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.tags"
            },
            "update_sched": {
              "name": {
                "physical": "update_sched"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set.update_sched"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.seqid,\n    t.datastore_seqid,\n    ref.stub,\n    ref.source,\n    COALESCE(t.cn, t.nm) AS cn,\n    t.schema_nm,\n    t.nm,\n    COALESCE(t.dsc, ''::text) AS dsc,\n    t.meta,\n    t.est_sz,\n    t.est_record_ct,\n    t.update_sched,\n    t.last_update_dt,\n    t.msg,\n    t.record_create_dt,\n    ref.aliases,\n    ref.tags,\n    ref.attributes,\n    ( SELECT json_agg(jsonb_build_object('id', iref.id, 'name', iref.name, 'description', iref.description, 'type', iref.type, 'nullable', i.nullable, 'is_array', i.is_array, 'key', iref.key, 'policies', iref.policies, 'aliases', iref.aliases, 'tags', iref.tags, 'status', i.status, 'metadata', iref.metadata, 'stub', iref.stub)) AS json_agg\n           FROM (datahub.datafield i\n             LEFT JOIN datahub.vw_data_item_ref iref ON ((iref.id = i.seqid)))\n          WHERE ((i.datatable_seqid = t.seqid) AND (i.archive_dt IS NULL))) AS items,\n    jsonb_build_object('parents', ( SELECT jsonb_agg(row_to_json(rel.*)) AS jsonb_agg\n           FROM datahub.vw_entity_rel rel\n          WHERE (rel.child_set = t.seqid)), 'children', ( SELECT jsonb_agg(row_to_json(rel.*)) AS jsonb_agg\n           FROM datahub.vw_entity_rel rel\n          WHERE (rel.parent_set = t.seqid))) AS related,\n    t.last_modified_by,\n    t.ordinality AS ordinal,\n    COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', x.seqid, 'summary', x.summary, 'public', x.public, 'create_date', x.record_create_dt, 'status', x.status, 'sla', x.sla, 'type', x.type, 'metadata', x.metadata, 'creator', x.creator, 'comments', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', ta1.seqid, 'common_id', (( SELECT string_to_array(ta1.common_id, '-'::text) AS string_to_array))[2], 'message', ta1.msg, 'metadata', ta1.meta, 'create_date', ta1.record_create_dt, 'creator', p2.data)) AS jsonb_agg\n                   FROM ((datahub.ticket_pin p\n                     LEFT JOIN datahub.ticket_activity ta1 ON ((p.ticket_activity_seqid = ta1.seqid)))\n                     LEFT JOIN datahub.vw_person p2 ON ((p2.id = ta1.creator_seqid)))\n                  WHERE ((ta1.ticket_seqid = x.seqid) AND (ta1.archive_dt IS NULL))), '[]'::jsonb))) AS jsonb_agg\n           FROM ( SELECT DISTINCT tk.seqid,\n                    tk.creator_seqid,\n                    tk.assignee_seqid,\n                    tk.assigned_by_seqid,\n                    tk.resolution_ticket_activity_seqid,\n                    tk.ticket_status_seqid,\n                    tk.ticket_sla_seqid,\n                    tk.ticket_type_seqid,\n                    tk.priority_seqid,\n                    tk.draft,\n                    tk.summary,\n                    tk.last_update_dt,\n                    tk.due_dt,\n                    tk.resolution_dt,\n                    tk.time_estimate_min,\n                    tk.time_actual_min,\n                    tk.public,\n                    tk.meta,\n                    tk.record_create_dt,\n                    tk.archive_dt,\n                    tk.search,\n                    jsonb_build_object('id', tstat.seqid, 'name', tstat.nm, 'description', COALESCE(tstat.dsc, ''::text), 'closed', tstat.closed) AS status,\n                    jsonb_build_object('id', sla.seqid, 'name', sla.nm, 'sla', sla.sla) AS sla,\n                    jsonb_build_object('id', ttype.seqid, 'name', ttype.nm, 'description', COALESCE(ttype.dsc, ''::text)) AS type,\n                    tk.meta AS metadata,\n                    tperson.data AS creator\n                   FROM ((((((datahub.ticket_pin tp\n                     LEFT JOIN datahub.ticket_activity ta ON ((ta.seqid = tp.ticket_activity_seqid)))\n                     LEFT JOIN datahub.ticket tk ON ((tk.seqid = ta.ticket_seqid)))\n                     LEFT JOIN datahub.ticket_status tstat ON ((tstat.seqid = tk.ticket_status_seqid)))\n                     LEFT JOIN datahub.ticket_sla sla ON ((sla.seqid = tk.ticket_sla_seqid)))\n                     LEFT JOIN datahub.ticket_type ttype ON ((ttype.seqid = tk.ticket_type_seqid)))\n                     LEFT JOIN datahub.vw_person tperson ON ((tperson.id = tk.creator_seqid)))\n                  WHERE (tp.datatable_seqid = t.seqid)) x), '[]'::jsonb) AS related_tickets\n   FROM (datahub.datatable t\n     LEFT JOIN datahub.vw_data_set_ref ref ON ((ref.id = t.seqid)))\n  WHERE (t.archive_dt IS NULL);",
          "fqdn": "datahub.vw_data_set"
        },
        "vw_data_set_ref": {
          "name": {
            "logical": "vw_data_set_ref",
            "physical": "vw_data_set_ref"
          },
          "comment": "Represents a data set as it is referred to in most common queries (a restricted set of data).",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.aliases"
            },
            "attributes": {
              "name": {
                "physical": "attributes"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.attributes"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.id"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.name"
            },
            "source": {
              "name": {
                "physical": "source"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.source"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.stub"
            },
            "tags": {
              "name": {
                "physical": "tags"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_set_ref.tags"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.seqid AS id,\n        CASE\n            WHEN (length(TRIM(BOTH FROM COALESCE(t.schema_nm, ''::text))) = 0) THEN lower(((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || t.nm))\n            ELSE lower(((((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || TRIM(BOTH FROM COALESCE(t.schema_nm, ''::text))) || ':'::text) || t.nm))\n        END AS stub,\n    jsonb_build_object('physical', t.nm, 'logical', COALESCE(t.cn, t.nm)) AS name,\n    COALESCE(t.dsc, ''::text) AS description,\n    ( SELECT jsonb_agg(jsonb_build_object('profile', json_build_object('name', p.nm, 'id', p.seqid), 'alias', json_build_object('name', a.nm, 'description', COALESCE(a.dsc, ''::text), 'id', a.seqid))) AS jsonb_agg\n           FROM (datahub.profile p\n             LEFT JOIN datahub.alias a ON ((p.seqid = a.profile_seqid)))\n          WHERE ((a.datatable_seqid = t.seqid) AND (p.archive_dt IS NULL) AND (a.archive_dt IS NULL))) AS aliases,\n    jsonb_build_object('id', ref.id, 'stub', ref.stub, 'type', ref.type, 'aliases', ref.aliases) AS source,\n    COALESCE(( SELECT jsonb_agg(tag.data) AS jsonb_agg\n           FROM (datahub.vw_tag_ref tag\n             LEFT JOIN datahub.tag_assc ta ON ((ta.tag_seqid = tag.id)))\n          WHERE ((ta.datatable_seqid = t.seqid) AND (ta.archive_dt IS NULL))), '[]'::jsonb) AS tags,\n    ( SELECT jsonb_agg(jsonb_build_object('name', ca.nm, 'value', jsonb_build_object('create_date', cav.record_create_dt, 'value', COALESCE(cav.value, ca.default_value), 'id', cav.seqid))) AS jsonb_agg\n           FROM (datahub.custom_attribute ca\n             LEFT JOIN datahub.custom_attribute_value cav ON ((ca.seqid = cav.custom_attribute_seqid)))\n          WHERE ((cav.datatable_seqid = t.seqid) AND (ca.archive_dt IS NULL) AND (cav.archive_dt IS NULL))) AS attributes\n   FROM ((datahub.datatable t\n     LEFT JOIN datahub.vw_data_source_ref ref ON ((ref.id = t.datastore_seqid)))\n     LEFT JOIN datahub.datastore ds ON ((ds.seqid = t.datastore_seqid)))\n  WHERE (t.archive_dt IS NULL);",
          "fqdn": "datahub.vw_data_set_ref"
        },
        "vw_data_source": {
          "name": {
            "logical": "vw_data_source",
            "physical": "vw_data_source"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.aliases"
            },
            "attributes": {
              "name": {
                "physical": "attributes"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.attributes"
            },
            "cn": {
              "name": {
                "physical": "cn"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.cn"
            },
            "conn": {
              "name": {
                "physical": "conn"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.conn"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.dsc"
            },
            "est_record_ct": {
              "name": {
                "physical": "est_record_ct"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.est_record_ct"
            },
            "est_sz": {
              "name": {
                "physical": "est_sz"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.est_sz"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.last_modified_by"
            },
            "last_update_dt": {
              "name": {
                "physical": "last_update_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.last_update_dt"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.meta"
            },
            "msg": {
              "name": {
                "physical": "msg"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.msg"
            },
            "nm": {
              "name": {
                "physical": "nm"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.nm"
            },
            "queries": {
              "name": {
                "physical": "queries"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.queries"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.record_create_dt"
            },
            "related_tickets": {
              "name": {
                "physical": "related_tickets"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.related_tickets"
            },
            "schemas": {
              "name": {
                "physical": "schemas"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.schemas"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.seqid"
            },
            "sets": {
              "name": {
                "physical": "sets"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.sets"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.stub"
            },
            "tags": {
              "name": {
                "physical": "tags"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.tags"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.type"
            },
            "update_sched": {
              "name": {
                "physical": "update_sched"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.update_sched"
            },
            "version": {
              "name": {
                "physical": "version"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source.version"
            }
          },
          "relationships": [],
          "view_source": "SELECT s.seqid,\n    ref.stub,\n    s.cn,\n    s.nm,\n    COALESCE(s.dsc, ''::text) AS dsc,\n    ref.type,\n    s.version,\n    s.meta,\n    s.est_sz,\n    s.est_record_ct,\n    s.conn,\n    s.update_sched,\n    s.last_update_dt,\n    s.msg,\n    s.record_create_dt,\n    ref.queries,\n    ref.aliases,\n    ref.tags,\n    ref.attributes,\n    ( SELECT jsonb_agg(json_build_object('id', t.seqid, 'name', json_build_object('logical', COALESCE(t.cn, t.nm), 'physical', t.nm), 'description', COALESCE(t.dsc, ''::text), 'estimated_size', t.est_sz, 'estimated_record_count', t.est_record_ct, 'item_count', ( SELECT count(fld.seqid) AS count\n                   FROM datahub.datafield fld\n                  WHERE ((fld.datatable_seqid = t.seqid) AND (fld.archive_dt IS NULL))), 'last_update_date', t.last_update_dt, 'update_schedule', t.update_sched, 'aliases', sref.aliases, 'tags', sref.tags, 'schema', t.schema_nm, 'stub', sref.stub, 'metadata', t.meta)) AS jsonb_agg\n           FROM (datahub.datatable t\n             LEFT JOIN datahub.vw_data_set_ref sref ON ((sref.id = t.seqid)))\n          WHERE ((t.datastore_seqid = s.seqid) AND (t.archive_dt IS NULL))) AS sets,\n    s.last_modified_by,\n    COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', x.seqid, 'summary', x.summary, 'public', x.public, 'create_date', x.record_create_dt, 'status', x.status, 'sla', x.sla, 'type', x.type, 'metadata', x.metadata, 'creator', x.creator, 'comments', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', ta1.seqid, 'common_id', (( SELECT string_to_array(ta1.common_id, '-'::text) AS string_to_array))[2], 'message', ta1.msg, 'metadata', ta1.meta, 'create_date', ta1.record_create_dt, 'creator', p2.data)) AS jsonb_agg\n                   FROM ((datahub.ticket_pin p\n                     LEFT JOIN datahub.ticket_activity ta1 ON ((p.ticket_activity_seqid = ta1.seqid)))\n                     LEFT JOIN datahub.vw_person p2 ON ((p2.id = ta1.creator_seqid)))\n                  WHERE ((ta1.ticket_seqid = x.seqid) AND (ta1.archive_dt IS NULL))), '[]'::jsonb))) AS jsonb_agg\n           FROM ( SELECT DISTINCT tk.seqid,\n                    tk.creator_seqid,\n                    tk.assignee_seqid,\n                    tk.assigned_by_seqid,\n                    tk.resolution_ticket_activity_seqid,\n                    tk.ticket_status_seqid,\n                    tk.ticket_sla_seqid,\n                    tk.ticket_type_seqid,\n                    tk.priority_seqid,\n                    tk.draft,\n                    tk.summary,\n                    tk.last_update_dt,\n                    tk.due_dt,\n                    tk.resolution_dt,\n                    tk.time_estimate_min,\n                    tk.time_actual_min,\n                    tk.public,\n                    tk.meta,\n                    tk.record_create_dt,\n                    tk.archive_dt,\n                    tk.search,\n                    tk.last_modified_by,\n                    jsonb_build_object('id', tstat.seqid, 'name', tstat.nm, 'description', COALESCE(tstat.dsc, ''::text), 'closed', tstat.closed) AS status,\n                    jsonb_build_object('id', sla.seqid, 'name', sla.nm, 'sla', sla.sla) AS sla,\n                    jsonb_build_object('id', ttype.seqid, 'name', ttype.nm, 'description', COALESCE(ttype.dsc, ''::text)) AS type,\n                    tk.meta AS metadata,\n                    tperson.data AS creator\n                   FROM ((((((datahub.ticket_pin tp\n                     LEFT JOIN datahub.ticket_activity ta ON ((ta.seqid = tp.ticket_activity_seqid)))\n                     LEFT JOIN datahub.ticket tk ON ((tk.seqid = ta.ticket_seqid)))\n                     LEFT JOIN datahub.ticket_status tstat ON ((tstat.seqid = tk.ticket_status_seqid)))\n                     LEFT JOIN datahub.ticket_sla sla ON ((sla.seqid = tk.ticket_sla_seqid)))\n                     LEFT JOIN datahub.ticket_type ttype ON ((ttype.seqid = tk.ticket_type_seqid)))\n                     LEFT JOIN datahub.vw_person tperson ON ((tperson.id = tk.creator_seqid)))\n                  WHERE (tp.datastore_seqid = s.seqid)) x), '[]'::jsonb) AS related_tickets,\n    COALESCE(( SELECT jsonb_agg(DISTINCT sc.schema_nm) AS jsonb_agg\n           FROM datahub.datatable sc\n          WHERE ((sc.datastore_seqid = s.seqid) AND (sc.archive_dt IS NULL) AND (sc.schema_nm IS NOT NULL))), '[]'::jsonb) AS schemas\n   FROM (datahub.datastore s\n     LEFT JOIN datahub.vw_data_source_ref ref ON ((ref.id = s.seqid)))\n  WHERE (s.archive_dt IS NULL);",
          "fqdn": "datahub.vw_data_source"
        },
        "vw_data_source_ref": {
          "name": {
            "logical": "vw_data_source_ref",
            "physical": "vw_data_source_ref"
          },
          "comment": "Represents a data source as it is referred to in most common queries (a restricted set of data).",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.aliases"
            },
            "attributes": {
              "name": {
                "physical": "attributes"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.attributes"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.id"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.metadata"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.name"
            },
            "queries": {
              "name": {
                "physical": "queries"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.queries"
            },
            "stewards": {
              "name": {
                "physical": "stewards"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.stewards"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.stub"
            },
            "tags": {
              "name": {
                "physical": "tags"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.tags"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_data_source_ref.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT s.seqid AS id,\n    COALESCE(s.stub, s.nm, s.seqid) AS stub,\n    jsonb_build_object('physical', s.nm, 'logical', COALESCE(s.cn, s.nm)) AS name,\n    COALESCE(s.dsc, ''::text) AS description,\n    ( SELECT jsonb_build_object('name', dt.nm, 'id', dt.seqid, 'category', dt.ctg, 'metadata', dt.meta, 'create_date', dt.record_create_dt) AS jsonb_build_object\n           FROM datahub.datasource_type dt\n          WHERE ((dt.archive_dt IS NULL) AND (dt.seqid = s.datastore_type_seqid))) AS type,\n    ( SELECT jsonb_agg(jsonb_build_object('profile', json_build_object('name', p.nm, 'id', p.seqid), 'alias', json_build_object('name', a.nm, 'description', COALESCE(a.dsc, ''::text), 'id', a.seqid))) AS jsonb_agg\n           FROM (datahub.profile p\n             LEFT JOIN datahub.alias a ON ((p.seqid = a.profile_seqid)))\n          WHERE ((a.datastore_seqid = s.seqid) AND (p.archive_dt IS NULL) AND (a.archive_dt IS NULL))) AS aliases,\n    COALESCE(( SELECT jsonb_agg(tag.data) AS jsonb_agg\n           FROM (datahub.vw_tag_ref tag\n             LEFT JOIN datahub.tag_assc ta ON ((ta.tag_seqid = tag.id)))\n          WHERE ((ta.datastore_seqid = s.seqid) AND (ta.archive_dt IS NULL))), '[]'::jsonb) AS tags,\n    (( SELECT json_agg(jsonb_build_object('name', ca.nm, 'value', json_build_object('create_date', cav.record_create_dt, 'value', COALESCE(cav.value, ca.default_value), 'id', cav.seqid))) AS json_agg\n           FROM (datahub.custom_attribute ca\n             LEFT JOIN datahub.custom_attribute_value cav ON ((ca.seqid = cav.custom_attribute_seqid)))\n          WHERE ((cav.datastore_seqid = s.seqid) AND (ca.archive_dt IS NULL) AND (cav.archive_dt IS NULL))))::jsonb AS attributes,\n    COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', q.seqid, 'name', q.nm, 'description', COALESCE(q.dsc, ''::text), 'code', q.code, 'metadata', q.meta, 'last_update_date', q.last_update_dt, 'create_date', q.record_create_dt)) AS jsonb_agg\n           FROM datahub.query q\n          WHERE ((q.datastore_seqid = s.seqid) AND (q.archive_dt IS NULL))), '[]'::jsonb) AS queries,\n    COALESCE(( SELECT jsonb_agg(st.data) AS jsonb_agg\n           FROM datahub.vw_person st\n          WHERE (st.id IN ( SELECT dp.person_seqid\n                   FROM datahub.datastore_person dp\n                  WHERE ((dp.datastore_seqid = s.seqid) AND (dp.archive_dt IS NULL))))), '[]'::jsonb) AS stewards,\n    s.meta AS metadata\n   FROM datahub.datastore s\n  WHERE (s.archive_dt IS NULL);",
          "fqdn": "datahub.vw_data_source_ref"
        },
        "vw_dictionary": {
          "name": {
            "logical": "vw_dictionary",
            "physical": "vw_dictionary"
          },
          "comment": "Serves primarily as a lookup table (data dictionary).",
          "type": "VIEW",
          "items": {
            "aliases": {
              "name": {
                "physical": "aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.aliases"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.id"
            },
            "item_aliases": {
              "name": {
                "physical": "item_aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_aliases"
            },
            "item_fuzzy_search": {
              "name": {
                "physical": "item_fuzzy_search"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_fuzzy_search"
            },
            "item_id": {
              "name": {
                "physical": "item_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_id"
            },
            "item_name": {
              "name": {
                "physical": "item_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_name"
            },
            "item_names": {
              "name": {
                "physical": "item_names"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_names"
            },
            "item_search": {
              "name": {
                "physical": "item_search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_search"
            },
            "item_stub": {
              "name": {
                "physical": "item_stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.item_stub"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.name"
            },
            "query_fuzzy_search": {
              "name": {
                "physical": "query_fuzzy_search"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.query_fuzzy_search"
            },
            "query_search": {
              "name": {
                "physical": "query_search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.query_search"
            },
            "set_aliases": {
              "name": {
                "physical": "set_aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_aliases"
            },
            "set_fuzzy_search": {
              "name": {
                "physical": "set_fuzzy_search"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_fuzzy_search"
            },
            "set_id": {
              "name": {
                "physical": "set_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_id"
            },
            "set_name": {
              "name": {
                "physical": "set_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_name"
            },
            "set_names": {
              "name": {
                "physical": "set_names"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_names"
            },
            "set_search": {
              "name": {
                "physical": "set_search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_search"
            },
            "set_stub": {
              "name": {
                "physical": "set_stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.set_stub"
            },
            "source_aliases": {
              "name": {
                "physical": "source_aliases"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_aliases"
            },
            "source_fuzzy_search": {
              "name": {
                "physical": "source_fuzzy_search"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_fuzzy_search"
            },
            "source_id": {
              "name": {
                "physical": "source_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_id"
            },
            "source_name": {
              "name": {
                "physical": "source_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_name"
            },
            "source_names": {
              "name": {
                "physical": "source_names"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_names"
            },
            "source_search": {
              "name": {
                "physical": "source_search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_search"
            },
            "source_stub": {
              "name": {
                "physical": "source_stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.source_stub"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.stub"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_dictionary.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT srcr.name AS source_names,\n    setr.name AS set_names,\n    r.name AS item_names,\n    ds.seqid AS source_id,\n    ds.nm AS source_name,\n    t.seqid AS set_id,\n    t.nm AS set_name,\n    f.seqid AS item_id,\n    f.nm AS item_name,\n    'item'::text AS type,\n    COALESCE(f.dsc, ''::text) AS description,\n    r.aliases,\n    r.name,\n    f.seqid AS id,\n    COALESCE(ds.stub, ds.nm, ds.seqid) AS source_stub,\n    ((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || t.nm) AS set_stub,\n    ((((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || t.nm) || '.'::text) || f.nm) AS item_stub,\n    ((((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || t.nm) || '.'::text) || f.nm) AS stub,\n    NULL::tsvector AS source_search,\n    NULL::text AS source_fuzzy_search,\n    NULL::tsvector AS set_search,\n    NULL::text AS set_fuzzy_search,\n    f.search AS item_search,\n    TRIM(BOTH FROM ((((f.fuzzy_search || ' '::text) || ( SELECT array_to_string(array_agg((((('\"'::text || ca.nm) || '\":\"'::text) || cav.value) || '\"'::text)), ' '::text, ''::text) AS array_to_string\n           FROM (datahub.custom_attribute_value cav\n             LEFT JOIN datahub.custom_attribute ca ON ((ca.seqid = cav.custom_attribute_seqid)))\n          WHERE (cav.datafield_seqid = f.seqid))) || ' '::text) || ( SELECT array_to_string(array_agg(ct.nm), ' '::text, ''::text) AS array_to_string\n           FROM (datahub.datafield_compliance_type dct\n             LEFT JOIN datahub.compliance_type ct ON ((ct.seqid = dct.compliance_type_seqid)))\n          WHERE (dct.datafield_seqid = f.seqid)))) AS item_fuzzy_search,\n    NULL::tsvector AS query_search,\n    NULL::text AS query_fuzzy_search,\n    r.aliases AS item_aliases,\n    setr.aliases AS set_aliases,\n    srcr.aliases AS source_aliases\n   FROM (((((datahub.datastore ds\n     LEFT JOIN datahub.datatable t ON ((t.datastore_seqid = ds.seqid)))\n     LEFT JOIN datahub.datafield f ON ((f.datatable_seqid = t.seqid)))\n     LEFT JOIN datahub.vw_data_item_ref r ON ((r.id = f.seqid)))\n     LEFT JOIN datahub.vw_data_set_ref setr ON ((setr.id = f.datatable_seqid)))\n     LEFT JOIN datahub.vw_data_source_ref srcr ON ((srcr.id = t.datastore_seqid)))\n  WHERE ((f.archive_dt IS NULL) AND (t.archive_dt IS NULL) AND (ds.archive_dt IS NULL))\nUNION\n SELECT srcr.name AS source_names,\n    setr.name AS set_names,\n    NULL::jsonb AS item_names,\n    ds.seqid AS source_id,\n    ds.nm AS source_name,\n    t.seqid AS set_id,\n    t.nm AS set_name,\n    NULL::text AS item_id,\n    NULL::text AS item_name,\n    'set'::text AS type,\n    COALESCE(t.dsc, ''::text) AS description,\n    setr.aliases,\n    setr.name,\n    t.seqid AS id,\n    COALESCE(ds.stub, ds.nm, ds.seqid) AS source_stub,\n    ((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || t.nm) AS set_stub,\n    NULL::text AS item_stub,\n    ((COALESCE(ds.stub, ds.nm, ds.seqid) || '.'::text) || t.nm) AS stub,\n    NULL::tsvector AS source_search,\n    NULL::text AS source_fuzzy_search,\n    t.search AS set_search,\n    TRIM(BOTH FROM ((t.fuzzy_search || ' '::text) || ( SELECT array_to_string(array_agg((((('\"'::text || ca.nm) || '\":\"'::text) || cav.value) || '\"'::text)), ' '::text, ''::text) AS array_to_string\n           FROM (datahub.custom_attribute_value cav\n             LEFT JOIN datahub.custom_attribute ca ON ((ca.seqid = cav.custom_attribute_seqid)))\n          WHERE (cav.datatable_seqid = t.seqid)))) AS set_fuzzy_search,\n    NULL::tsvector AS item_search,\n    NULL::text AS item_fuzzy_search,\n    NULL::tsvector AS query_search,\n    NULL::text AS query_fuzzy_search,\n    NULL::jsonb AS item_aliases,\n    setr.aliases AS set_aliases,\n    srcr.aliases AS source_aliases\n   FROM (((datahub.datastore ds\n     LEFT JOIN datahub.datatable t ON ((t.datastore_seqid = ds.seqid)))\n     LEFT JOIN datahub.vw_data_set_ref setr ON ((setr.id = t.seqid)))\n     LEFT JOIN datahub.vw_data_source_ref srcr ON ((srcr.id = ds.seqid)))\n  WHERE ((t.archive_dt IS NULL) AND (ds.archive_dt IS NULL))\nUNION\n SELECT srcr.name AS source_names,\n    NULL::jsonb AS set_names,\n    NULL::jsonb AS item_names,\n    ds.seqid AS source_id,\n    ds.nm AS source_name,\n    NULL::text AS set_id,\n    NULL::text AS set_name,\n    NULL::text AS item_id,\n    NULL::text AS item_name,\n    'source'::text AS type,\n    COALESCE(ds.dsc, ''::text) AS description,\n    srcr.aliases,\n    srcr.name,\n    ds.seqid AS id,\n    COALESCE(ds.stub, ds.nm, ds.seqid) AS source_stub,\n    NULL::text AS set_stub,\n    NULL::text AS item_stub,\n    COALESCE(ds.stub, ds.nm, ds.seqid) AS stub,\n    ds.search AS source_search,\n    TRIM(BOTH FROM ((ds.fuzzy_search || ' '::text) || ( SELECT array_to_string(array_agg((((('\"'::text || ca.nm) || '\":\"'::text) || cav.value) || '\"'::text)), ' '::text, ''::text) AS array_to_string\n           FROM (datahub.custom_attribute_value cav\n             LEFT JOIN datahub.custom_attribute ca ON ((ca.seqid = cav.custom_attribute_seqid)))\n          WHERE (cav.datastore_seqid = ds.seqid)))) AS source_fuzzy_search,\n    NULL::tsvector AS set_search,\n    NULL::text AS set_fuzzy_search,\n    NULL::tsvector AS item_search,\n    NULL::text AS item_fuzzy_search,\n    NULL::tsvector AS query_search,\n    NULL::text AS query_fuzzy_search,\n    NULL::jsonb AS item_aliases,\n    NULL::jsonb AS set_aliases,\n    srcr.aliases AS source_aliases\n   FROM (datahub.datastore ds\n     LEFT JOIN datahub.vw_data_source_ref srcr ON ((srcr.id = ds.seqid)))\n  WHERE (ds.archive_dt IS NULL)\nUNION\n SELECT srcr.name AS source_names,\n    NULL::jsonb AS set_names,\n    NULL::jsonb AS item_names,\n    qds.seqid AS source_id,\n    qds.nm AS source_name,\n    NULL::text AS set_id,\n    NULL::text AS set_name,\n    NULL::text AS item_id,\n    NULL::text AS item_name,\n    'query'::text AS type,\n    COALESCE(qds.dsc, ''::text) AS description,\n    NULL::jsonb AS aliases,\n    jsonb_build_object('logical', q.nm, 'physical', q.nm) AS name,\n    q.seqid AS id,\n    COALESCE(qds.stub, qds.nm, qds.seqid) AS source_stub,\n    NULL::text AS set_stub,\n    NULL::text AS item_stub,\n    q.nm AS stub,\n    NULL::tsvector AS source_search,\n    NULL::text AS source_fuzzy_search,\n    NULL::tsvector AS set_search,\n    NULL::text AS set_fuzzy_search,\n    NULL::tsvector AS item_search,\n    NULL::text AS item_fuzzy_search,\n    q.search AS query_search,\n    q.fuzzy_search AS query_fuzzy_search,\n    NULL::jsonb AS item_aliases,\n    NULL::jsonb AS set_aliases,\n    srcr.aliases AS source_aliases\n   FROM ((datahub.query q\n     LEFT JOIN datahub.datastore qds ON ((qds.seqid = q.datastore_seqid)))\n     LEFT JOIN datahub.vw_data_source_ref srcr ON ((srcr.id = q.datastore_seqid)))\n  WHERE (qds.archive_dt IS NULL);",
          "fqdn": "datahub.vw_dictionary"
        },
        "vw_entity_rel": {
          "name": {
            "logical": "vw_entity_rel",
            "physical": "vw_entity_rel"
          },
          "comment": "Relationships by parent set/table",
          "type": "VIEW",
          "items": {
            "cardinality": {
              "name": {
                "physical": "cardinality"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.cardinality"
            },
            "child_set": {
              "name": {
                "physical": "child_set"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.child_set"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.create_date"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.id"
            },
            "identifying": {
              "name": {
                "physical": "identifying"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.identifying"
            },
            "items": {
              "name": {
                "physical": "items"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.items"
            },
            "last_modified_by": {
              "name": {
                "physical": "last_modified_by"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.last_modified_by"
            },
            "match_type": {
              "name": {
                "physical": "match_type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.match_type"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.metadata"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.name"
            },
            "parent_set": {
              "name": {
                "physical": "parent_set"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.parent_set"
            },
            "referential_integrity": {
              "name": {
                "physical": "referential_integrity"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_entity_rel.referential_integrity"
            }
          },
          "relationships": [],
          "view_source": "SELECT rel.seqid AS id,\n    rel.parent_seqid AS parent_set,\n    rel.child_seqid AS child_set,\n    jsonb_build_object('physical', rel.nm, 'logical', COALESCE(rel.cn, rel.nm)) AS name,\n    COALESCE(rel.dsc, ''::text) AS description,\n    rel.meta AS metadata,\n    rel.identifying,\n    rel.record_create_dt AS create_date,\n    jsonb_build_object('raw', COALESCE(rel.cardinality, ARRAY[1, 1, 0, '-1'::integer]), 'display', ( SELECT\n                CASE\n                    WHEN (rel.cardinality IS NOT NULL) THEN (((replace(((COALESCE(rel.cardinality[1], '-1'::integer))::character(1))::text, '-'::text, 'N'::text) || '..'::text) || replace(((COALESCE(rel.cardinality[2], '-1'::integer))::character(1))::text, '-'::text, 'N'::text)) ||\n                    CASE\n                        WHEN (array_length(rel.cardinality, 1) \u003e 2) THEN (((','::text || replace(((COALESCE(rel.cardinality[3], '-1'::integer))::character(1))::text, '-'::text, 'N'::text)) || '..'::text) || replace(((COALESCE(rel.cardinality[4], '-1'::integer))::character(1))::text, '-'::text, 'N'::text))\n                        ELSE ''::text\n                    END)\n                    ELSE '1..1,0..N'::text\n                END AS \"case\")) AS cardinality,\n    jsonb_build_object('on_update', rel.parent_update, 'on_delete', rel.parent_delete) AS referential_integrity,\n    rel.match_type,\n    ( SELECT jsonb_agg(json_build_object('parent', (( SELECT row_to_json(parent.*) AS row_to_json\n                   FROM ( SELECT pref.id,\n                            pref.stub,\n                            pref.name,\n                            pref.aliases,\n                            pref.type,\n                            vdi.set\n                           FROM (datahub.vw_data_item_ref pref\n                             LEFT JOIN datahub.vw_data_item vdi ON ((vdi.seqid = pref.id)))\n                          WHERE (pref.id = frel.parent_datafield_seqid)) parent))::jsonb, 'child', ( SELECT row_to_json(child.*) AS row_to_json\n                   FROM ( SELECT cref.id,\n                            cref.stub,\n                            cref.name,\n                            cref.aliases,\n                            cref.type,\n                            vdi2.set\n                           FROM (datahub.vw_data_item_ref cref\n                             LEFT JOIN datahub.vw_data_item vdi2 ON ((vdi2.seqid = cref.id)))\n                          WHERE (cref.id = frel.child_datafield_seqid)) child), 'create_date', rel.record_create_dt)) AS jsonb_agg\n           FROM datahub.datafield_rel frel\n          WHERE (frel.rel_seqid = rel.seqid)) AS items,\n    rel.last_modified_by\n   FROM datahub.datatable_rel rel\n  WHERE (rel.archive_dt IS NULL);",
          "fqdn": "datahub.vw_entity_rel"
        },
        "vw_history": {
          "name": {
            "logical": "vw_history",
            "physical": "vw_history"
          },
          "comment": "A queryable view of the changelog.",
          "type": "VIEW",
          "items": {
            "age": {
              "name": {
                "physical": "age"
              },
              "comment": "",
              "type": "numeric",
              "udt_type": "numeric",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.age"
            },
            "blame": {
              "name": {
                "physical": "blame"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.blame"
            },
            "change": {
              "name": {
                "physical": "change"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.change"
            },
            "db_user": {
              "name": {
                "physical": "db_user"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.db_user"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.record_create_dt"
            },
            "reference": {
              "name": {
                "physical": "reference"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.reference"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.seqid"
            },
            "source": {
              "name": {
                "physical": "source"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.source"
            },
            "source_seqid": {
              "name": {
                "physical": "source_seqid"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.source_seqid"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_history.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT cc.seqid,\n    cc.source,\n    cc.source_seqid,\n    cc.db_user,\n    cc.blame,\n    cc.change,\n    cc.record_create_dt,\n        CASE\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datastore'::text) THEN 'source'::text\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datatable'::text) THEN 'set'::text\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datafield'::text) THEN 'item'::text\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'query'::text) THEN 'query'::text\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'alias'::text) THEN 'alias'::text\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'custom_attribute_value'::text) THEN 'attribute'::text\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datafield_compliance_type'::text) THEN 'policy'::text\n            ELSE NULL::text\n        END AS type,\n        CASE\n            WHEN ((cc.change -\u003e\u003e 'op'::text) = 'DELETE'::text) THEN NULL::jsonb\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datastore'::text) THEN jsonb_build_object('source', cc.source_seqid, 'set', NULL::unknown, 'item', NULL::unknown, 'query', NULL::unknown)\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datatable'::text) THEN ( SELECT jsonb_build_object('source', d1.datastore_seqid, 'set', d1.seqid, 'item', NULL::unknown, 'query', NULL::unknown) AS jsonb_build_object\n               FROM datahub.datatable d1\n              WHERE (d1.seqid = cc.source_seqid))\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datafield'::text) THEN ( SELECT jsonb_build_object('source', d3.datastore_seqid, 'set', d2.datatable_seqid, 'item', cc.source_seqid, 'query', NULL::unknown) AS jsonb_build_object\n               FROM (datahub.datafield d2\n                 LEFT JOIN datahub.datatable d3 ON ((d3.seqid = d2.datatable_seqid)))\n              WHERE (d2.seqid = cc.source_seqid))\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'query'::text) THEN ( SELECT jsonb_build_object('source', q.datastore_seqid, 'set', NULL::unknown, 'item', NULL::unknown, 'query', q.seqid) AS jsonb_build_object\n               FROM datahub.query q\n              WHERE (q.seqid = cc.source_seqid))\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'alias'::text) THEN ( SELECT jsonb_build_object('source', t.source_id, 'set', t.set_id, 'item', t.item_id, 'query', NULL::unknown) AS jsonb_build_object\n               FROM datahub.vw_thesaurus t\n              WHERE (t.alias_id = cc.source_seqid))\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'custom_attribute_value'::text) THEN ( SELECT jsonb_build_object('source',\n                    CASE\n                        WHEN (cav.datastore_seqid IS NOT NULL) THEN cav.datastore_seqid\n                        WHEN (cav.datatable_seqid IS NOT NULL) THEN cdt.datastore_seqid\n                        WHEN (cav.datafield_seqid IS NOT NULL) THEN ( SELECT tt.datastore_seqid\n                           FROM datahub.datatable tt\n                          WHERE (tt.seqid = cdf.datatable_seqid))\n                        ELSE NULL::text\n                    END, 'set',\n                    CASE\n                        WHEN (cav.datatable_seqid IS NOT NULL) THEN cav.datatable_seqid\n                        WHEN (cav.datafield_seqid IS NOT NULL) THEN cdf.datatable_seqid\n                        ELSE NULL::text\n                    END, 'item', cav.datafield_seqid, 'query', NULL::unknown) AS jsonb_build_object\n               FROM (((datahub.custom_attribute_value cav\n                 LEFT JOIN datahub.datastore cds ON ((cds.seqid = cav.datastore_seqid)))\n                 LEFT JOIN datahub.datatable cdt ON ((cdt.seqid = cav.datatable_seqid)))\n                 LEFT JOIN datahub.datafield cdf ON ((cdf.seqid = cav.datafield_seqid)))\n              WHERE (cav.seqid = cc.source_seqid))\n            WHEN ((string_to_array(cc.source, '.'::text))[2] = 'datafield_compliance_type'::text) THEN ( SELECT jsonb_build_object('source', t2.datastore_seqid, 'set', t2.seqid, 'item', f.seqid, 'query', NULL::unknown) AS jsonb_build_object\n               FROM ((datahub.datafield_compliance_type dct\n                 LEFT JOIN datahub.datafield f ON ((f.seqid = dct.datafield_seqid)))\n                 LEFT JOIN datahub.datatable t2 ON ((f.datatable_seqid = t2.seqid)))\n              WHERE (dct.compliance_type_seqid = cc.source_seqid))\n            ELSE NULL::jsonb\n        END AS reference,\n    EXTRACT(day FROM (max(CURRENT_TIMESTAMP) - min(cc.record_create_dt))) AS age\n   FROM datahub.catalog_changelog cc\n  GROUP BY cc.seqid, cc.source, cc.source_seqid, cc.db_user, cc.blame, cc.change, cc.record_create_dt;",
          "fqdn": "datahub.vw_history"
        },
        "vw_lineage": {
          "name": {
            "logical": "vw_lineage",
            "physical": "vw_lineage"
          },
          "comment": "An expanded view of lineage, designed for reporting and bulk operations.",
          "type": "VIEW",
          "items": {
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.metadata"
            },
            "source_item_id": {
              "name": {
                "physical": "source_item_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_item_id"
            },
            "source_item_name": {
              "name": {
                "physical": "source_item_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_item_name"
            },
            "source_set_id": {
              "name": {
                "physical": "source_set_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_set_id"
            },
            "source_set_name": {
              "name": {
                "physical": "source_set_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_set_name"
            },
            "source_source_id": {
              "name": {
                "physical": "source_source_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_source_id"
            },
            "source_source_name": {
              "name": {
                "physical": "source_source_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_source_name"
            },
            "source_source_stub": {
              "name": {
                "physical": "source_source_stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.source_source_stub"
            },
            "target_item_id": {
              "name": {
                "physical": "target_item_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_item_id"
            },
            "target_item_name": {
              "name": {
                "physical": "target_item_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_item_name"
            },
            "target_set_id": {
              "name": {
                "physical": "target_set_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_set_id"
            },
            "target_set_name": {
              "name": {
                "physical": "target_set_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_set_name"
            },
            "target_source_id": {
              "name": {
                "physical": "target_source_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_source_id"
            },
            "target_source_name": {
              "name": {
                "physical": "target_source_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_source_name"
            },
            "target_source_stub": {
              "name": {
                "physical": "target_source_stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_lineage.target_source_stub"
            }
          },
          "relationships": [],
          "view_source": "SELECT s.source_datafield_seqid AS source_item_id,\n    src.nm AS source_item_name,\n    stbl.seqid AS source_set_id,\n    stbl.nm AS source_set_name,\n    ssrc.seqid AS source_source_id,\n    ssrc.nm AS source_source_name,\n    ssrc.stub AS source_source_stub,\n    s.datafield_seqid AS target_item_id,\n    t.nm AS target_item_name,\n    ttbl.seqid AS target_set_id,\n    ttbl.nm AS target_set_name,\n    tsrc.seqid AS target_source_id,\n    tsrc.nm AS target_source_name,\n    tsrc.stub AS target_source_stub,\n    json_build_object('source', json_build_object('id', s.source_datafield_seqid, 'name', json_build_object('physical', src.nm, 'logical', COALESCE(src.cn, src.nm)), 'description', COALESCE(src.dsc, ''::text), 'aliases', COALESCE(( SELECT jsonb_agg(json_build_object('alias', json_build_object('id', salias.seqid, 'name', salias.nm, 'description', COALESCE(salias.dsc, ''::text)), 'profile', json_build_object('id', sprofile.seqid, 'name', sprofile.nm))) AS jsonb_agg\n           FROM (datahub.alias salias\n             LEFT JOIN datahub.profile sprofile ON ((salias.profile_seqid = sprofile.seqid)))\n          WHERE ((salias.datafield_seqid = s.source_datafield_seqid) AND (salias.archive_dt IS NULL) AND (sprofile.archive_dt IS NULL))), '[]'::jsonb), 'datasource', json_build_object('id', ssrc.seqid, 'name', json_build_object('physical', ssrc.nm, 'logical', COALESCE(ssrc.cn, ssrc.nm)), 'aliases', ( SELECT jsonb_agg(jsonb_build_object('alias', jsonb_build_object('id', a1.seqid, 'name', a1.nm, 'description', COALESCE(a1.dsc, ''::text)), 'profile', jsonb_build_object('id', p1.seqid, 'name', p1.nm))) AS jsonb_agg\n           FROM (datahub.alias a1\n             LEFT JOIN datahub.profile p1 ON ((p1.seqid = a1.profile_seqid)))\n          WHERE (a1.datastore_seqid = ssrc.seqid))), 'dataset', json_build_object('id', stbl.seqid, 'name', json_build_object('phyiscal', stbl.nm, 'logical', COALESCE(stbl.cn, stbl.nm)), 'aliases', ( SELECT jsonb_agg(jsonb_build_object('alias', jsonb_build_object('id', a12.seqid, 'name', a12.nm, 'description', COALESCE(a12.dsc, ''::text)), 'profile', jsonb_build_object('id', p12.seqid, 'name', p12.nm))) AS jsonb_agg\n           FROM (datahub.alias a12\n             LEFT JOIN datahub.profile p12 ON ((p12.seqid = a12.profile_seqid)))\n          WHERE (a12.datatable_seqid = stbl.seqid))), 'stub', json_build_object('physical', ((((COALESCE(ssrc.stub, ssrc.nm, ssrc.seqid) || '.'::text) || stbl.nm) || '.'::text) || src.nm), 'logical', ((((COALESCE(ssrc.cn, ssrc.seqid) || ' -\u003e '::text) || COALESCE(stbl.cn, stbl.nm)) || ' -\u003e '::text) || COALESCE(src.cn, src.nm)), 'key', (((((ssrc.seqid || '.'::text) ||\n        CASE\n            WHEN (stbl.schema_nm IS NOT NULL) THEN (stbl.schema_nm || ':'::text)\n            ELSE ''::text\n        END) || stbl.nm) || '.'::text) || src.nm))), 'target', json_build_object('id', s.datafield_seqid, 'name', json_build_object('physical', t.nm, 'logical', COALESCE(t.cn, t.nm)), 'description', COALESCE(t.dsc, ''::text), 'aliases', COALESCE(( SELECT jsonb_agg(json_build_object('alias', json_build_object('id', salias2.seqid, 'name', salias2.nm, 'description', COALESCE(salias2.dsc, ''::text)), 'profile', json_build_object('id', sprofile2.seqid, 'name', sprofile2.nm))) AS jsonb_agg\n           FROM (datahub.alias salias2\n             LEFT JOIN datahub.profile sprofile2 ON ((salias2.profile_seqid = sprofile2.seqid)))\n          WHERE ((salias2.datafield_seqid = s.datafield_seqid) AND (salias2.archive_dt IS NULL) AND (sprofile2.archive_dt IS NULL))), '[]'::jsonb), 'datasource', json_build_object('id', tsrc.seqid, 'name', json_build_object('physical', tsrc.nm, 'logical', COALESCE(tsrc.cn, tsrc.nm)), 'aliases', ( SELECT jsonb_agg(jsonb_build_object('alias', jsonb_build_object('id', a2.seqid, 'name', a2.nm, 'description', COALESCE(a2.dsc, ''::text)), 'profile', jsonb_build_object('id', p2.seqid, 'name', p2.nm))) AS jsonb_agg\n           FROM (datahub.alias a2\n             LEFT JOIN datahub.profile p2 ON ((p2.seqid = a2.profile_seqid)))\n          WHERE (a2.datastore_seqid = tsrc.seqid))), 'dataset', json_build_object('id', ttbl.seqid, 'name', json_build_object('phyiscal', ttbl.nm, 'logical', COALESCE(ttbl.cn, ttbl.nm)), 'aliases', ( SELECT jsonb_agg(jsonb_build_object('alias', jsonb_build_object('id', ta12.seqid, 'name', ta12.nm, 'description', COALESCE(ta12.dsc, ''::text)), 'profile', jsonb_build_object('id', tp12.seqid, 'name', tp12.nm))) AS jsonb_agg\n           FROM (datahub.alias ta12\n             LEFT JOIN datahub.profile tp12 ON ((tp12.seqid = ta12.profile_seqid)))\n          WHERE (ta12.datatable_seqid = ttbl.seqid))), 'stub', json_build_object('physical', ((((COALESCE(tsrc.stub, tsrc.nm, tsrc.seqid) || '.'::text) || ttbl.nm) || '.'::text) || tsrc.nm), 'logical', ((((COALESCE(tsrc.cn, tsrc.seqid) || ' -\u003e '::text) || COALESCE(ttbl.cn, ttbl.nm)) || ' -\u003e '::text) || COALESCE(tsrc.cn, tsrc.nm)), 'key', (((((tsrc.seqid || '.'::text) ||\n        CASE\n            WHEN (ttbl.schema_nm IS NOT NULL) THEN (ttbl.schema_nm || ':'::text)\n            ELSE ''::text\n        END) || ttbl.nm) || '.'::text) || tsrc.nm)))) AS metadata\n   FROM ((((((datahub.datafield_source s\n     LEFT JOIN datahub.datafield src ON ((s.source_datafield_seqid = src.seqid)))\n     LEFT JOIN datahub.datatable stbl ON ((stbl.seqid = src.datatable_seqid)))\n     LEFT JOIN datahub.datastore ssrc ON ((ssrc.seqid = stbl.datastore_seqid)))\n     LEFT JOIN datahub.datafield t ON ((s.datafield_seqid = t.seqid)))\n     LEFT JOIN datahub.datatable ttbl ON ((ttbl.seqid = t.datatable_seqid)))\n     LEFT JOIN datahub.datastore tsrc ON ((tsrc.seqid = ttbl.datastore_seqid)))\n  WHERE ((s.archive_dt IS NULL) AND (src.archive_dt IS NULL) AND (stbl.archive_dt IS NULL) AND (ssrc.archive_dt IS NULL) AND (t.archive_dt IS NULL) AND (ttbl.archive_dt IS NULL) AND (tsrc.archive_dt IS NULL));",
          "fqdn": "datahub.vw_lineage"
        },
        "vw_linked_data": {
          "name": {
            "logical": "vw_linked_data",
            "physical": "vw_linked_data"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "data": {
              "name": {
                "physical": "data"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_linked_data.data"
            },
            "ticket_id": {
              "name": {
                "physical": "ticket_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_linked_data.ticket_id"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.seqid AS ticket_id,\n    jsonb_build_object('sources', COALESCE(( SELECT jsonb_agg(DISTINCT datahub.\"formatSource\"(vdsr.seqid)) AS jsonb_agg\n           FROM (datahub.ticket_data_item tdi\n             LEFT JOIN datahub.datastore vdsr ON ((tdi.datastore_seqid = vdsr.seqid)))\n          WHERE ((tdi.ticket_seqid = t.seqid) AND (vdsr.seqid IS NOT NULL))), '[]'::jsonb), 'sets', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', vdsr2.seqid, 'stub',\n                CASE\n                    WHEN (length(TRIM(BOTH FROM COALESCE(vdsr2.schema_nm, ''::text))) = 0) THEN lower(((COALESCE(ds2.stub, ds2.nm, ds2.seqid) || '.'::text) || vdsr2.nm))\n                    ELSE lower(((((COALESCE(ds2.stub, ds2.nm, ds2.seqid) || '.'::text) || TRIM(BOTH FROM COALESCE(vdsr2.schema_nm, ''::text))) || ':'::text) || vdsr2.nm))\n                END, 'name', jsonb_build_object('physical', vdsr2.nm, 'logical', COALESCE(vdsr2.cn, vdsr2.nm)), 'description', COALESCE(vdsr2.dsc, ''::text), 'aliases', datahub.\"formatAliases\"('datatable'::text, vdsr2.seqid), 'source', (((datahub.\"formatSource\"(ds2.seqid) - 'stewards'::text) - 'metadata'::text) - 'description'::text), 'archived',\n                CASE\n                    WHEN (vdsr2.archive_dt IS NULL) THEN false\n                    ELSE true\n                END, 'archive_date', vdsr2.archive_dt)) AS jsonb_agg\n           FROM ((datahub.ticket_data_item tdi2\n             LEFT JOIN datahub.datatable vdsr2 ON ((tdi2.datatable_seqid = vdsr2.seqid)))\n             LEFT JOIN datahub.datastore ds2 ON ((ds2.seqid = vdsr2.datastore_seqid)))\n          WHERE (tdi2.ticket_seqid = t.seqid)), '[]'::jsonb), 'items', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', vdsr3.seqid, 'stub', ((((COALESCE(ds3.stub, ds3.nm, ds3.seqid) || '.'::text) ||\n                CASE\n                    WHEN (length(TRIM(BOTH FROM COALESCE(t3.schema_nm, ''::text))) = 0) THEN lower(t3.nm)\n                    ELSE ((TRIM(BOTH FROM COALESCE(t3.schema_nm, ''::text)) || ':'::text) || t3.nm)\n                END) || '.'::text) || vdsr3.nm), 'type', COALESCE(\n                CASE\n                    WHEN (vdsr3.position_start IS NOT NULL) THEN (((((vdsr3.datatype || '('::text) || (vdsr3.position_start)::text) || ','::text) || (COALESCE((vdsr3.position_end)::integer, 0))::text) || ')'::text)\n                    WHEN ((vdsr3.position_start IS NULL) AND (vdsr3.position_end IS NOT NULL)) THEN (((((vdsr3.datatype || '('::text) || (COALESCE((vdsr3.position_start)::integer, 0))::text) || ','::text) || (vdsr3.position_end)::text) || ')'::text)\n                    WHEN ((vdsr3.length IS NOT NULL) AND (vdsr3.position_start IS NULL) AND (vdsr3.position_end IS NULL)) THEN (((vdsr3.datatype || '('::text) || (vdsr3.length)::text) || ')'::text)\n                    ELSE vdsr3.datatype\n                END, 'UNKNOWN'::text), 'name', jsonb_build_object('physical', vdsr3.nm, 'logical', COALESCE(vdsr3.cn, vdsr3.nm)), 'description', COALESCE(vdsr3.dsc, ''::text), 'aliases', datahub.\"formatAliases\"('dataitem'::text, vdsr3.seqid), 'source', (((datahub.\"formatSource\"(ds3.seqid) - 'stewards'::text) - 'metadata'::text) - 'description'::text), 'set', datahub.\"formatSet\"(vdsr3.seqid))) AS jsonb_agg\n           FROM (((datahub.ticket_data_item tdi3\n             LEFT JOIN datahub.datafield vdsr3 ON ((tdi3.datafield_seqid = vdsr3.seqid)))\n             LEFT JOIN datahub.datatable t3 ON ((t3.seqid = vdsr3.datatable_seqid)))\n             LEFT JOIN datahub.datastore ds3 ON ((ds3.seqid = t3.datastore_seqid)))\n          WHERE ((tdi3.ticket_seqid = t.seqid) AND (vdsr3.seqid IS NOT NULL))), '[]'::jsonb), 'queries', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', q.seqid, 'name', q.nm, 'description', COALESCE(q.dsc, ''::text))) AS jsonb_agg\n           FROM ((datahub.ticket_data_item tdi4\n             LEFT JOIN datahub.query q ON ((q.seqid = tdi4.query_seqid)))\n             LEFT JOIN datahub.vw_data_source_ref src ON ((src.id = q.datastore_seqid)))\n          WHERE ((tdi4.ticket_seqid = t.seqid) AND (tdi4.archive_dt IS NULL) AND (q.seqid IS NOT NULL))), '[]'::jsonb)) AS data\n   FROM datahub.ticket t\n  WHERE (t.archive_dt IS NULL);",
          "fqdn": "datahub.vw_linked_data"
        },
        "vw_login": {
          "name": {
            "logical": "vw_login",
            "physical": "vw_login"
          },
          "comment": "A simple login-centric view of the userscape.",
          "type": "VIEW",
          "items": {
            "assigned_rights": {
              "name": {
                "physical": "assigned_rights"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.assigned_rights"
            },
            "assigned_roles": {
              "name": {
                "physical": "assigned_roles"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.assigned_roles"
            },
            "associated_person": {
              "name": {
                "physical": "associated_person"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.associated_person"
            },
            "associated_profiles": {
              "name": {
                "physical": "associated_profiles"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.associated_profiles"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.create_date"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.description"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.enabled"
            },
            "expiration_date": {
              "name": {
                "physical": "expiration_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.expiration_date"
            },
            "group_memberships": {
              "name": {
                "physical": "group_memberships"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.group_memberships"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.id"
            },
            "ldap": {
              "name": {
                "physical": "ldap"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.ldap"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.metadata"
            },
            "username": {
              "name": {
                "physical": "username"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login.username"
            }
          },
          "relationships": [],
          "view_source": "SELECT l.seqid AS id,\n    l.username,\n    COALESCE(l.dsc, ''::text) AS description,\n        CASE\n            WHEN (l.expire_dt IS NULL) THEN l.enabled\n            WHEN (COALESCE(l.expire_dt, (CURRENT_DATE)::timestamp with time zone) \u003c CURRENT_DATE) THEN false\n            ELSE l.enabled\n        END AS enabled,\n    l.ldap_id AS ldap,\n    l.meta AS metadata,\n    l.record_create_dt AS create_date,\n    l.expire_dt AS expiration_date,\n    (( WITH cte2 AS (\n                 SELECT jsonb_agg(DISTINCT (jsonb_set(base.value, '{inherited_from}'::text[], ((base.value -\u003e 'assignment'::text) -\u003e 'inherited_from'::text)) - 'assignment'::text)) AS elems\n                   FROM ( SELECT jsonb_array_elements(( SELECT (COALESCE(jsonb_agg(jsonb_build_object('id', rur.seqid, 'name', rur.nm, 'description', COALESCE(rur.dsc, ''::text), 'protected', rur.protected, 'assignment', json_build_object('id', rura.seqid, 'create_date', rura.record_create_dt, 'inherited', false, 'inherited_from', '[]'::jsonb), 'metadata', rur.meta, 'create_date', rur.record_create_dt, 'inherited', false)), '[]'::jsonb) || COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', rur2.seqid, 'name', rur2.nm, 'description', COALESCE(rur2.dsc, ''::text), 'protected', rur2.protected, 'assignment', json_build_object('id', rura2.seqid, 'create_date', rura2.record_create_dt, 'inherited', true, 'inherited_from', ( SELECT jsonb_agg(ug3.nm) AS jsonb_agg\n     FROM (((datahub.group_member rrgm\n       LEFT JOIN datahub.user_role_assignment rura3 ON ((rura3.user_group_seqid = rrgm.user_group_seqid)))\n       LEFT JOIN datahub.user_role rur3 ON ((rur3.seqid = rura3.user_role_seqid)))\n       LEFT JOIN datahub.user_group ug3 ON ((ug3.seqid = rrgm.user_group_seqid)))\n    WHERE ((rrgm.seqid = rgm.seqid) AND (rur2.seqid = rur3.seqid)))), 'metadata', rur2.meta, 'create_date', rur2.record_create_dt)) AS jsonb_agg\n   FROM ((datahub.group_member rgm\n     LEFT JOIN datahub.user_role_assignment rura2 ON ((rura2.user_group_seqid = rgm.user_group_seqid)))\n     LEFT JOIN datahub.user_role rur2 ON ((rur2.seqid = rura2.user_role_seqid)))\n  WHERE (rgm.login_seqid = l.seqid)), '[]'::jsonb))\n                                   FROM (datahub.user_role_assignment rura\n                                     LEFT JOIN datahub.user_role rur ON ((rur.seqid = rura.user_role_seqid)))\n                                  WHERE (rura.login_seqid = l.seqid))) AS value) base\n                )\n         SELECT jsonb_agg((((rsq2.merged -\u003e 'data'::text) - 'inherited_from'::text) || jsonb_build_object('inherited_from', COALESCE(datahub.remove_dupes(((rsq2.merged -\u003e 'data'::text) -\u003e 'inherited_from'::text)), '[]'::jsonb)))) AS jsonb_agg\n           FROM ( SELECT rsq.id,\n                    jsonb_object_agg('data', (rsq.elem || jsonb_build_object('inherited', (jsonb_array_length((rsq.elem -\u003e 'inherited_from'::text)) \u003e 0)))) AS merged\n                   FROM ( SELECT (jsonb_array_elements(cte2.elems) -\u003e\u003e 'id'::text) AS id,\n                            jsonb_array_elements(cte2.elems) AS elem\n                           FROM cte2) rsq\n                  GROUP BY rsq.id) rsq2))::json AS assigned_roles,\n    ( SELECT json_agg(json_build_object('id', ug.seqid, 'name', ug.nm, 'description', COALESCE(ug.dsc, ''::text), 'protected', ug.protected, 'metadata', ug.meta, 'create_date', ug.record_create_dt, 'join_date', gm.record_create_dt, 'membership_id', gm.seqid)) AS json_agg\n           FROM (datahub.group_member gm\n             LEFT JOIN datahub.user_group ug ON ((ug.seqid = gm.user_group_seqid)))\n          WHERE (gm.login_seqid = l.seqid)) AS group_memberships,\n    ( SELECT json_agg(json_build_object('id', srr.seqid, 'name',\n                CASE\n                    WHEN (ra.force = 'd'::bpchar) THEN ('deny:'::text || srr.nm)\n                    WHEN (ra.force = 'a'::bpchar) THEN ('allow:'::text || srr.nm)\n                    ELSE srr.nm\n                END, 'description', COALESCE(srr.dsc, ''::text), 'resource', json_build_object('id', sr.seqid, 'name', sr.nm, 'description', COALESCE(sr.dsc, ''::text), 'create_date', sr.record_create_dt), 'create_date', srr.record_create_dt, 'assignment', json_build_object('id', ra.seqid))) AS json_agg\n           FROM ((datahub.right_assign ra\n             LEFT JOIN datahub.system_resource_right srr ON ((ra.right_seqid = srr.seqid)))\n             LEFT JOIN datahub.system_resource sr ON ((sr.seqid = srr.system_resource_seqid)))\n          WHERE (ra.login_seqid = l.seqid)) AS assigned_rights,\n    (( WITH cte AS (\n                 SELECT jsonb_agg(DISTINCT (jsonb_set(base.value, '{inherited_from}'::text[], ((base.value -\u003e 'assignment'::text) -\u003e 'inherited_from'::text)) - 'assignment'::text)) AS elems\n                   FROM ( SELECT jsonb_array_elements(\n                                CASE\n                                    WHEN (l.seqid IN ( SELECT uu.login_seqid\n                                       FROM datahub.user_role_assignment uu\n                                      WHERE ((uu.user_role_seqid = 'datahub_admin'::text) AND (uu.login_seqid IS NOT NULL)))) THEN ( SELECT jsonb_agg(json_build_object('id', p2_1.seqid, 'name', p2_1.nm, 'description', COALESCE(p2_1.dsc, ''::text), 'create_date', p2_1.record_create_dt, 'assignment', json_build_object('inherited', true, 'inherited_from', '[\"datahub_admin\"]'::jsonb))) AS jsonb_agg\n                                       FROM datahub.profile p2_1\n                                      WHERE (p2_1.archive_dt IS NULL))\n                                    ELSE ( SELECT (((COALESCE(jsonb_agg(json_build_object('id', p.seqid, 'name', p.nm, 'description', COALESCE(p.dsc, ''::text), 'create_date', p.record_create_dt, 'assignment', json_build_object('id', up.seqid, 'create_date', up.record_create_dt, 'inherited',\n CASE\n  WHEN (up.login_seqid IS NOT NULL) THEN false\n  ELSE true\n END, 'inherited_from',\n CASE\n  WHEN (up.login_seqid IS NOT NULL) THEN '[]'::jsonb\n  ELSE ( SELECT jsonb_agg(inherited.nm) AS jsonb_agg\n     FROM ( SELECT ug2.nm\n       FROM (datahub.group_member gm3\n         LEFT JOIN datahub.user_group ug2 ON ((ug2.seqid = gm3.user_group_seqid)))\n      WHERE (gm3.login_seqid = l.seqid)\n    UNION\n     SELECT ur2.nm\n       FROM (datahub.user_role ur2\n         LEFT JOIN datahub.user_role_assignment ura3 ON ((ura3.user_role_seqid = ur2.seqid)))\n      WHERE (ura3.login_seqid = l.seqid)) inherited)\n END))), '[]'::jsonb) || COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', p2_1.seqid, 'name', p2_1.nm, 'description', COALESCE(p2_1.dsc, ''::text), 'create_date', p2_1.record_create_dt, 'assignment', jsonb_build_object('id', up2.seqid, 'create_date', up2.record_create_dt, 'inherited',\n   CASE\n    WHEN (up2.login_seqid IS NOT NULL) THEN false\n    ELSE true\n   END, 'inherited_from', ( SELECT jsonb_agg(ur3.nm) AS jsonb_agg\n      FROM datahub.user_role ur3\n     WHERE (ur3.seqid = 'everyone'::text))))) AS jsonb_agg\n    FROM (datahub.user_profile up2\n      LEFT JOIN datahub.profile p2_1 ON ((p2_1.seqid = up2.profile_seqid)))\n   WHERE (up2.user_role_seqid = 'everyone'::text)), '[]'::jsonb)) || COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', xp.seqid, 'name', xp.nm, 'description', COALESCE(xp.dsc, ''::text), 'create_date', xp.record_create_dt, 'assignment', jsonb_build_object('id', xup.seqid, 'create_date', xup.record_create_dt, 'inherited',\n   CASE\n    WHEN (xup.login_seqid IS NOT NULL) THEN false\n    ELSE true\n   END, 'inherited_from', ( SELECT jsonb_agg(ur4.nm) AS jsonb_agg\n      FROM (((((datahub.group_member xgm2\n        LEFT JOIN datahub.user_role_assignment xura2 ON ((xura2.user_group_seqid = xgm2.user_group_seqid)))\n        LEFT JOIN datahub.user_profile xup2 ON ((xup2.user_role_seqid = xura2.user_role_seqid)))\n        LEFT JOIN datahub.profile xp2 ON ((xp2.seqid = xup2.profile_seqid)))\n        LEFT JOIN datahub.user_group xug2 ON ((xug2.seqid = xgm.user_group_seqid)))\n        LEFT JOIN datahub.user_role ur4 ON ((ur4.seqid = xura2.user_role_seqid)))\n     WHERE (xp2.seqid = xp.seqid))))) AS jsonb_agg\n    FROM (((datahub.group_member xgm\n      LEFT JOIN datahub.user_role_assignment xura ON ((xura.user_group_seqid = xgm.user_group_seqid)))\n      LEFT JOIN datahub.user_profile xup ON ((xup.user_role_seqid = xura.user_role_seqid)))\n      LEFT JOIN datahub.profile xp ON ((xp.seqid = xup.profile_seqid)))\n   WHERE (xgm.login_seqid = l.seqid)), '[]'::jsonb)) || COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', p3_1.seqid, 'name', p3_1.nm, 'description', COALESCE(p3_1.dsc, ''::text), 'create_date', p3_1.record_create_dt, 'assignment', jsonb_build_object('id', up3.seqid, 'create_date', up3.record_create_dt, 'inherited',\n   CASE\n    WHEN (up3.login_seqid IS NOT NULL) THEN false\n    ELSE true\n   END, 'inherited_from', ( SELECT jsonb_agg(xxug.nm) AS jsonb_agg\n      FROM (datahub.group_member yxgm2\n        LEFT JOIN datahub.user_group xxug ON ((xxug.seqid = yxgm2.user_group_seqid)))\n     WHERE (yxgm2.user_group_seqid = gm4.user_group_seqid))))) AS jsonb_agg\n    FROM ((datahub.user_profile up3\n      LEFT JOIN datahub.group_member gm4 ON ((gm4.user_group_seqid = up3.user_group_seqid)))\n      LEFT JOIN datahub.profile p3_1 ON ((p3_1.seqid = up3.profile_seqid)))\n   WHERE (gm4.login_seqid = l.seqid)), '[]'::jsonb))\n                                       FROM (datahub.user_profile up\n                                         LEFT JOIN datahub.profile p ON ((p.seqid = up.profile_seqid)))\n                                      WHERE ((p.archive_dt IS NULL) AND ((l.seqid = up.login_seqid) OR (up.user_group_seqid IN ( SELECT gm2.user_group_seqid\n    FROM datahub.group_member gm2\n   WHERE (gm2.login_seqid = l.seqid))) OR (up.user_role_seqid IN ( SELECT ura2.user_role_seqid\n    FROM datahub.user_role_assignment ura2\n   WHERE (ura2.login_seqid = l.seqid))))))\n                                END) AS value) base\n                )\n         SELECT jsonb_agg((((sq2.merged -\u003e 'data'::text) - 'inherited_from'::text) || jsonb_build_object('inherited_from', COALESCE(datahub.remove_dupes(((sq2.merged -\u003e 'data'::text) -\u003e 'inherited_from'::text)), '[]'::jsonb)))) AS jsonb_agg\n           FROM ( SELECT sq.id,\n                    jsonb_object_agg('data', (sq.elem || jsonb_build_object('inherited', (jsonb_array_length((sq.elem -\u003e 'inherited_from'::text)) \u003e 0)))) AS merged\n                   FROM ( SELECT (jsonb_array_elements(cte.elems) -\u003e\u003e 'id'::text) AS id,\n                            jsonb_array_elements(cte.elems) AS elem\n                           FROM cte) sq\n                  GROUP BY sq.id) sq2))::json AS associated_profiles,\n    ( SELECT json_build_object('id', p.seqid, 'supervisor_id', p.supervisor_seqid, 'givenName', p.gn, 'surname', p.sn, 'displayName', COALESCE(p.dn, ((p.gn || ' '::text) || p.sn)), 'title', COALESCE(p.title, 'Unknown'::text), 'email', p.eml, 'phone', p.phone, 'avatar_url', p.avatar_url, 'enabled', p.enabled, 'create_date', p.record_create_dt) AS json_build_object\n           FROM datahub.person p\n          WHERE (p.seqid = p2.seqid)) AS associated_person\n   FROM ((datahub.login l\n     LEFT JOIN datahub.person p2 ON ((p2.login_seqid = l.seqid)))\n     LEFT JOIN datahub.vw_person p3 ON ((p3.id = p2.seqid)))\n  WHERE ((l.archive_dt IS NULL) AND (TRIM(BOTH FROM l.username) \u003c\u003e ''::text) AND (p2.archive_dt IS NULL))\n  ORDER BY p2.sn, p2.gn, l.username;",
          "fqdn": "datahub.vw_login"
        },
        "vw_login_acl": {
          "name": {
            "logical": "vw_login_acl",
            "physical": "vw_login_acl"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "dn": {
              "name": {
                "physical": "dn"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.dn"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.enabled"
            },
            "expiration_date": {
              "name": {
                "physical": "expiration_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.expiration_date"
            },
            "expired": {
              "name": {
                "physical": "expired"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.expired"
            },
            "login_id": {
              "name": {
                "physical": "login_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.login_id"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.meta"
            },
            "username": {
              "name": {
                "physical": "username"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_login_acl.username"
            }
          },
          "relationships": [],
          "view_source": "SELECT DISTINCT tmp.dn,\n    tmp.meta,\n    login.seqid AS login_id,\n    login.username,\n    COALESCE(login.enabled, (COALESCE(login.expire_dt, (CURRENT_TIMESTAMP - '00:01:00'::interval)) \u003c CURRENT_TIMESTAMP)) AS enabled,\n    (COALESCE(login.expire_dt, (CURRENT_TIMESTAMP - '00:01:00'::interval)) \u003e CURRENT_TIMESTAMP) AS expired,\n    login.expire_dt AS expiration_date\n   FROM (( SELECT jsonb_build_object('roles', ( SELECT COALESCE(json_agg(jsonb_build_object('id', base.id, 'name', base.name)), '[]'::json) AS \"coalesce\"\n                   FROM ( SELECT vr.id,\n                            vr.name\n                           FROM (datahub.ldap_map m\n                             LEFT JOIN datahub.vw_user_role vr ON ((vr.id = m.role_seqid)))\n                          WHERE ((m.dn = lm.dn) AND (m.role_seqid IS NOT NULL))\n                        UNION\n                         SELECT ur.seqid AS id,\n                            ur.nm AS name\n                           FROM ((datahub.login l\n                             LEFT JOIN datahub.user_role_assignment ura ON ((ura.login_seqid = l.seqid)))\n                             LEFT JOIN datahub.user_role ur ON ((ura.user_role_seqid = ur.seqid)))\n                          WHERE (l.ldap_id = lm.dn)) base\n                  WHERE (base.id IS NOT NULL)), 'groups', ( SELECT COALESCE(json_agg(jsonb_build_object('id', gbase.id, 'name', gbase.name)), '[]'::json) AS \"coalesce\"\n                   FROM ( SELECT vg.id,\n                            vg.name\n                           FROM (datahub.ldap_map m\n                             LEFT JOIN datahub.vw_user_group vg ON ((vg.id = m.role_seqid)))\n                          WHERE ((m.dn = lm.dn) AND (m.group_seqid IS NOT NULL))\n                        UNION\n                         SELECT ug.seqid AS id,\n                            ug.nm AS name\n                           FROM ((datahub.login l\n                             LEFT JOIN datahub.group_member gm ON ((gm.login_seqid = l.seqid)))\n                             LEFT JOIN datahub.user_group ug ON ((gm.user_group_seqid = ug.seqid)))\n                          WHERE (l.ldap_id = lm.dn)) gbase\n                  WHERE (gbase.id IS NOT NULL)), 'profiles', ( SELECT COALESCE(json_agg(jsonb_build_object('id', pbase.id, 'name', pbase.name)), '[]'::json) AS \"coalesce\"\n                   FROM ( SELECT p.seqid AS id,\n                            p.nm AS name\n                           FROM (datahub.ldap_map m\n                             LEFT JOIN datahub.profile p ON ((p.seqid = m.profile_seqid)))\n                          WHERE ((m.dn = 'cn=admin,ou=roles,dc=example,dc=com'::text) AND (m.profile_seqid IS NOT NULL))\n                        UNION\n                         SELECT p2.seqid AS id,\n                            p2.nm AS name\n                           FROM ((datahub.login l\n                             LEFT JOIN datahub.user_profile up ON ((up.login_seqid = l.seqid)))\n                             LEFT JOIN datahub.profile p2 ON ((up.profile_seqid = p2.seqid)))\n                          WHERE ((l.ldap_id = lm.dn) AND (p2.archive_dt IS NULL))) pbase\n                  WHERE (pbase.id IS NOT NULL)), 'rights', ( SELECT COALESCE(json_agg(jsonb_build_object('id', ra.right_seqid, 'resource', sr.nm, 'name',\n                        CASE\n                            WHEN (ra.force = 'd'::bpchar) THEN ('deny:'::text || srr.nm)\n                            WHEN (ra.force = 'a'::bpchar) THEN ('allow:'::text || srr.nm)\n                            ELSE srr.nm\n                        END)), '[]'::json) AS \"coalesce\"\n                   FROM (((datahub.right_assign ra\n                     LEFT JOIN datahub.system_resource_right srr ON ((srr.seqid = ra.right_seqid)))\n                     LEFT JOIN datahub.system_resource sr ON ((sr.seqid = srr.system_resource_seqid)))\n                     LEFT JOIN datahub.login l ON ((ra.login_seqid = l.seqid)))\n                  WHERE ((l.seqid = ra.login_seqid) AND (l.ldap_id = lm.dn)))) AS meta,\n            lm.dn\n           FROM datahub.ldap_map lm) tmp\n     LEFT JOIN datahub.login ON ((login.ldap_id = tmp.dn)))\n  WHERE (((tmp.meta -\u003e 'roles'::text) IS NOT NULL) AND ((tmp.meta -\u003e 'roles'::text) \u003c\u003e 'null'::jsonb) AND ((tmp.meta -\u003e 'groups'::text) IS NOT NULL) AND ((tmp.meta -\u003e 'groups'::text) \u003c\u003e 'null'::jsonb));",
          "fqdn": "datahub.vw_login_acl"
        },
        "vw_person": {
          "name": {
            "logical": "vw_person",
            "physical": "vw_person"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "data": {
              "name": {
                "physical": "data"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.data"
            },
            "email": {
              "name": {
                "physical": "email"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.email"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.id"
            },
            "ldap": {
              "name": {
                "physical": "ldap"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.ldap"
            },
            "login_archive_dt": {
              "name": {
                "physical": "login_archive_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.login_archive_dt"
            },
            "login_id": {
              "name": {
                "physical": "login_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.login_id"
            },
            "person_archive_dt": {
              "name": {
                "physical": "person_archive_dt"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.person_archive_dt"
            },
            "username": {
              "name": {
                "physical": "username"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person.username"
            }
          },
          "relationships": [],
          "view_source": "SELECT p.seqid AS id,\n    p.eml AS email,\n    p.login_seqid AS login_id,\n    l.username,\n    l.ldap_id AS ldap,\n    jsonb_build_object('id', p.seqid, 'firstname', p.gn, 'lastname', p.sn, 'display', COALESCE(p.dn, NULLIF(TRIM(BOTH FROM ((p.gn || ' '::text) || p.sn)), ''::text), l.username), 'title', p.title, 'email', p.eml, 'phone', p.phone, 'enabled',\n        CASE\n            WHEN (p.archive_dt IS NOT NULL) THEN false\n            WHEN (l.enabled = false) THEN false\n            WHEN (l.expire_dt \u003c timezone('UTC'::text, now())) THEN false\n            ELSE p.enabled\n        END, 'image_href', p.avatar_url, 'metadata', p.meta, 'username', l.username, 'login_id', l.seqid) AS data,\n    l.archive_dt AS login_archive_dt,\n    p.archive_dt AS person_archive_dt\n   FROM (datahub.person p\n     LEFT JOIN datahub.login l ON ((l.seqid = p.login_seqid)));",
          "fqdn": "datahub.vw_person"
        },
        "vw_person_impact": {
          "name": {
            "logical": "vw_person_impact",
            "physical": "vw_person_impact"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "impact": {
              "name": {
                "physical": "impact"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person_impact.impact"
            },
            "ldap_id": {
              "name": {
                "physical": "ldap_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person_impact.ldap_id"
            },
            "login_id": {
              "name": {
                "physical": "login_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person_impact.login_id"
            },
            "person_id": {
              "name": {
                "physical": "person_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person_impact.person_id"
            },
            "username": {
              "name": {
                "physical": "username"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_person_impact.username"
            }
          },
          "relationships": [],
          "view_source": "SELECT p.seqid AS person_id,\n    l.seqid AS login_id,\n    l.ldap_id,\n    l.username,\n    jsonb_build_object('stewardships', ( SELECT jsonb_agg(DISTINCT jsonb_build_object('source', jsonb_build_object('id', s.datastore_seqid, 'name', jsonb_build_object('physical', ds.nm, 'logical', COALESCE(ds.cn, ds.nm))), 'role', s.role, 'create_date', s.record_create_dt)) AS jsonb_agg\n           FROM (datahub.datastore_person s\n             LEFT JOIN datahub.datastore ds ON ((ds.seqid = s.datastore_seqid)))\n          WHERE ((s.archive_dt IS NULL) AND (ds.archive_dt IS NULL))), 'tickets', ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', t.seqid, 'creator', (t.creator_seqid = p.seqid), 'assignee', (t.assignee_seqid = p.seqid), 'participant', true, 'summary', t.summary)) AS jsonb_agg\n           FROM datahub.ticket t\n          WHERE ((t.archive_dt IS NULL) AND ((t.creator_seqid = p.seqid) OR (t.assignee_seqid = p.seqid) OR (t.seqid IN ( SELECT ta.ticket_seqid\n                   FROM datahub.ticket_activity ta\n                  WHERE ((ta.creator_seqid = p.seqid) AND (ta.archive_dt IS NULL))))))), 'ticket_agencies', ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', tt.seqid, 'name', tt.nm, 'description', COALESCE(tt.dsc, ''::text))) AS jsonb_agg\n           FROM (datahub.ticket_type_agent tta\n             LEFT JOIN datahub.ticket_type tt ON ((tt.seqid = tta.ticket_type_seqid)))\n          WHERE ((tta.archive_dt IS NULL) AND (tta.person_seqid = p.seqid))), 'changelog', ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', h.seqid, 'change', h.change, 'date', h.record_create_dt, 'type', h.type, 'reference', h.reference)) AS jsonb_agg\n           FROM datahub.vw_history h\n          WHERE (h.blame = l.username))) AS impact\n   FROM (datahub.person p\n     LEFT JOIN datahub.login l ON ((p.login_seqid = l.seqid)));",
          "fqdn": "datahub.vw_person_impact"
        },
        "vw_status": {
          "name": {
            "logical": "vw_status",
            "physical": "vw_status"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "admin": {
              "name": {
                "physical": "admin"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.admin"
            },
            "command": {
              "name": {
                "physical": "command"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.command"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.create_date"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.description"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.enabled"
            },
            "expiration_date": {
              "name": {
                "physical": "expiration_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.expiration_date"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.id"
            },
            "manual": {
              "name": {
                "physical": "manual"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.manual"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.name"
            },
            "schedule": {
              "name": {
                "physical": "schedule"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.schedule"
            },
            "status": {
              "name": {
                "physical": "status"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_status.status"
            }
          },
          "relationships": [],
          "view_source": "SELECT sys.seqid AS id,\n    sys.nm AS name,\n    COALESCE(sys.dsc, ''::text) AS description,\n    ( SELECT jsonb_agg(y.x) AS jsonb_agg\n           FROM ( SELECT jsonb_build_object('id', s.seqid, 'code', ( SELECT jsonb_build_object('id', sc.cd, 'description', COALESCE(sc.dsc, ''::text), 'label', sc.label, 'is_problem', sc.problem, 'warning', sc.warning, 'color', sc.color) AS jsonb_build_object\n                           FROM datahub.status_cd sc\n                          WHERE (sc.cd = s.cd)), 'label', s.label, 'message', s.msg, 'create_date', s.record_create_dt) AS x\n                   FROM datahub.status s\n                  WHERE ((s.system_seqid = sys.seqid) AND (s.archive_dt IS NULL))\n                  GROUP BY s.seqid, s.record_create_dt\n                  ORDER BY s.record_create_dt DESC) y) AS status,\n    ( SELECT p.data\n           FROM (datahub.vw_person p\n             LEFT JOIN datahub.login l ON ((l.seqid = p.login_id)))\n          WHERE (p.id = sys.person_seqid)) AS admin,\n    sys.cmd AS command,\n    sys.cron_sched AS schedule,\n    sys.enabled,\n    sys.expire_dt AS expiration_date,\n    sys.record_create_dt AS create_date,\n    sys.manual\n   FROM datahub.system sys\n  WHERE (sys.archive_dt IS NULL);",
          "fqdn": "datahub.vw_status"
        },
        "vw_system_resource": {
          "name": {
            "logical": "vw_system_resource",
            "physical": "vw_system_resource"
          },
          "comment": "A simplified view of system resources and associated rights.",
          "type": "VIEW",
          "items": {
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_system_resource.dsc"
            },
            "fullrights": {
              "name": {
                "physical": "fullrights"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_system_resource.fullrights"
            },
            "resource": {
              "name": {
                "physical": "resource"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_system_resource.resource"
            },
            "rights": {
              "name": {
                "physical": "rights"
              },
              "comment": "",
              "type": "_text",
              "udt_type": "_text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_system_resource.rights"
            }
          },
          "relationships": [],
          "view_source": "SELECT sr.nm AS resource,\n    sr.dsc,\n    ( SELECT array_agg(srr.nm) AS array_agg\n           FROM datahub.system_resource_right srr\n          WHERE (srr.system_resource_seqid = sr.seqid)) AS rights,\n    ( SELECT jsonb_agg(jsonb_build_object('id', srr2.seqid, 'name', srr2.nm, 'description', COALESCE(srr2.dsc, ''::text))) AS jsonb_agg\n           FROM datahub.system_resource_right srr2\n          WHERE (srr2.system_resource_seqid = sr.seqid)) AS fullrights\n   FROM datahub.system_resource sr;",
          "fqdn": "datahub.vw_system_resource"
        },
        "vw_tag": {
          "name": {
            "logical": "vw_tag",
            "physical": "vw_tag"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "color": {
              "name": {
                "physical": "color"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.color"
            },
            "dataitem_id": {
              "name": {
                "physical": "dataitem_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.dataitem_id"
            },
            "dataset_id": {
              "name": {
                "physical": "dataset_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.dataset_id"
            },
            "datasource_id": {
              "name": {
                "physical": "datasource_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.datasource_id"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.id"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.metadata"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.name"
            },
            "query_id": {
              "name": {
                "physical": "query_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag.query_id"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.nm AS name,\n    COALESCE(t.dsc, ''::text) AS description,\n    COALESCE(t.color, 'default'::text) AS color,\n    ta.tag_seqid AS id,\n    ta.datastore_seqid AS datasource_id,\n    ta.datatable_seqid AS dataset_id,\n    ta.datafield_seqid AS dataitem_id,\n    ta.query_seqid AS query_id,\n        CASE\n            WHEN (ta.datastore_seqid IS NOT NULL) THEN json_build_object('type', 'source', 'id', ta.datastore_seqid)\n            WHEN (ta.datatable_seqid IS NOT NULL) THEN json_build_object('type', 'set', 'id', ta.datatable_seqid)\n            WHEN (ta.datafield_seqid IS NOT NULL) THEN json_build_object('type', 'item', 'id', ta.datafield_seqid)\n            WHEN (ta.query_seqid IS NOT NULL) THEN json_build_object('type', 'query', 'id', ta.query_seqid)\n            ELSE NULL::json\n        END AS metadata\n   FROM (datahub.tag_assc ta\n     LEFT JOIN datahub.tag t ON ((t.seqid = ta.tag_seqid)))\n  WHERE ((ta.archive_dt IS NULL) AND (t.archive_dt IS NULL));",
          "fqdn": "datahub.vw_tag"
        },
        "vw_tag_ref": {
          "name": {
            "logical": "vw_tag_ref",
            "physical": "vw_tag_ref"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "data": {
              "name": {
                "physical": "data"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag_ref.data"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag_ref.id"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_tag_ref.name"
            }
          },
          "relationships": [],
          "view_source": "SELECT tag.seqid AS id,\n    tag.nm AS name,\n    jsonb_build_object('id', tag.seqid, 'name', tag.nm, 'description', COALESCE(tag.dsc, ''::text), 'color', COALESCE(tag.color, 'default'::text), 'create_date', tag.record_create_dt) AS data\n   FROM datahub.tag\n  WHERE (tag.archive_dt IS NULL);",
          "fqdn": "datahub.vw_tag_ref"
        },
        "vw_thesaurus": {
          "name": {
            "logical": "vw_thesaurus",
            "physical": "vw_thesaurus"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "alias_id": {
              "name": {
                "physical": "alias_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.alias_id"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.create_date"
            },
            "creator": {
              "name": {
                "physical": "creator"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.creator"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.id"
            },
            "item_id": {
              "name": {
                "physical": "item_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.item_id"
            },
            "item_name": {
              "name": {
                "physical": "item_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.item_name"
            },
            "logical": {
              "name": {
                "physical": "logical"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.logical"
            },
            "logical_description": {
              "name": {
                "physical": "logical_description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.logical_description"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.name"
            },
            "physical": {
              "name": {
                "physical": "physical"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.physical"
            },
            "profile_id": {
              "name": {
                "physical": "profile_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.profile_id"
            },
            "profile_name": {
              "name": {
                "physical": "profile_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.profile_name"
            },
            "set_id": {
              "name": {
                "physical": "set_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.set_id"
            },
            "set_name": {
              "name": {
                "physical": "set_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.set_name"
            },
            "source_id": {
              "name": {
                "physical": "source_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.source_id"
            },
            "source_name": {
              "name": {
                "physical": "source_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.source_name"
            },
            "stub": {
              "name": {
                "physical": "stub"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.stub"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_thesaurus.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT x.id,\n    x.physical,\n    x.logical,\n    x.name,\n    x.description,\n    x.logical_description,\n    x.profile_name,\n    x.profile_id,\n    x.source_id,\n    x.set_id,\n    x.item_id,\n    x.alias_id,\n    x.type,\n    x.create_date,\n    x.source_name,\n    x.set_name,\n    x.item_name,\n    x.stub,\n    ( SELECT json_build_object('id', per.seqid, 'firstname', per.gn, 'lastname', per.sn, 'title', per.title, 'email', per.eml, 'phone', per.phone, 'avatar_href', per.avatar_url, 'enabled', per.enabled, 'active',\n                CASE\n                    WHEN (per.archive_dt IS NULL) THEN true\n                    ELSE false\n                END) AS json_build_object\n           FROM datahub.person per\n          WHERE (per.seqid = x.creator_id)) AS creator\n   FROM ( SELECT sources.id,\n            sources.physical,\n            sources.logical,\n            COALESCE(a.nm, sources.value) AS name,\n            COALESCE(a.dsc, sources.logical_description, ''::text) AS description,\n            sources.logical_description,\n            sources.profile_name,\n            sources.profile_id,\n            sources.source_id,\n            sources.set_id,\n            sources.item_id,\n            sources.type,\n            COALESCE(a.record_create_dt, sources.create_date) AS create_date,\n            a.creator_seqid AS creator_id,\n            sources.physical AS source_name,\n            NULL::text AS set_name,\n            NULL::text AS item_name,\n            sources.physical AS stub,\n            a.seqid AS alias_id\n           FROM (( SELECT e.seqid AS id,\n                    e.nm AS physical,\n                    COALESCE(e.cn, e.nm) AS logical,\n                    COALESCE(e.cn, e.nm) AS value,\n                    p.nm AS profile_name,\n                    p.seqid AS profile_id,\n                    e.seqid AS source_id,\n                    NULL::text AS set_id,\n                    NULL::text AS item_id,\n                    'source'::text AS type,\n                    COALESCE(e.dsc, ''::text) AS logical_description,\n                    e.record_create_dt AS create_date\n                   FROM datahub.datastore e,\n                    datahub.profile p\n                UNION\n                 SELECT e.seqid AS id,\n                    e.nm AS physical,\n                    COALESCE(e.cn, e.nm) AS logical,\n                    COALESCE(e.cn, e.nm) AS value,\n                    'Logical'::text AS profile_name,\n                    NULL::text AS profile_id,\n                    e.seqid AS source_id,\n                    NULL::text AS set_id,\n                    NULL::text AS item_id,\n                    'source'::text AS type,\n                    COALESCE(e.dsc, ''::text) AS logical_description,\n                    e.record_create_dt AS create_date\n                   FROM datahub.datastore e) sources\n             LEFT JOIN datahub.alias a ON (((a.datastore_seqid = sources.id) AND (a.profile_seqid = sources.profile_id))))\n        UNION\n         SELECT sets.id,\n            sets.physical,\n            sets.logical,\n            COALESCE(a.nm, sets.value) AS name,\n            COALESCE(a.dsc, sets.logical_description, ''::text) AS description,\n            sets.logical_description,\n            sets.profile_name,\n            sets.profile_id,\n            sets.source_id,\n            sets.set_id,\n            sets.item_id,\n            sets.type,\n            COALESCE(a.record_create_dt, sets.create_date) AS create_date,\n            a.creator_seqid AS creator_id,\n            sets.source_name,\n            sets.set_name,\n            NULL::text AS item_name,\n            sets.stub,\n            a.seqid AS alias_id\n           FROM (( SELECT e.seqid AS id,\n                    e.nm AS physical,\n                    COALESCE(e.cn, e.nm) AS logical,\n                    COALESCE(e.cn, e.nm) AS value,\n                    p.nm AS profile_name,\n                    p.seqid AS profile_id,\n                    e.datastore_seqid AS source_id,\n                    e.seqid AS set_id,\n                    NULL::text AS item_id,\n                    'set'::text AS type,\n                    COALESCE(e.dsc, ''::text) AS logical_description,\n                    e.record_create_dt AS create_date,\n                    ds.nm AS source_name,\n                    e.nm AS set_name,\n                    NULL::text AS item_name,\n                    ((ds.nm || '.'::text) || e.nm) AS stub\n                   FROM datahub.datatable e,\n                    datahub.profile p,\n                    datahub.datastore ds\n                  WHERE ((e.archive_dt IS NULL) AND (p.archive_dt IS NULL) AND (ds.archive_dt IS NULL) AND (ds.seqid = e.datastore_seqid))\n                UNION\n                 SELECT e.seqid AS id,\n                    e.nm AS physical,\n                    COALESCE(e.cn, e.nm) AS logical,\n                    COALESCE(e.cn, e.nm) AS value,\n                    'Logical'::text AS profile_name,\n                    NULL::text AS profile_id,\n                    e.datastore_seqid AS source_id,\n                    e.seqid AS set_id,\n                    NULL::text AS item_id,\n                    'set'::text AS type,\n                    COALESCE(e.dsc, ''::text) AS logical_description,\n                    e.record_create_dt AS create_date,\n                    ds.nm AS source_name,\n                    e.nm AS set_name,\n                    NULL::text AS item_name,\n                    ((ds.nm || '.'::text) || e.nm) AS stub\n                   FROM datahub.datatable e,\n                    datahub.datastore ds\n                  WHERE ((e.archive_dt IS NULL) AND (ds.archive_dt IS NULL) AND (ds.seqid = e.datastore_seqid))) sets\n             LEFT JOIN datahub.alias a ON (((a.datatable_seqid = sets.id) AND (a.profile_seqid = sets.profile_id))))\n          WHERE (a.archive_dt IS NULL)\n        UNION\n         SELECT items.id,\n            items.physical,\n            items.logical,\n            COALESCE(a.nm, items.value) AS name,\n            COALESCE(a.dsc, items.logical_description, ''::text) AS description,\n            items.logical_description,\n            items.profile_name,\n            items.profile_id,\n            items.source_id,\n            items.set_id,\n            items.item_id,\n            items.type,\n            COALESCE(a.record_create_dt, items.create_date) AS create_date,\n            a.creator_seqid AS creator_id,\n            items.source_name,\n            items.set_name,\n            items.item_name,\n            items.stub,\n            a.seqid AS alias_id\n           FROM (( SELECT e.seqid AS id,\n                    e.nm AS physical,\n                    COALESCE(e.cn, e.nm) AS logical,\n                    COALESCE(e.cn, e.nm) AS value,\n                    p.nm AS profile_name,\n                    p.seqid AS profile_id,\n                    t.datastore_seqid AS source_id,\n                    t.seqid AS set_id,\n                    e.seqid AS item_id,\n                    'item'::text AS type,\n                    COALESCE(e.dsc, ''::text) AS logical_description,\n                    e.record_create_dt AS create_date,\n                    ds.nm AS source_name,\n                    t.nm AS set_name,\n                    e.nm AS item_name,\n                    ((((ds.nm || '.'::text) || t.nm) || '.'::text) || e.nm) AS stub\n                   FROM datahub.datafield e,\n                    datahub.profile p,\n                    datahub.datatable t,\n                    datahub.datastore ds\n                  WHERE ((e.datatable_seqid = t.seqid) AND (e.archive_dt IS NULL) AND (p.archive_dt IS NULL) AND (t.archive_dt IS NULL) AND (ds.archive_dt IS NULL) AND (ds.seqid = t.datastore_seqid) AND (t.seqid = e.datatable_seqid))\n                UNION\n                 SELECT e.seqid AS id,\n                    e.nm AS physical,\n                    COALESCE(e.cn, e.nm) AS logical,\n                    COALESCE(e.cn, e.nm) AS value,\n                    'Logical'::text AS profile_name,\n                    NULL::text AS profile_id,\n                    t.datastore_seqid AS source_id,\n                    t.seqid AS set_id,\n                    e.seqid AS item_id,\n                    'item'::text AS type,\n                    COALESCE(e.dsc, ''::text) AS logical_description,\n                    e.record_create_dt AS create_date,\n                    ds.nm AS source_name,\n                    t.nm AS set_name,\n                    e.nm AS item_name,\n                    ((((ds.nm || '.'::text) || t.nm) || '.'::text) || e.nm) AS stub\n                   FROM datahub.datafield e,\n                    datahub.datatable t,\n                    datahub.datastore ds\n                  WHERE ((e.datatable_seqid = t.seqid) AND (e.archive_dt IS NULL) AND (t.archive_dt IS NULL) AND (ds.archive_dt IS NULL) AND (ds.seqid = t.datastore_seqid) AND (t.seqid = e.datatable_seqid))) items\n             LEFT JOIN datahub.alias a ON (((a.datatable_seqid = items.id) AND (a.profile_seqid = items.profile_id))))\n          WHERE (a.archive_dt IS NULL)) x\n  ORDER BY x.profile_id, x.source_id, x.type DESC, x.name, x.logical, x.physical;",
          "fqdn": "datahub.vw_thesaurus"
        },
        "vw_ticket": {
          "name": {
            "logical": "vw_ticket",
            "physical": "vw_ticket"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "actual_time": {
              "name": {
                "physical": "actual_time"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.actual_time"
            },
            "assigned_by": {
              "name": {
                "physical": "assigned_by"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.assigned_by"
            },
            "assignee": {
              "name": {
                "physical": "assignee"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.assignee"
            },
            "comments": {
              "name": {
                "physical": "comments"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.comments"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.create_date"
            },
            "creator": {
              "name": {
                "physical": "creator"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.creator"
            },
            "draft": {
              "name": {
                "physical": "draft"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.draft"
            },
            "due_date": {
              "name": {
                "physical": "due_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.due_date"
            },
            "estimated_time": {
              "name": {
                "physical": "estimated_time"
              },
              "comment": "",
              "type": "int8",
              "udt_type": "int8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.estimated_time"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.id"
            },
            "is_resolved": {
              "name": {
                "physical": "is_resolved"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.is_resolved"
            },
            "last_update_date": {
              "name": {
                "physical": "last_update_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.last_update_date"
            },
            "linked_data": {
              "name": {
                "physical": "linked_data"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.linked_data"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.metadata"
            },
            "public": {
              "name": {
                "physical": "public"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.public"
            },
            "resolution_date": {
              "name": {
                "physical": "resolution_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.resolution_date"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.search"
            },
            "sla": {
              "name": {
                "physical": "sla"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.sla"
            },
            "sla_days_remaining": {
              "name": {
                "physical": "sla_days_remaining"
              },
              "comment": "",
              "type": "float8",
              "udt_type": "float8",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.sla_days_remaining"
            },
            "status": {
              "name": {
                "physical": "status"
              },
              "comment": "",
              "type": "json",
              "udt_type": "json",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.status"
            },
            "subscribers": {
              "name": {
                "physical": "subscribers"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.subscribers"
            },
            "summary": {
              "name": {
                "physical": "summary"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.summary"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.seqid AS id,\n    t.draft,\n    t.summary,\n    t.last_update_dt AS last_update_date,\n    t.due_dt AS due_date,\n        CASE\n            WHEN (t.resolution_ticket_activity_seqid IS NULL) THEN NULL::timestamp with time zone\n            ELSE t.resolution_dt\n        END AS resolution_date,\n    t.time_estimate_min AS estimated_time,\n    t.time_actual_min AS actual_time,\n    t.public,\n    t.meta AS metadata,\n    t.record_create_dt AS create_date,\n    pc.data AS creator,\n        CASE\n            WHEN (pa.id IS NULL) THEN NULL::jsonb\n            ELSE pa.data\n        END AS assignee,\n        CASE\n            WHEN (pa.id IS NULL) THEN NULL::jsonb\n            ELSE pab.data\n        END AS assigned_by,\n    json_build_object('id', s.seqid, 'name', s.nm, 'description', COALESCE(s.dsc, ''::text), 'closed', s.closed) AS status,\n    jsonb_build_object('id', sla.seqid, 'name', sla.nm, 'sla', sla.sla, 'days_remaining', jsonb_build_object('working', ( SELECT\n                CASE\n                    WHEN (sla.seqid = 'NONE'::text) THEN NULL::integer\n                    ELSE datahub.\"getRemainingSlaDays\"(t.record_create_dt, (sla.sla)::integer)\n                END AS \"getRemainingSlaDays\"), 'calendar',\n        CASE\n            WHEN (sla.seqid \u003c\u003e 'NONE'::text) THEN date_part('day'::text, ((t.record_create_dt + ('1 day'::interval * ((sla.sla - 1))::double precision)) - CURRENT_TIMESTAMP))\n            ELSE NULL::double precision\n        END)) AS sla,\n    jsonb_build_object('id', tp.seqid, 'name', tp.nm, 'description', COALESCE(tp.dsc, ''::text)) AS type,\n    ( SELECT vw_linked_data.data\n           FROM datahub.vw_linked_data\n          WHERE (vw_linked_data.ticket_id = t.seqid)) AS linked_data,\n    ( SELECT jsonb_agg(cmeta.meta) AS jsonb_agg\n           FROM ( SELECT jsonb_array_elements(jsonb_agg(((((row_to_json(cta.*))::jsonb - 'search'::text) - 'summary'::text) - 'ticket_id'::text))) AS meta\n                   FROM datahub.vw_ticket_activity cta\n                  GROUP BY cta.ticket_id, cta.create_date\n                 HAVING (cta.ticket_id = t.seqid)\n                  ORDER BY cta.create_date) cmeta) AS comments,\n    ( SELECT jsonb_agg(jsonb_build_object('person', ( SELECT psub.data\n                   FROM datahub.vw_person psub\n                  WHERE (psub.id = ts.person_seqid)), 'create_date', ts.record_create_dt)) AS jsonb_agg\n           FROM datahub.ticket_subscriber ts\n          WHERE (ts.ticket_seqid = t.seqid)) AS subscribers,\n    (t.search || to_tsvector('english'::regconfig, COALESCE(TRIM(BOTH FROM array_to_string(( SELECT array_agg(DISTINCT tl.nm) AS array_agg\n           FROM (datahub.ticket_label tl\n             LEFT JOIN datahub.ticket_label_assc tla ON ((tla.ticket_label_seqid = tl.seqid)))\n          WHERE (tla.ticket_seqid = t.seqid)), ' '::text)), ''::text))) AS search,\n    NULL::double precision AS sla_days_remaining,\n        CASE\n            WHEN (t.resolution_ticket_activity_seqid IS NULL) THEN false\n            ELSE true\n        END AS is_resolved\n   FROM ((((((datahub.ticket t\n     LEFT JOIN datahub.vw_person pc ON ((pc.id = t.creator_seqid)))\n     LEFT JOIN datahub.vw_person pa ON ((pa.id = t.assignee_seqid)))\n     LEFT JOIN datahub.vw_person pab ON ((pab.id = t.assigned_by_seqid)))\n     LEFT JOIN datahub.ticket_status s ON ((s.seqid = t.ticket_status_seqid)))\n     LEFT JOIN datahub.ticket_sla sla ON ((sla.seqid = t.ticket_sla_seqid)))\n     LEFT JOIN datahub.ticket_type tp ON ((tp.seqid = t.ticket_type_seqid)))\n  WHERE (t.archive_dt IS NULL);",
          "fqdn": "datahub.vw_ticket"
        },
        "vw_ticket_activity": {
          "name": {
            "logical": "vw_ticket_activity",
            "physical": "vw_ticket_activity"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "attachments": {
              "name": {
                "physical": "attachments"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.attachments"
            },
            "comment": {
              "name": {
                "physical": "comment"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.comment"
            },
            "common_id": {
              "name": {
                "physical": "common_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.common_id"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.create_date"
            },
            "creator": {
              "name": {
                "physical": "creator"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.creator"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.id"
            },
            "is_resolution": {
              "name": {
                "physical": "is_resolution"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.is_resolution"
            },
            "last_update_date": {
              "name": {
                "physical": "last_update_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.last_update_date"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.metadata"
            },
            "pins": {
              "name": {
                "physical": "pins"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.pins"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.search"
            },
            "summary": {
              "name": {
                "physical": "summary"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.summary"
            },
            "ticket_id": {
              "name": {
                "physical": "ticket_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_activity.ticket_id"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.seqid AS ticket_id,\n    t.summary,\n    ta.seqid AS id,\n    ta.common_id,\n    ta.msg AS comment,\n    ta.meta AS metadata,\n    ta.search,\n        CASE\n            WHEN (t.resolution_ticket_activity_seqid = ta.seqid) THEN true\n            ELSE false\n        END AS is_resolution,\n    ta.last_update_dt AS last_update_date,\n    ta.record_create_dt AS create_date,\n    ( SELECT pc.data\n           FROM datahub.vw_person pc\n          WHERE (pc.id = ta.creator_seqid)) AS creator,\n    ( SELECT jsonb_agg(jsonb_build_object('id', att.seqid, 'uri', att.uri, 'name', att.nm, 'description', COALESCE(att.dsc, ''::text), 'metadata', att.meta, 'create_date', att.record_create_dt, 'creator', ( SELECT p4.data\n                   FROM datahub.vw_person p4\n                  WHERE (p4.id = att.creator_seqid)), 'last_update_date', att.last_update_dt)) AS jsonb_agg\n           FROM datahub.ticket_attachment att\n          WHERE (att.ticket_activity_seqid = ta.seqid)) AS attachments,\n    ( SELECT vw_ticket_pin.data\n           FROM datahub.vw_ticket_pin\n          WHERE (vw_ticket_pin.ticket_activity_id = ta.seqid)) AS pins\n   FROM (datahub.ticket_activity ta\n     LEFT JOIN datahub.ticket t ON ((t.seqid = ta.ticket_seqid)))\n  WHERE ((ta.archive_dt IS NULL) AND (t.archive_dt IS NULL));",
          "fqdn": "datahub.vw_ticket_activity"
        },
        "vw_ticket_pin": {
          "name": {
            "logical": "vw_ticket_pin",
            "physical": "vw_ticket_pin"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "data": {
              "name": {
                "physical": "data"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_pin.data"
            },
            "ticket_activity_id": {
              "name": {
                "physical": "ticket_activity_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_pin.ticket_activity_id"
            },
            "ticket_id": {
              "name": {
                "physical": "ticket_id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_pin.ticket_id"
            }
          },
          "relationships": [],
          "view_source": "SELECT ta.seqid AS ticket_activity_id,\n    ta.ticket_seqid AS ticket_id,\n    jsonb_build_object('sources', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', d1.id, 'name', d1.name, 'description', d1.description, 'aliases', d1.aliases)) AS jsonb_agg\n           FROM (datahub.ticket_pin p1\n             LEFT JOIN datahub.vw_data_source_ref d1 ON ((d1.id = p1.datastore_seqid)))\n          WHERE ((p1.ticket_activity_seqid = ta.seqid) AND (p1.datastore_seqid IS NOT NULL))), '[]'::jsonb), 'sets', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', d2.id, 'name', d2.name, 'description', d2.description, 'aliases', d2.aliases)) AS jsonb_agg\n           FROM (datahub.ticket_pin p2\n             LEFT JOIN datahub.vw_data_set_ref d2 ON ((d2.id = p2.datatable_seqid)))\n          WHERE ((p2.ticket_activity_seqid = ta.seqid) AND (p2.datatable_seqid IS NOT NULL))), '[]'::jsonb), 'items', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', d3.id, 'name', d3.name, 'description', d3.description, 'aliases', d3.aliases)) AS jsonb_agg\n           FROM (datahub.ticket_pin p3\n             LEFT JOIN datahub.vw_data_item_ref d3 ON ((d3.id = p3.datafield_seqid)))\n          WHERE ((p3.ticket_activity_seqid = ta.seqid) AND (p3.datafield_seqid IS NOT NULL))), '[]'::jsonb), 'queries', COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', d4.seqid, 'name', d4.nm, 'description', COALESCE(d4.dsc, ''::text))) AS jsonb_agg\n           FROM (datahub.ticket_pin p4\n             LEFT JOIN datahub.query d4 ON ((d4.seqid = p4.query_seqid)))\n          WHERE ((p4.ticket_activity_seqid = ta.seqid) AND (d4.archive_dt IS NULL) AND (p4.query_seqid IS NOT NULL))), '[]'::jsonb)) AS data\n   FROM datahub.ticket_activity ta\n  WHERE (ta.archive_dt IS NULL);",
          "fqdn": "datahub.vw_ticket_pin"
        },
        "vw_ticket_search": {
          "name": {
            "logical": "vw_ticket_search",
            "physical": "vw_ticket_search"
          },
          "comment": "",
          "type": "VIEW",
          "items": {
            "assignee": {
              "name": {
                "physical": "assignee"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.assignee"
            },
            "assignee_name": {
              "name": {
                "physical": "assignee_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.assignee_name"
            },
            "comment": {
              "name": {
                "physical": "comment"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.comment"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.create_date"
            },
            "creator": {
              "name": {
                "physical": "creator"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.creator"
            },
            "creator_name": {
              "name": {
                "physical": "creator_name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.creator_name"
            },
            "fuzzy_search": {
              "name": {
                "physical": "fuzzy_search"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.fuzzy_search"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.id"
            },
            "search": {
              "name": {
                "physical": "search"
              },
              "comment": "",
              "type": "tsvector",
              "udt_type": "tsvector",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.search"
            },
            "ticket": {
              "name": {
                "physical": "ticket"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.ticket"
            },
            "ticket_sla": {
              "name": {
                "physical": "ticket_sla"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.ticket_sla"
            },
            "ticket_status": {
              "name": {
                "physical": "ticket_status"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.ticket_status"
            },
            "ticket_type": {
              "name": {
                "physical": "ticket_type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.ticket_type"
            },
            "type": {
              "name": {
                "physical": "type"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_ticket_search.type"
            }
          },
          "relationships": [],
          "view_source": "SELECT t.id,\n    ((((row_to_json(t.*))::jsonb - 'search'::text) - 'comments'::text) - 'linked_data'::text) AS ticket,\n    t.search,\n    NULL::jsonb AS comment,\n    t.summary AS fuzzy_search,\n    'ticket'::text AS type,\n    t.create_date,\n    (t.sla -\u003e\u003e 'id'::text) AS ticket_sla,\n    (t.status -\u003e\u003e 'id'::text) AS ticket_status,\n    (t.type -\u003e\u003e 'id'::text) AS ticket_type,\n    (t.creator -\u003e\u003e 'username'::text) AS creator,\n    (t.creator -\u003e\u003e 'display'::text) AS creator_name,\n    (t.assignee -\u003e\u003e 'username'::text) AS assignee,\n    (t.assignee -\u003e\u003e 'display'::text) AS assignee_name\n   FROM datahub.vw_ticket t\nUNION\n SELECT ta.common_id AS id,\n    ((((row_to_json(t2.*))::jsonb - 'search'::text) - 'comments'::text) - 'linked_data'::text) AS ticket,\n    ta.search,\n    ((((((((row_to_json(ta.*))::jsonb - 'search'::text) - 'common_id'::text) - 'pins'::text) - 'attachments'::text) - 'ticket_id'::text) - 'summary'::text) || jsonb_build_object('comment_id', (string_to_array(ta.common_id, '-'::text))[1])) AS comment,\n    ta.comment AS fuzzy_search,\n    'comment'::text AS type,\n    ta.create_date,\n    (t2.sla -\u003e\u003e 'id'::text) AS ticket_sla,\n    (t2.status -\u003e\u003e 'id'::text) AS ticket_status,\n    (t2.type -\u003e\u003e 'id'::text) AS ticket_type,\n    (ta.creator -\u003e\u003e 'username'::text) AS creator,\n    (ta.creator -\u003e\u003e 'display'::text) AS creator_name,\n    NULL::text AS assignee,\n    NULL::text AS assignee_name\n   FROM (datahub.vw_ticket_activity ta\n     LEFT JOIN datahub.vw_ticket t2 ON ((t2.id = ta.ticket_id)));",
          "fqdn": "datahub.vw_ticket_search"
        },
        "vw_user_group": {
          "name": {
            "logical": "vw_user_group",
            "physical": "vw_user_group"
          },
          "comment": "A simplified/aggregate view of user groups and associated subgroups, roles, and users.",
          "type": "VIEW",
          "items": {
            "assigned_rights": {
              "name": {
                "physical": "assigned_rights"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.assigned_rights"
            },
            "assigned_roles": {
              "name": {
                "physical": "assigned_roles"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.assigned_roles"
            },
            "associated_profiles": {
              "name": {
                "physical": "associated_profiles"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.associated_profiles"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.create_date"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.description"
            },
            "group_members": {
              "name": {
                "physical": "group_members"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.group_members"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.id"
            },
            "ldap_mappings": {
              "name": {
                "physical": "ldap_mappings"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.ldap_mappings"
            },
            "member_groups": {
              "name": {
                "physical": "member_groups"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.member_groups"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.metadata"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.name"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.protected"
            },
            "users": {
              "name": {
                "physical": "users"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_group.users"
            }
          },
          "relationships": [],
          "view_source": "SELECT g.seqid AS id,\n    g.nm AS name,\n    COALESCE(g.dsc, ''::text) AS description,\n    g.meta AS metadata,\n    g.protected,\n    g.record_create_dt AS create_date,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', ug.seqid, 'name', ug.nm, 'description', COALESCE(ug.dsc, ''::text), 'metadata', ug.meta, 'protected', ug.protected, 'create_date', ug.record_create_dt)) AS jsonb_agg\n           FROM (datahub.user_group ug\n             LEFT JOIN datahub.group_member gm ON ((gm.user_subgroup_seqid = ug.seqid)))\n          WHERE (gm.user_group_seqid = g.seqid)) AS member_groups,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', ug2.seqid, 'name', ug2.nm, 'description', COALESCE(ug2.dsc, ''::text), 'metadata', ug2.meta, 'protected', ug2.protected, 'create_date', ug2.record_create_dt)) AS jsonb_agg\n           FROM (datahub.user_group ug2\n             LEFT JOIN datahub.group_member gm2 ON ((gm2.user_group_seqid = ug2.seqid)))\n          WHERE (gm2.user_subgroup_seqid = g.seqid)) AS group_members,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', ur.seqid, 'name', ur.nm, 'description', COALESCE(ur.dsc, ''::text), 'metadata', ur.meta, 'protected', ur.protected, 'create_date', ur.record_create_dt)) AS jsonb_agg\n           FROM (datahub.user_role ur\n             LEFT JOIN datahub.user_role_assignment ura ON ((ura.user_role_seqid = ur.seqid)))\n          WHERE (ura.user_group_seqid = g.seqid)) AS assigned_roles,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', l.seqid, 'username', l.username, 'description', COALESCE(l.dsc, ''::text), 'enabled', l.enabled, 'ldap', l.ldap_id, 'person', ( SELECT p.data\n                   FROM datahub.vw_person p\n                  WHERE (p.login_id = l.seqid)), 'create_date', l.record_create_dt)) AS jsonb_agg\n           FROM (datahub.login l\n             LEFT JOIN datahub.group_member gm3 ON ((gm3.login_seqid = l.seqid)))\n          WHERE ((gm3.user_group_seqid = g.seqid) AND (l.archive_dt IS NULL))) AS users,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', srr.seqid, 'name',\n                CASE\n                    WHEN (ra.force = 'd'::bpchar) THEN ('deny:'::text || srr.nm)\n                    WHEN (ra.force = 'a'::bpchar) THEN ('allow:'::text || srr.nm)\n                    ELSE srr.nm\n                END, 'description', COALESCE(srr.dsc, ''::text), 'resource', jsonb_build_object('id', sr.seqid, 'name', sr.nm, 'description', COALESCE(sr.dsc, ''::text), 'create_date', sr.record_create_dt), 'create_date', srr.record_create_dt, 'assignment', jsonb_build_object('id', ra.seqid, 'create_date', ra.record_create_dt))) AS jsonb_agg\n           FROM ((datahub.right_assign ra\n             LEFT JOIN datahub.system_resource_right srr ON ((ra.right_seqid = srr.seqid)))\n             LEFT JOIN datahub.system_resource sr ON ((sr.seqid = srr.system_resource_seqid)))\n          WHERE (ra.group_seqid = g.seqid)) AS assigned_rights,\n    (( SELECT DISTINCT jsonb_agg(DISTINCT y.x) AS jsonb_agg\n           FROM ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', p.seqid, 'name', p.nm, 'description', COALESCE(p.dsc, ''::text), 'create_date', p.record_create_dt, 'assignment', json_build_object('id', up.seqid, 'create_date', up.record_create_dt, 'inherited',\n                        CASE\n                            WHEN (up.user_group_seqid IS NOT NULL) THEN false\n                            ELSE true\n                        END, 'inherited_from',\n                        CASE\n                            WHEN (up.user_group_seqid IS NOT NULL) THEN '[]'::jsonb\n                            WHEN (up.user_role_seqid IN ( SELECT ura2x.user_role_seqid\n                               FROM datahub.user_role_assignment ura2x\n                              WHERE (ura2x.user_group_seqid = g.seqid))) THEN ( SELECT jsonb_agg(DISTINCT ur3x.nm) AS jsonb_agg\n                               FROM (datahub.user_role ur3x\n                                 LEFT JOIN datahub.user_role_assignment ura3x ON ((ur3x.seqid = ura3x.user_role_seqid)))\n                              WHERE (ura3x.user_group_seqid = g.seqid))\n                            ELSE '[]'::jsonb\n                        END))) AS x\n                   FROM (datahub.profile p\n                     LEFT JOIN datahub.user_profile up ON ((up.profile_seqid = p.seqid)))\n                  WHERE ((p.archive_dt IS NULL) AND ((up.user_group_seqid = g.seqid) OR (up.user_role_seqid IN ( SELECT ura2.user_role_seqid\n                           FROM datahub.user_role_assignment ura2\n                          WHERE (ura2.user_group_seqid = g.seqid)))))\n                UNION\n                 SELECT\n                        CASE\n                            WHEN (g.seqid IN ( SELECT ura3.user_group_seqid\n                               FROM datahub.user_role_assignment ura3\n                              WHERE ((ura3.user_role_seqid = 'datahub_admin'::text) AND (ura3.user_group_seqid IS NOT NULL)))) THEN jsonb_agg(DISTINCT jsonb_build_object('id', p2.seqid, 'name', p2.nm, 'description', COALESCE(p2.dsc, ''::text), 'create_date', p2.record_create_dt, 'assignment', jsonb_build_object('inherited', true, 'inherited_from', '[\"datahub_admin\"]'::jsonb)))\n                            ELSE NULL::jsonb\n                        END AS x\n                   FROM datahub.profile p2\n                  WHERE (p2.archive_dt IS NULL)) y))[0] AS associated_profiles,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('map_id', lm.seqid, 'dn', lm.dn, 'metadata', lm.meta, 'create_date', lm.record_create_dt)) AS jsonb_agg\n           FROM datahub.ldap_map lm\n          WHERE (lm.group_seqid = g.seqid)) AS ldap_mappings\n   FROM datahub.user_group g\n  ORDER BY g.nm, g.record_create_dt DESC;",
          "fqdn": "datahub.vw_user_group"
        },
        "vw_user_role": {
          "name": {
            "logical": "vw_user_role",
            "physical": "vw_user_role"
          },
          "comment": "A simple aggregate view of user roles and associated groups/users.",
          "type": "VIEW",
          "items": {
            "assigned_groups": {
              "name": {
                "physical": "assigned_groups"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.assigned_groups"
            },
            "assigned_rights": {
              "name": {
                "physical": "assigned_rights"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.assigned_rights"
            },
            "assigned_users": {
              "name": {
                "physical": "assigned_users"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.assigned_users"
            },
            "associated_profiles": {
              "name": {
                "physical": "associated_profiles"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.associated_profiles"
            },
            "create_date": {
              "name": {
                "physical": "create_date"
              },
              "comment": "",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.create_date"
            },
            "description": {
              "name": {
                "physical": "description"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.description"
            },
            "id": {
              "name": {
                "physical": "id"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.id"
            },
            "ldap_mappings": {
              "name": {
                "physical": "ldap_mappings"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.ldap_mappings"
            },
            "metadata": {
              "name": {
                "physical": "metadata"
              },
              "comment": "",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.metadata"
            },
            "name": {
              "name": {
                "physical": "name"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.name"
            },
            "protected": {
              "name": {
                "physical": "protected"
              },
              "comment": "",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.vw_user_role.protected"
            }
          },
          "relationships": [],
          "view_source": "SELECT r.seqid AS id,\n    r.nm AS name,\n    COALESCE(r.dsc, ''::text) AS description,\n    r.meta AS metadata,\n    r.protected,\n    r.record_create_dt AS create_date,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', l.seqid, 'username', l.username, 'description', COALESCE(l.dsc, ''::text), 'enabled', l.enabled, 'ldap', l.ldap_id, 'person', ( SELECT p.data\n                   FROM datahub.vw_person p\n                  WHERE (p.login_id = l.seqid)), 'create_date', ura.record_create_dt)) AS jsonb_agg\n           FROM (datahub.login l\n             LEFT JOIN datahub.user_role_assignment ura ON ((ura.login_seqid = l.seqid)))\n          WHERE ((ura.user_role_seqid = r.seqid) AND (l.archive_dt IS NULL))) AS assigned_users,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('map_id', lm.seqid, 'dn', lm.dn, 'metadata', lm.meta, 'create_date', lm.record_create_dt)) AS jsonb_agg\n           FROM datahub.ldap_map lm\n          WHERE (lm.role_seqid = r.seqid)) AS ldap_mappings,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', ug.seqid, 'name', ug.nm, 'description', COALESCE(ug.dsc, ''::text), 'metadata', ug.meta, 'protected', ug.protected, 'create_date', ug.record_create_dt, 'assignment', jsonb_build_object('id', ura2.seqid, 'create_date', ura2.record_create_dt))) AS jsonb_agg\n           FROM (datahub.user_role_assignment ura2\n             LEFT JOIN datahub.user_group ug ON ((ug.seqid = ura2.user_group_seqid)))\n          WHERE ((ura2.user_role_seqid = r.seqid) AND (ug.seqid IS NOT NULL))) AS assigned_groups,\n    ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', srr.seqid, 'name',\n                CASE\n                    WHEN (ra.force = 'd'::bpchar) THEN ('deny:'::text || srr.nm)\n                    WHEN (ra.force = 'a'::bpchar) THEN ('allow:'::text || srr.nm)\n                    ELSE srr.nm\n                END, 'description', COALESCE(srr.dsc, ''::text), 'resource', jsonb_build_object('id', sr.seqid, 'name', sr.nm, 'description', COALESCE(sr.dsc, ''::text), 'create_date', sr.record_create_dt), 'create_date', srr.record_create_dt, 'assignment', jsonb_build_object('id', ra.seqid, 'create_date', ra.record_create_dt))) AS jsonb_agg\n           FROM ((datahub.right_assign ra\n             LEFT JOIN datahub.system_resource_right srr ON ((ra.right_seqid = srr.seqid)))\n             LEFT JOIN datahub.system_resource sr ON ((sr.seqid = srr.system_resource_seqid)))\n          WHERE (ra.user_role_seqid = r.seqid)) AS assigned_rights,\n    (( SELECT jsonb_agg(DISTINCT y.x) AS jsonb_agg\n           FROM ( SELECT jsonb_agg(DISTINCT jsonb_build_object('id', p.seqid, 'name', p.nm, 'description', COALESCE(p.dsc, ''::text), 'create_date', p.record_create_dt, 'assignment', jsonb_build_object('inherited',\n                        CASE\n                            WHEN (up.user_role_seqid IS NOT NULL) THEN false\n                            ELSE true\n                        END, 'inherited_from',\n                        CASE\n                            WHEN (up.user_role_seqid IS NOT NULL) THEN '[]'::jsonb\n                            ELSE ( SELECT jsonb_agg(DISTINCT dug.nm) AS jsonb_agg\n                               FROM ((datahub.user_group dug\n                                 LEFT JOIN datahub.user_role_assignment dura ON ((dura.user_group_seqid = dug.seqid)))\n                                 LEFT JOIN datahub.user_profile dup ON ((dup.user_group_seqid = dug.seqid)))\n                              WHERE ((dup.profile_seqid = p.seqid) AND (dura.user_role_seqid = r.seqid)))\n                        END))) AS x\n                   FROM (datahub.profile p\n                     LEFT JOIN datahub.user_profile up ON ((up.profile_seqid = p.seqid)))\n                  WHERE ((up.user_role_seqid = r.seqid) AND (p.archive_dt IS NULL))\n                UNION\n                 SELECT\n                        CASE\n                            WHEN (r.seqid = 'datahub_admin'::text) THEN jsonb_agg(DISTINCT jsonb_build_object('id', p2.seqid, 'name', p2.nm, 'description', COALESCE(p2.dsc, ''::text), 'create_date', p2.record_create_dt, 'assignment', jsonb_build_object('inherited', true, 'inherited_from', '[\"datahub_admin\"]'::jsonb)))\n                            ELSE NULL::jsonb\n                        END AS x\n                   FROM datahub.profile p2\n                  WHERE (p2.archive_dt IS NULL)) y))[0] AS associated_profiles\n   FROM datahub.user_role r\n  ORDER BY r.nm;",
          "fqdn": "datahub.vw_user_role"
        },
        "webhook": {
          "name": {
            "logical": "webhook",
            "physical": "webhook"
          },
          "comment": "Represents a webhook configuration for sending HTTP requests to remote HTTP servers.",
          "type": "TABLE",
          "items": {
            "archive_dt": {
              "name": {
                "physical": "archive_dt"
              },
              "comment": "Archive date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.webhook.archive_dt"
            },
            "dsc": {
              "name": {
                "physical": "dsc"
              },
              "comment": "Description of the webhook",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.webhook.dsc"
            },
            "enabled": {
              "name": {
                "physical": "enabled"
              },
              "comment": "Indicates the webhook is active",
              "type": "bool",
              "udt_type": "bool",
              "identity": false,
              "default": "true",
              "nullable": false,
              "fqdn": "datahub.webhook.enabled"
            },
            "encryption_key": {
              "name": {
                "physical": "encryption_key"
              },
              "comment": "The public key (PEM) used for encrypting the webhook payload",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.webhook.encryption_key"
            },
            "header": {
              "name": {
                "physical": "header"
              },
              "comment": "Optional Key/Value object containing special HTTP request headers",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.webhook.header",
              "key": {
                "name": "webhook_json_expansion_key",
                "type": "json",
                "comment": "Generated by JSON autoexpansion of the webhook item."
              }
            },
            "header::x-header": {
              "name": {
                "physical": "header::x-header"
              },
              "comment": "",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "",
              "nullable": true,
              "fqdn": "datahub.webhook.x-header",
              "metadata": {
                "source": "header"
              }
            },
            "http_method": {
              "name": {
                "physical": "http_method"
              },
              "comment": "HTTP method used to send webhook request",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "'POST'::text",
              "nullable": false,
              "fqdn": "datahub.webhook.http_method"
            },
            "meta": {
              "name": {
                "physical": "meta"
              },
              "comment": "Optional metadata associated with a webhook",
              "type": "jsonb",
              "udt_type": "jsonb",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.webhook.meta"
            },
            "record_create_dt": {
              "name": {
                "physical": "record_create_dt"
              },
              "comment": "Record creation date",
              "type": "timestamptz",
              "udt_type": "timestamptz",
              "identity": false,
              "default": "timezone('UTC'::text, now())",
              "nullable": false,
              "fqdn": "datahub.webhook.record_create_dt"
            },
            "seqid": {
              "name": {
                "physical": "seqid"
              },
              "comment": "Unique webhook ID",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "datahub.nanoid()",
              "nullable": false,
              "fqdn": "datahub.webhook.seqid"
            },
            "signing_key": {
              "name": {
                "physical": "signing_key"
              },
              "comment": "The private key (PEM) used for signing the webhook payload",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": true,
              "fqdn": "datahub.webhook.signing_key"
            },
            "url": {
              "name": {
                "physical": "url"
              },
              "comment": "Target URL",
              "type": "text",
              "udt_type": "text",
              "identity": false,
              "default": "NULL",
              "nullable": false,
              "fqdn": "datahub.webhook.url"
            }
          },
          "relationships": [
            "parent=webhook_system_event_rel"
          ],
          "fqdn": "datahub.webhook"
        }
      }
    }
  }
}"